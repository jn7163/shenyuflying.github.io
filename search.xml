<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[x86_64汇编与调试]]></title>
      <url>http://shenyu.wiki/2016/10/29/x86-64%E6%B1%87%E7%BC%96%E4%B8%8E%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>汇编调试如下好处：<br>1）调试Release版本，调试对象里面没有debug符号。<br>2）当C代码一行中执行了很多语句，汇编调试可以准确定位错误的情况。<br>3）可以分析栈溢出等复杂的错误。<br>掌握汇编和反汇编，会更加清楚寄存器，内存，汇编指令，程序堆栈等概念，理解C语言运行时的细节，帮助提高编程能力。</p>
</blockquote>
<p>[TOC]</p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><img src="http://static.zybuluo.com/shenyuflying/r7omgxk97tbzi0axk0pd211a/image_1b07j5oorei6i04o1e1usj1b0d9.png" alt="计算机结构"></p>
<a id="more"></a>
<h3 id="寄存器与栈"><a href="#寄存器与栈" class="headerlink" title="寄存器与栈"></a>寄存器与栈</h3><p><img src="http://static.zybuluo.com/shenyuflying/q8k0ln5ar7saca9cl4cpif5p/image_1b07j8ngs1s0010161diro2quq416.png" alt="image_1b07j8ngs1s0010161diro2quq416.png-27kB"></p>
<p>rbp: 基地址<br>rsp：栈顶<br>rip：指令地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> 1  #include&lt;stdio.h&gt;</div><div class="line"> 2  #include&lt;stdlib.h&gt;</div><div class="line"> 3 </div><div class="line"> 4  int global_var = 0;</div><div class="line"> 5  int main()</div><div class="line"> 6  &#123;</div><div class="line"> 7      static int static_var = 0;</div><div class="line"> 8      int        local_var  = 0;</div><div class="line"> 9      int        *heap_var  = malloc(sizeof(int));</div><div class="line">10      printf(&quot;local_var  = %p\n&quot;,&amp;local_var);</div><div class="line">11      printf(&quot;heap_var   = %p\n&quot;,heap_var);</div><div class="line">12      printf(&quot;static_var = %p\n&quot;,&amp;static_var);</div><div class="line">13      printf(&quot;global_var = %p\n&quot;,&amp;global_var);</div><div class="line">14      printf(&quot;string     = %p\n&quot;,&quot;Hello world&quot;);</div><div class="line">15      printf(&quot;main       = %p\n&quot;,&amp;main);</div><div class="line">16      </div><div class="line">17      return 0;</div><div class="line">18  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ./location </div><div class="line">local_var  = 0x7ffde741b6dc</div><div class="line">heap_var   = 0x1f90010</div><div class="line">static_var = 0x601050</div><div class="line">global_var = 0x60104c</div><div class="line">string     = 0x4006b4</div><div class="line">main       = 0x40057d</div></pre></td></tr></table></figure>
<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">int bar()</div><div class="line">&#123;</div><div class="line">    int *a=0x0;   </div><div class="line">    *a=1;       </div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line">main()</div><div class="line">&#123;</div><div class="line">    bar();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">(gdb) disas bar</div><div class="line">Dump of assembler code for function bar:</div><div class="line">0x0000000000400448 &lt;bar+0&gt;:	push   %rbp</div><div class="line">0x0000000000400449 &lt;bar+1&gt;:	mov    %rsp,%rbp</div><div class="line">0x000000000040044c &lt;bar+4&gt;:	movq   $0x0,-0x8(%rbp)</div><div class="line">0x0000000000400454 &lt;bar+12&gt;:	mov    -0x8(%rbp),%rax</div><div class="line">0x0000000000400458 &lt;bar+16&gt;:	movl   $0x1,(%rax)</div><div class="line">0x000000000040045e &lt;bar+22&gt;:	mov    $0x0,%eax</div><div class="line">0x0000000000400463 &lt;bar+27&gt;:	leaveq </div><div class="line">0x0000000000400464 &lt;bar+28&gt;:	retq   </div><div class="line">End of assembler dump.</div><div class="line">(gdb) disas main</div><div class="line">Dump of assembler code for function main:</div><div class="line">0x0000000000400465 &lt;main+0&gt;:	push   %rbp</div><div class="line">0x0000000000400466 &lt;main+1&gt;:	mov    %rsp,%rbp</div><div class="line">0x0000000000400469 &lt;main+4&gt;:	mov    $0x0,%eax</div><div class="line">0x000000000040046e &lt;main+9&gt;:	callq  0x400448 &lt;bar&gt;</div><div class="line">0x0000000000400473 &lt;main+14&gt;:leaveq </div><div class="line">0x0000000000400474 &lt;main+15&gt;:retq   </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure>
<p>看以上程序对应的汇编，在main里调用bar的指令是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x000000000040046e &lt;main+9&gt;:	callq  0x400448 &lt;bar&gt;</div></pre></td></tr></table></figure></p>
<p>call 等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">push %rip            ---保存rip地址</div><div class="line">jump 0x400448        ---跳转到指定函数地址</div></pre></td></tr></table></figure></p>
<p>跳转到bar后，会有如下指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">0x0000000000400448 &lt;bar+0&gt;:	push   %rbp</div><div class="line">0x0000000000400449 &lt;bar+1&gt;:	mov    %rsp,%rbp</div><div class="line">        .</div><div class="line">.</div><div class="line">.</div><div class="line">0x0000000000400463 &lt;bar+27&gt;:	leaveq </div><div class="line">0x0000000000400464 &lt;bar+28&gt;:	retq</div></pre></td></tr></table></figure></p>
<p>push %rbp 等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">subl $4, %rsp        ---栈上分配空间</div><div class="line">movl %rbp (%rsp)     ---把rbp保存到栈顶</div><div class="line">```				</div><div class="line"></div><div class="line">leave等价于：</div></pre></td></tr></table></figure></p>
<p>movl %rbp %rsp       —回退rsp<br>popl %rbp            —恢复rbp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ret 等价于：</div></pre></td></tr></table></figure></p>
<p>pop %rip             —恢复rip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pop 等价于：</div></pre></td></tr></table></figure></p>
<p>movl (%esp), %???    —取栈上的值给？？？<br>addl $4, %esp        —回收栈空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">### 传参——通过栈传参</div></pre></td></tr></table></figure></p>
<p>  1 int bar(int a,int b)<br>  2 {<br>  3     return a+b;<br>  4 }<br>  5<br>  6 int foo()<br>  7 {<br>  8     int a=1,b=2;<br>  9     return bar(a,b);<br> 10 }<br>      5 bar:<br>  6     pushl   %ebp<br>  7     movl    %esp, %ebp<br>  8     movl    12(%ebp), %eax<br>  9     addl    8(%ebp), %eax<br> 10     popl    %ebp<br> 11     ret<br> 12 foo:<br> 13     pushl   %ebp<br> 14     movl    %esp, %ebp<br> 15     subl    $24, %esp<br> 16     movl    $1, -8(%ebp)<br> 17     movl    $2, -4(%ebp)<br> 18     movl    -4(%ebp), %eax<br> 19     movl    %eax, 4(%esp)<br> 20     movl    -8(%ebp), %eax<br> 21     movl    %eax, (%esp)<br> 22     call    bar<br> 23     leave<br> 24     ret</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">### 传参——通过寄存器</div><div class="line"></div><div class="line"></div><div class="line">![image_1b07jjuiqa9j1n77po51nnbrdu9.png-72.9kB][2]</div></pre></td></tr></table></figure>
<p>int bar(int a,int b)<br>{<br>    return a+b;<br>}</p>
<p>int foo()<br>{<br>    int a=1,b=2;<br>    return bar(a,b);<br>}</p>
<p>bar:<br>    pushq   %rbp<br>    movq    %rsp, %rbp<br>    movl    %edi, -4(%rbp)<br>    movl    %esi, -8(%rbp)<br>    movl    -8(%rbp), %eax<br>    addl    -4(%rbp), %eax<br>    leave<br>    ret<br>foo:<br>    pushq   %rbp<br>    movq    %rsp, %rbp<br>    subq    $16, %rsp<br>    movl    $1, -8(%rbp)<br>    movl    $2, -4(%rbp)<br>    movl    -4(%rbp), %esi      –参数 2<br>    movl    -8(%rbp), %edi      –参数 1<br>    call    bar<br>    leave<br>    ret<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">优化级别</div><div class="line">---------</div><div class="line"></div><div class="line">### gcc –O1 –m64</div></pre></td></tr></table></figure></p>
<p>int bar(int a,int b)<br>{<br>    return a+b;<br>}</p>
<p>int foo()<br>{<br>    int a=1,b=2;<br>    return bar(a,b  1 int bar(int a,int b));<br>}<br> bar:<br>    leal    (%rsi,%rdi), %eax<br>    ret<br>foo:<br>    movl    $2, %esi<br>    movl    $1, %edi<br>    jmp bar            -省去了函数调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">### gcc –O2 –m64</div></pre></td></tr></table></figure>
<p>int bar(int a,int b)<br>{<br> return a+b;<br>}</p>
<p>int foo()<br>{<br> int a=1,b=2;<br> return bar(a,b  1 int bar(int a,int b));<br>}<br>bar:<br> leal    (%rsi,%rdi), %eax<br> ret<br>foo:<br> movl    $2, %esi<br> movl    $1, %edi<br> jmp bar            -省去了函数调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">### gcc –O3 –m64</div></pre></td></tr></table></figure></p>
<p>int bar(int a,int b)<br>{<br> return a+b;<br>}</p>
<p>int foo()<br>{<br> int a=1,b=2;<br> return bar(a,b);<br>}<br>bar:<br> leal    (%rsi,%rdi), %eax<br> ret<br>foo:<br> movl    $3, %eax      -省去了函数调用，直接计算结果返回<br> ret<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">反汇编</div><div class="line">---------</div><div class="line">反汇编首先要了解C语言对应的汇编是什么，才方便从汇编反推过来C语言。下面简单总结一下</div><div class="line"></div><div class="line">### if</div></pre></td></tr></table></figure></p>
<p>void func()<br>{<br>    int a=1;<br>    if(a)<br>        bar();<br>    else<br>        foo();<br>    return;<br>}<br>     .file   “if.c”<br>     .text<br> .globl func<br>     .type   func, @function<br> func:<br> .LFB2:<br>     pushq   %rbp<br> .LCFI0:<br>     movq    %rsp, %rbp<br> .LCFI1:<br>     subq    $16, %rsp           —给int a在栈上分配空间<br> .LCFI2:<br>     movl    $1, -4(%rbp)          —a=1<br>     cmpl    $0, -4(%rbp)          —if(a==0)<br>     je  .L2                                    goto foo<br>     movl    $0, %eax                 else<br>     call    bar                           goto bar<br>     jmp .L5<br> .L2:<br>     movl    $0, %eax<br>     call    foo<br> .L5:<br>     leave</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### switch</div></pre></td></tr></table></figure>
<p>int foo()<br>{<br>    int a=1;<br>    switch(a)<br>    {<br>        case 1:<br>                case1();<br>            break;<br>        case 2:<br>                case2();<br>            break;<br>        case 3:<br>                case3();<br>            break;<br>    }<br>    return;<br>}<br> foo:<br>.LFB2:<br>    pushq   %rbp<br>.LCFI0:<br>    movq    %rsp, %rbp<br>.LCFI1:<br>    subq    $32, %rsp                – int a<br>.LCFI2:<br>    movl    $1, -4(%rbp)             – a=1<br>    movl    -4(%rbp), %eax<br>    movl    %eax, -20(%rbp)<br>    cmpl    $2, -20(%rbp)            – case 2:<br>    je  .L4                                 goto case2()<br>    cmpl    $3, -20(%rbp)            – case 3:<br>    je  .L5                                 goto case3()<br>    cmpl    $1, -20(%rbp)              – case 1:<br>    je  .L3                                  goto case1()<br>    jmp .L7<br>.L3:<br>    movl    $0, %eax<br>    call    case1<br>    jmp .L7<br>.L4:<br>    movl    $0, %eax<br>    call    case2<br>    jmp .L7<br>.L5:<br>    movl    $0, %eax<br>    call    case3<br>.L7:<br>    leave<br>    ret<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### while</div></pre></td></tr></table></figure></p>
<p>void foo()<br>{<br> int i=100;<br> while(i&gt;0)<br> {<br>     bar();<br>     i–;<br> }<br>}<br> foo:<br> pushq   %rbp<br> movq    %rsp, %rbp<br> subq    $16, %rsp<br> movl    $100, -4(%rbp)<br> jmp .L2<br>.L3:<br> movl    $0, %eax<br> call    bar<br> subl    $1, -4(%rbp)<br>.L2:<br> cmpl    $0, -4(%rbp)<br> jg  .L3<br> leave<br> ret</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### for</div></pre></td></tr></table></figure>
<p>void foo()<br>{<br>    int i=0;<br>    for(i=0x123;i&lt;0x1234;i++)<br>    {<br>        bar();<br>    }</p>
<p>}</p>
<p> foo:<br>    pushq   %rbp<br>    movq    %rsp, %rbp<br>    subq    $16, %rsp<br>    movl    $0, -4(%rbp)<br>    movl    $291, -4(%rbp)<br>    jmp .L2<br>.L3:<br>    movl    $0, %eax<br>    call    bar<br>    addl    $1, -4(%rbp)<br>.L2:<br>    cmpl    $4659, -4(%rbp)<br>    jle .L3<br>    leave<br>    ret</p>
<p>i = 0x123<br>if(i<0x1234) {="" bar()="" i++="" goto="" …="" }="" else="" break="" <figure="" class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">获取汇编</div><div class="line">---------</div><div class="line"></div><div class="line">### 可执行文件</div><div class="line">objdump –D foo</div><div class="line">### C代码</div><div class="line">gcc –S foo.c</div><div class="line">### gdb</div></pre></td></tr></table></0x1234)></p>
<p>disas [/m|/r]  [函数名|内存地址]</p>
<p>/m  同时打出汇编和源码<br>/r  同时打出机器码和汇编<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">例子：</div></pre></td></tr></table></figure></p>
<p>(gdb) disas /m main<br>Dump of assembler code for function main:<br>6    {<br>   0x000000000040052d &lt;+0&gt;:    push   %rbp<br>   0x000000000040052e &lt;+1&gt;:    mov    %rsp,%rbp<br>   0x0000000000400531 &lt;+4&gt;:    sub    $0x10,%rsp</p>
<p>7        int n=10;<br>   0x0000000000400535 &lt;+8&gt;:    movl   $0xa,-0x4(%rbp)</p>
<p>8        while(–n&gt;=0)<br>   0x000000000040053c &lt;+15&gt;:    jmp    0x400552 <main+37><br>   0x0000000000400552 &lt;+37&gt;:    subl   $0x1,-0x4(%rbp)<br>   0x0000000000400556 &lt;+41&gt;:    cmpl   $0x0,-0x4(%rbp)<br>   0x000000000040055a &lt;+45&gt;:    jns    0x40053e <main+17></main+17></main+37></p>
<p>9        {<br>10            printf(“%d\n”,n);<br>=&gt; 0x000000000040053e &lt;+17&gt;:    mov    -0x4(%rbp),%eax<br>   0x0000000000400541 &lt;+20&gt;:    mov    %eax,%esi<br>   0x0000000000400543 &lt;+22&gt;:    mov    $0x4005e4,%edi<br>   0x0000000000400548 &lt;+27&gt;:    mov    $0x0,%eax<br>   0x000000000040054d &lt;+32&gt;:    callq  0x400410 <a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#58;&#x70;&#x72;&#105;&#110;&#116;&#102;&#64;&#x70;&#x6c;&#x74;">&#x70;&#x72;&#105;&#110;&#116;&#102;&#64;&#x70;&#x6c;&#x74;</a></p>
<p>11<br>12        }<br>13    }<br>   0x000000000040055c &lt;+47&gt;:    leaveq<br>   0x000000000040055d &lt;+48&gt;:    retq   </p>
<p>(gdb) disas /r main<br>Dump of assembler code for function main:<br>   0x000000000040052d &lt;+0&gt;:    55    push   %rbp<br>   0x000000000040052e &lt;+1&gt;:    48 89 e5    mov    %rsp,%rbp<br>   0x0000000000400531 &lt;+4&gt;:    48 83 ec 10    sub    $0x10,%rsp<br>   0x0000000000400535 &lt;+8&gt;:    c7 45 fc 0a 00 00 00    movl   $0xa,-0x4(%rbp)<br>   0x000000000040053c &lt;+15&gt;:    eb 14    jmp    0x400552 <main+37><br>=&gt; 0x000000000040053e &lt;+17&gt;:    8b 45 fc    mov    -0x4(%rbp),%eax<br>   0x0000000000400541 &lt;+20&gt;:    89 c6    mov    %eax,%esi<br>   0x0000000000400543 &lt;+22&gt;:    bf e4 05 40 00    mov    $0x4005e4,%edi<br>   0x0000000000400548 &lt;+27&gt;:    b8 00 00 00 00    mov    $0x0,%eax<br>   0x000000000040054d &lt;+32&gt;:    e8 be fe ff ff    callq  0x400410 <a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#x70;&#x72;&#x69;&#110;&#x74;&#102;&#64;&#x70;&#108;&#x74;">&#x70;&#x72;&#x69;&#110;&#x74;&#102;&#64;&#x70;&#108;&#x74;</a><br>   0x0000000000400552 &lt;+37&gt;:    83 6d fc 01    subl   $0x1,-0x4(%rbp)<br>   0x0000000000400556 &lt;+41&gt;:    83 7d fc 00    cmpl   $0x0,-0x4(%rbp)<br>   0x000000000040055a &lt;+45&gt;:    79 e2    jns    0x40053e <main+17><br>   0x000000000040055c &lt;+47&gt;:    c9    leaveq<br>   0x000000000040055d &lt;+48&gt;:    c3    retq<br>End of assembler dump.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">gdb调试core文件</div><div class="line">-----------------</div><div class="line"></div><div class="line">下面就对如下一个小程序为例子展开调试：</div></pre></td></tr></table></figure></main+17></main+37></p>
<p>int bar()<br>{<br>    int <em>a=0x0;   
    </em>a=1;<br>    return 0;<br>}<br>main()<br>{<br>    bar();<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">看程序应该在第5行core掉，原因是访问了非法地址0x0。但是如何通过汇编定位到这一行呢？</div><div class="line"></div><div class="line">1）载入gdb ./fcall ./core.29782 </div><div class="line">2）bt 看下堆栈，举个例子：</div></pre></td></tr></table></figure></p>
<p>(gdb) bt</p>
<p>#0  0x0000000000400458 in bar ()</p>
<p>#1  0x0000000000400473 in main ()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这个`0x0000000000400458`地址就是当前指令地址，是在这个地方core掉的。</div><div class="line"></div><div class="line">3）`disas 0x0000000000400458`看`0x0000000000400458`附近的汇编</div></pre></td></tr></table></figure></p>
<p>(gdb) disas 0x0000000000400458<br>Dump of assembler code for function bar:<br>0x0000000000400448 <bar+0>:    push   %rbp<br>0x0000000000400449 <bar+1>:    mov    %rsp,%rbp<br>0x000000000040044c <bar+4>:    movq   $0x0,-0x8(%rbp)<br>0x0000000000400454 <bar+12>:    mov    -0x8(%rbp),%rax<br>0x0000000000400458 <bar+16>:    movl   $0x1,(%rax)<br>0x000000000040045e <bar+22>:    mov    $0x0,%eax<br>0x0000000000400463 <bar+27>:    leaveq<br>0x0000000000400464 <bar+28>:    retq<br>End of assembler dump.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">可以看到在`movl   $0x1,(%rax)`指令coredump了。 mov指令一般都是core的罪魁祸首，因为他要访问内存(%rax)。%rax是寄存器，加上括号就是要引用地址为%rax的内存。这里是要把1赋值给地址为%rax的内存。结合代码，很明显的是第5行赋值的问题。</div><div class="line">4）看寄存器里的值</div></pre></td></tr></table></figure></bar+28></bar+27></bar+22></bar+16></bar+12></bar+4></bar+1></bar+0></p>
<p>(gdb) p $rax<br>$1 = 0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">发现了寄存器rax值为0，movl   $0x1,(%rax)就是要引用地址为0的内存，显然是不合理的。</div><div class="line"></div><div class="line">gdb汇编调试运行程序</div><div class="line">---------------</div><div class="line">先得到main和bar的汇编如下：</div></pre></td></tr></table></figure></p>
<p>(gdb) disas main<br>Dump of assembler code for function main:<br>   0x000000000040050a &lt;+0&gt;:    push   %rbp<br>   0x000000000040050b &lt;+1&gt;:    mov    %rsp,%rbp<br>=&gt; 0x000000000040050e &lt;+4&gt;:    mov    $0x0,%eax<br>   0x0000000000400513 &lt;+9&gt;:    callq  0x4004ed <bar><br>   0x0000000000400518 &lt;+14&gt;:    pop    %rbp<br>   0x0000000000400519 &lt;+15&gt;:    retq<br>End of assembler dump.<br>(gdb) disas bar<br>Dump of assembler code for function bar:<br>   0x00000000004004ed &lt;+0&gt;:    push   %rbp<br>   0x00000000004004ee &lt;+1&gt;:    mov    %rsp,%rbp<br>   0x00000000004004f1 &lt;+4&gt;:    movq   $0x0,-0x8(%rbp)<br>   0x00000000004004f9 &lt;+12&gt;:    mov    -0x8(%rbp),%rax<br>   0x00000000004004fd &lt;+16&gt;:    movl   $0x1,(%rax)<br>   0x0000000000400503 &lt;+22&gt;:    mov    $0x0,%eax<br>   0x0000000000400508 &lt;+27&gt;:    pop    %rbp<br>   0x0000000000400509 &lt;+28&gt;:    retq<br>End of assembler dump.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdb载入后可以进行如下命令：</div></pre></td></tr></table></figure></bar></p>
<p>(gdb) b <em>0x0000000000400465   在某地址处打断点。<br>(gdb) stepi                   下一条指令<br>(gdb) nexti                   下一条指令<br>(gdb) info frame<br>(gdb) info registers<br>(gdb) jump </em>address           跳转到某条指令，类似goto<br>(gdb) info frame<br>Stack level 0, frame at 0x7fffffffdf20:<br> rip = 0x40050e in main (simple.c:10); saved rip = 0x7ffff7a36ec5<br> source language c.<br> Arglist at 0x7fffffffdf10, args:<br> Locals at 0x7fffffffdf10, Previous frame’s sp is 0x7fffffffdf20<br> Saved registers:<br>  rbp at 0x7fffffffdf10, rip at 0x7fffffffdf18<br>(gdb) info registers<br>rax            0x40050a    4195594<br>rbx            0x0    0<br>rcx            0x0    0<br>rdx            0x7fffffffe008    140737488347144<br>rsi            0x7fffffffdff8    140737488347128<br>rdi            0x1    1<br>rbp            0x7fffffffdf10    0x7fffffffdf10<br>rsp            0x7fffffffdf10    0x7fffffffdf10<br>r8             0x7ffff7dd4e80    140737351863936<br>r9             0x7ffff7dea560    140737351951712<br>r10            0x7fffffffdda0    140737488346528<br>r11            0x7ffff7a36dd0    140737348070864<br>r12            0x400400    4195328<br>r13            0x7fffffffdff0    140737488347120<br>r14            0x0    0<br>r15            0x0    0<br>rip            0x40050e    0x40050e <main+4><br>eflags         0x246    [ PF ZF IF ]<br>cs             0x33    51<br>ss             0x2b    43<br>ds             0x0    0<br>es             0x0    0<br>fs             0x0    0<br>gs             0x0    0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">避免core发生：</div><div class="line">打到core语句地址</div><div class="line">jump跳过那条语句</div><div class="line">当然在别的例子中，可以修改相应的值。</div></pre></td></tr></table></figure></main+4></p>
<p>(gdb) b *0x00000000004004f9<br>Breakpoint 2 at 0x4004f9: file simple.c, line 5.<br>(gdb) c<br>Continuing.</p>
<p>Breakpoint 2, bar () at simple.c:5<br>5         <em>a=1;<br>(gdb) disas<br>Dump of assembler code for function bar:<br>   0x00000000004004ed &lt;+0&gt;:    push   %rbp<br>   0x00000000004004ee &lt;+1&gt;:    mov    %rsp,%rbp<br>   0x00000000004004f1 &lt;+4&gt;:    movq   $0x0,-0x8(%rbp)<br>=&gt; 0x00000000004004f9 &lt;+12&gt;:    mov    -0x8(%rbp),%rax<br>   0x00000000004004fd &lt;+16&gt;:    movl   $0x1,(%rax)<br>   0x0000000000400503 &lt;+22&gt;:    mov    $0x0,%eax<br>   0x0000000000400508 &lt;+27&gt;:    pop    %rbp<br>   0x0000000000400509 &lt;+28&gt;:    retq<br>End of assembler dump.<br>(gdb) info frame<br>Stack level 0, frame at 0x7fffffffdf10:<br> rip = 0x4004f9 in bar (simple.c:5); saved rip = 0x400518<br> called by frame at 0x7fffffffdf20<br> source language c.<br> Arglist at 0x7fffffffdf00, args:<br> Locals at 0x7fffffffdf00, Previous frame’s sp is 0x7fffffffdf10<br> Saved registers:<br>  rbp at 0x7fffffffdf00, rip at 0x7fffffffdf08<br>(gdb)<br>(gdb) jump </em>0x0000000000400503<br>Continuing at 0x400503.<br>[Inferior 1 (process 18720) exited normally]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">调试堆栈</div><div class="line">----------</div><div class="line"></div><div class="line">### 堆栈溢出实例</div></pre></td></tr></table></figure></p>
<p>void foo()<br>{</p>
<pre><code>int buf[1]={0};
buf[0]=1;
buf[1]=2;
buf[2]=3;
buf[3]=4;
buf[4]=5;
buf[5]=6;
buf[6]=7;      --申请了1个地址，但是写入很多个 buffer overflow

return;
</code></pre><p>}<br>int main()<br>{<br>    foo();<br>    return 0;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">[yshen@server-yanfa1-zqgao1 stack]$ ./main2</div><div class="line">Segmentation fault (core dumped)              ---栈溢出产生的coredump</div></pre></td></tr></table></figure></p>
<h3 id="堆栈溢出检测"><a href="#堆栈溢出检测" class="headerlink" title="堆栈溢出检测"></a>堆栈溢出检测</h3><p><img src="http://static.zybuluo.com/shenyuflying/1x8ua7rn101n5jxciw6j4yst/image_1b07km0hd1nfo12291gje2pg90um.png" alt="image_1b07km0hd1nfo12291gje2pg90um.png-29.1kB"><br>在栈底加个MAGICNUMBER，如果这个值被改了，那么说明是栈被破坏了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">#include&lt;stdlib.h&gt;</div><div class="line">#define MAGIC 1989</div><div class="line">#define F_INTER int __a=MAGIC;</div><div class="line">#define F_EXIT  \</div><div class="line">        if(__a!=MAGIC) \</div><div class="line">            printf(&quot;stack error in %s, magic=%d\n&quot;,__func__,__a);</div><div class="line">void foo()</div><div class="line">&#123;</div><div class="line">    F_INTER</div><div class="line">    int buf[1]=&#123;0&#125;;</div><div class="line">    buf[0]=1;</div><div class="line">    buf[1]=2;</div><div class="line">    buf[2]=3;</div><div class="line">    buf[3]=4;</div><div class="line">    buf[4]=5;</div><div class="line">    buf[5]=6;</div><div class="line">    buf[6]=7;</div><div class="line">    F_EXIT</div><div class="line">    return;</div><div class="line">&#125;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    foo();</div><div class="line">    return 0;</div><div class="line">&#125;   </div><div class="line">~     </div><div class="line">Dump of assembler code for function foo:</div><div class="line">0x00000000004004d8 &lt;foo+0&gt;:	push   %rbp</div><div class="line">0x00000000004004d9 &lt;foo+1&gt;:	mov    %rsp,%rbp</div><div class="line">0x00000000004004dc &lt;foo+4&gt;:	sub    $0x10,%rsp           --栈分配空间</div><div class="line">0x00000000004004e0 &lt;foo+8&gt;:	movl   $0x7c5,-0x4(%rbp)     --magicnumber在-0x4(%rbp)</div><div class="line">0x00000000004004e7 &lt;foo+15&gt;:	movl   $0x0,-0x10(%rbp)</div><div class="line">0x00000000004004ee &lt;foo+22&gt;:	movl   $0x1,-0x10(%rbp)</div><div class="line">0x00000000004004f5 &lt;foo+29&gt;:	movl   $0x2,-0xc(%rbp)</div><div class="line">0x00000000004004fc &lt;foo+36&gt;:	movl   $0x3,-0x8(%rbp)</div><div class="line">0x0000000000400503 &lt;foo+43&gt;:	movl   $0x4,-0x4(%rbp)      --magicnumber被冲了</div><div class="line">0x000000000040050a &lt;foo+50&gt;:	movl   $0x5,0x0(%rbp)       --rbp被冲了</div><div class="line">0x0000000000400511 &lt;foo+57&gt;:	movl   $0x6,0x4(%rbp)       --rip也被冲了</div><div class="line">0x0000000000400518 &lt;foo+64&gt;:	movl   $0x7,0x8(%rbp)</div><div class="line">0x000000000040051f &lt;foo+71&gt;:	cmpl   $0x7c5,-0x4(%rbp)</div><div class="line">0x0000000000400526 &lt;foo+78&gt;:	je     0x40053f &lt;foo+103&gt;</div><div class="line">0x0000000000400528 &lt;foo+80&gt;:	mov    -0x4(%rbp),%edx</div><div class="line">0x000000000040052b &lt;foo+83&gt;:	mov    $0x400658,%esi</div><div class="line">0x0000000000400530 &lt;foo+88&gt;:	mov    $0x40065c,%edi</div><div class="line">0x0000000000400535 &lt;foo+93&gt;:	mov    $0x0,%eax</div><div class="line">0x000000000040053a &lt;foo+98&gt;:	callq  0x4003d0 &lt;printf@plt&gt;</div><div class="line">0x000000000040053f &lt;foo+103&gt;:	leaveq </div><div class="line">0x0000000000400540 &lt;foo+104&gt;:	retq   </div><div class="line">End of assembler dump. </div><div class="line"></div><div class="line">[yshen@server-yanfa1-zqgao1 stack]$ ./main2</div><div class="line">stack error in foo, magic=4</div><div class="line">Segmentation fault (core dumped)</div></pre></td></tr></table></figure></p>
<h3 id="在程序中打印堆栈"><a href="#在程序中打印堆栈" class="headerlink" title="在程序中打印堆栈"></a>在程序中打印堆栈</h3><p>知识点：<br>1）用rbp来遍历堆栈。<br>2）用dladdr获取符号信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * backtrace implimentation</div><div class="line"> * gcc -rdynamic -g -O0 -o bt  stacktrace.c -ldl</div><div class="line"> *</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line">#include&lt;stdio.h&gt;</div><div class="line">#include&lt;stdlib.h&gt;</div><div class="line">#include&lt;assert.h&gt;</div><div class="line">#include&lt;execinfo.h&gt;</div><div class="line">#include&lt;dlfcn.h&gt;</div><div class="line">#include&lt;errno.h&gt;</div><div class="line"></div><div class="line">#define CMD_BUFFER_SIZE  1024</div><div class="line">#define SYMBOL_SIZE      512</div><div class="line">#define ADDRESS_SIZE     20</div><div class="line">#define STACK_DEPTH_MAX  100</div><div class="line">#define bool			 int</div><div class="line">#define true			 1</div><div class="line">#define false			 0</div><div class="line"></div><div class="line">/*</div><div class="line"> * Assembly code, gets the values of the frame pointer.</div><div class="line"> * It only works for x86 processors.</div><div class="line"> */</div><div class="line">#if defined(__i386)</div><div class="line">#define ASMFP asm volatile (&quot;movl %%ebp, %0&quot; : &quot;=g&quot; (ulp));</div><div class="line">#define GET_PTR_FROM_VALUE(value) ((uint32)value)</div><div class="line">#define GET_FRAME_POINTER(x) do &#123; uint64 ulp; ASMFP; x = ulp; &#125; while (0)</div><div class="line">#elif defined(__x86_64__)</div><div class="line">#define ASMFP asm volatile (&quot;movq %%rbp, %0&quot; : &quot;=g&quot; (ulp));</div><div class="line">#define GET_PTR_FROM_VALUE(value) (value)</div><div class="line">#define GET_FRAME_POINTER(x) do &#123; uint64 ulp; ASMFP; x = ulp; &#125; while (0)</div><div class="line">#else</div><div class="line">#define ASMFP</div><div class="line">#define GET_PTR_FROM_VALUE(value) (value)</div><div class="line">#define GET_FRAME_POINTER(x)</div><div class="line">#endif</div><div class="line"></div><div class="line"></div><div class="line">typedef unsigned long long int uint64;</div><div class="line">typedef unsigned int uint32;</div><div class="line">typedef unsigned int * uintptr_t;</div><div class="line"></div><div class="line">volatile char	   *stack_base_ptr = NULL;</div><div class="line"></div><div class="line"></div><div class="line">typedef struct &#123;</div><div class="line">        const char *dli_fname;  /* Pathname of shared object that</div><div class="line">                                   contains address */</div><div class="line">        void       *dli_fbase;  /* Address at which shared object</div><div class="line">                                   is loaded */</div><div class="line">        const char *dli_sname;  /* Name of nearest symbol with address</div><div class="line">                                   lower than addr */</div><div class="line">        void       *dli_saddr;  /* Exact address of symbol named</div><div class="line">                                   in dli_sname */</div><div class="line"> &#125; Dl_info;</div><div class="line"></div><div class="line">uint32 back_trace(void **stackAddresses, uint32 maxStackDepth)</div><div class="line">&#123;</div><div class="line">	assert(stack_base_ptr != NULL);</div><div class="line">	uint64  framePtrValue = 0;</div><div class="line">	GET_FRAME_POINTER(framePtrValue);</div><div class="line"></div><div class="line">	uint32  depth = 0;</div><div class="line">	void **pFramePtr = (void**) GET_PTR_FROM_VALUE(framePtrValue);</div><div class="line">	/* check if the frame pointer is valid */</div><div class="line">	if (pFramePtr != NULL &amp;&amp; (void *) &amp;depth &lt; (void *) pFramePtr)</div><div class="line">	&#123;</div><div class="line">		/* consider the first maxStackDepth frames only, below the stack base pointer */</div><div class="line">		for (depth = 0; depth &lt; maxStackDepth; depth++)</div><div class="line">		&#123;</div><div class="line">			/* check if next frame is within stack */</div><div class="line">			if (pFramePtr == NULL ||</div><div class="line">				(void *) pFramePtr &gt; *pFramePtr ||</div><div class="line">				(void *) stack_base_ptr &lt; *pFramePtr)</div><div class="line">			&#123;</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			/* get return address (one above the frame pointer) */</div><div class="line">			const uintptr_t *returnAddr = (uintptr_t *)(pFramePtr + 1);</div><div class="line"></div><div class="line">			/* store return address */</div><div class="line">			stackAddresses[depth] = (void *) *returnAddr;</div><div class="line"></div><div class="line">			/* move to next frame */</div><div class="line">			pFramePtr = (void**)*pFramePtr;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return depth;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">char **</div><div class="line">back_trace_symbols(void *const *buffer, int size)</div><div class="line">&#123;</div><div class="line">	char **result;</div><div class="line">	size_t bufsize;</div><div class="line">	int i;</div><div class="line"></div><div class="line">	bufsize = size * sizeof(char *);</div><div class="line"></div><div class="line">	/* Calculate exact size */</div><div class="line">	for (i=0; i &lt; size; i++)</div><div class="line">	&#123;</div><div class="line">		Dl_info dli;</div><div class="line"></div><div class="line">		if (dladdr(buffer[i], &amp;dli) == 0)</div><div class="line">		&#123;</div><div class="line">			bufsize += snprintf(NULL, 0, &quot;%p: &lt;not found&gt;&quot;, buffer[i]) + 1;</div><div class="line">		&#125;</div><div class="line">		else</div><div class="line">		&#123;</div><div class="line">			bufsize += snprintf(NULL, 0, &quot;%p: %s %s+0x%x&quot;, buffer[i],</div><div class="line">						dli.dli_fname, dli.dli_sname,</div><div class="line">						(int)((char *)(buffer[i]) - (char *)(dli.dli_saddr))) + 1;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	result = malloc(bufsize);</div><div class="line"></div><div class="line">	if(!result)</div><div class="line">	&#123;</div><div class="line">		printf(&quot;Failed to get backtrace symbol: out of memory!&quot;);</div><div class="line">		exit(1);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	&#123;</div><div class="line">		int n;</div><div class="line">		char *cur = (char *)(result + size);</div><div class="line"></div><div class="line">		memset(result, 0, bufsize);</div><div class="line"></div><div class="line">		for (i=0; i &lt; size; i++)</div><div class="line">		&#123;</div><div class="line">			Dl_info dli;</div><div class="line"></div><div class="line">			if (dladdr(buffer[i], &amp;dli) == 0)</div><div class="line">			&#123;</div><div class="line">				n = sprintf(cur, &quot;%p: &lt;not found&gt;&quot;, buffer[i]);</div><div class="line">			&#125;</div><div class="line">			else</div><div class="line">			&#123;</div><div class="line">				n = sprintf(cur, &quot;%p: %s %s+0x%x&quot;, buffer[i],</div><div class="line">							dli.dli_fname, dli.dli_sname,</div><div class="line">							(int)((char *)(buffer[i]) - (char *)(dli.dli_saddr)));</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			result[i] = cur;</div><div class="line">			cur += n + 1;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void bt(void)</div><div class="line">&#123;</div><div class="line">	int 		stacktracesize;</div><div class="line">	void	   *stacktracearray[STACK_DEPTH_MAX];</div><div class="line">	char	   **result = NULL;</div><div class="line">	int i = 0;</div><div class="line">	stacktracesize = back_trace(stacktracearray, STACK_DEPTH_MAX);</div><div class="line">	result = back_trace_symbols(stacktracearray, STACK_DEPTH_MAX);</div><div class="line">	for (i = 0; result[i] != NULL &amp;&amp; i &lt; stacktracesize; i++)</div><div class="line">	&#123;</div><div class="line">		printf(&quot;#%d : %s\n&quot;,i,result[i]);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	return;</div><div class="line">&#125;</div><div class="line">int function1(void)</div><div class="line">&#123;</div><div class="line">	bt();</div><div class="line">	return 0;</div><div class="line">&#125;</div><div class="line">int function2(void)</div><div class="line">&#123;</div><div class="line">	function1();</div><div class="line">	return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	volatile char stack_base;</div><div class="line">    stack_base_ptr = &amp;stack_base;</div><div class="line">	</div><div class="line">	function2();</div><div class="line"></div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>yshen@yshen-office:~/test/ass$ ./bt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#0 : 0x400e8f: ./bt bt+0x34</div><div class="line">#1 : 0x400f33: ./bt function1+0x9</div><div class="line">#2 : 0x400f43: ./bt function2+0x9</div></pre></td></tr></table></figure></p>
<p>和gdb对比<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(gdb) bt</div><div class="line">#1  0x0000000000400e8f in bt () at stacktrace.c:164</div><div class="line">#2  0x0000000000400f33 in function1 () at stacktrace.c:177</div><div class="line">#3  0x0000000000400f43 in function2 () at stacktrace.c:182</div><div class="line">#4  0x0000000000400f62 in main () at stacktrace.c:191</div></pre></td></tr></table></figure></p>
<p><img src="http://static.zybuluo.com/shenyuflying/xlz76t446buibnvdmcq9doiv/image_1b07ksg28gu9k3i1jt116ds1tik9.png" alt="image_1b07ksg28gu9k3i1jt116ds1tik9.png-32.3kB"><br>私有：<br>寄存器<br>栈</p>
<p>共享：<br>库<br>堆</p>
<p>关系：<br>平等关系，没有先后顺序，后起线程可以杀掉先起的线程</p>
<h3 id="多线程举例"><a href="#多线程举例" class="headerlink" title="多线程举例"></a>多线程举例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">#define N 2</div><div class="line">char **ptr; /* global variable */      --shared among threads</div><div class="line">void *thread(void *vargp);</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">  int i;</div><div class="line">  pthread_t tid;</div><div class="line">  char *msgs[N] = &#123;</div><div class="line">  &quot;Hello from foo&quot;,</div><div class="line">  &quot;Hello from bar&quot;</div><div class="line">                  &#125;;</div><div class="line"></div><div class="line">  ptr = msgs;                       --ptr bind to local variable , so msgs can be shared</div><div class="line">  for (i = 0; i &lt; N; i++)</div><div class="line">  Pthread_create(&amp;tid, NULL, thread, (void *)i);</div><div class="line">  Pthread_exit(NULL);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void *thread(void *vargp)</div><div class="line">&#123;</div><div class="line">  int myid = (int)vargp;      --each thread has its own myid</div><div class="line">  static int cnt = 0;         --cnt shared among threads</div><div class="line">  printf(&quot;[%d]: %s (cnt=%d)\n&quot;, myid, ptr[myid], ++cnt);  --without lock for cnt</div><div class="line">&#125;</div><div class="line"></div><div class="line">~$ ./sharing</div><div class="line">[0]: Hello from foo (cnt=1)</div><div class="line">[1]: Hello from bar (cnt=1)</div><div class="line"></div><div class="line">~$ ./sharing</div><div class="line">[0]: Hello from foo (cnt=1)</div><div class="line">[1]: Hello from bar (cnt=2)</div><div class="line"></div><div class="line">  7 thread:</div><div class="line">  8     pushq   %rbp</div><div class="line">  9     movq    %rsp, %rbp</div><div class="line"> 10     movq    %rdi, -24(%rbp)</div><div class="line"> 11     movq    -24(%rbp), %rax</div><div class="line"> 12     movl    %eax, -4(%rbp)</div><div class="line"> 13     movl    cnt.1629(%rip), %eax      --step1 load  cnt</div><div class="line"> 14     addl    $1, %eax                  --step2 add   cnt</div><div class="line"> 15     movl    %eax, cnt.1629(%rip)      --step3 save  cnt</div><div class="line"> 16     leave   </div><div class="line"> 17     ret</div></pre></td></tr></table></figure>
<h3 id="线程竞争"><a href="#线程竞争" class="headerlink" title="线程竞争"></a>线程竞争</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> 1 #include&lt;stdio.h&gt;</div><div class="line"> 2 #include&lt;stdlib.h&gt;</div><div class="line"> 3 #include&lt;pthread.h&gt;</div><div class="line"> 4 #define N 4</div><div class="line"> 5 void *thread(void *vargp);</div><div class="line"> 6 int main()</div><div class="line"> 7 &#123;</div><div class="line"> 8     pthread_t tid[N];</div><div class="line"> 9     int i;</div><div class="line">10     for (i = 0; i &lt; N; i++)</div><div class="line">11         pthread_create(&amp;tid[i], NULL, thread, &amp;i);</div><div class="line">12     for (i = 0; i &lt; N; i++)</div><div class="line">13         pthread_join(tid[i], NULL);</div><div class="line">14     exit(0);</div><div class="line">15 &#125;   </div><div class="line">16 /* thread routine */</div><div class="line">17 void *thread(void *vargp)</div><div class="line">18 &#123;</div><div class="line">19     int myid = *((int *)vargp);</div><div class="line">20     printf(&quot;Hello from thread %d\n&quot;, myid);</div><div class="line">21     return NULL;</div><div class="line">22 &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[yshen@server-yanfa1-zqgao1 disas]$ gcc thread_race.c -O3 -lpthread -o thread_race</div><div class="line">[yshen@server-yanfa1-zqgao1 disas]$ ./thread_race </div><div class="line">Hello from thread 0</div><div class="line">Hello from thread 0</div><div class="line">Hello from thread 0</div><div class="line">Hello from thread 0</div><div class="line">[yshen@server-yanfa1-zqgao1 disas]$ ./thread_race </div><div class="line">Hello from thread 0</div><div class="line">Hello from thread 0</div><div class="line">Hello from thread 0</div><div class="line">Hello from thread 0</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">(gdb) disas main</div><div class="line">Dump of assembler code for function main:</div><div class="line">0x0000000000400600 &lt;main+0&gt;:	push   %rbp</div><div class="line">0x0000000000400601 &lt;main+1&gt;:	xor    %eax,%eax                eax=0</div><div class="line">0x0000000000400603 &lt;main+3&gt;:	push   %rbx</div><div class="line">0x0000000000400604 &lt;main+4&gt;:	sub    $0x38,%rsp</div><div class="line">0x0000000000400608 &lt;main+8&gt;:	lea    0x2c(%rsp),%rbp          rbp=&amp;i</div><div class="line">0x000000000040060d &lt;main+13&gt;:	movl   $0x0,0x2c(%rsp)          i=0</div><div class="line">0x0000000000400615 &lt;main+21&gt;:	mov    %rsp,%rbx</div><div class="line">0x0000000000400618 &lt;main+24&gt;:	movslq %eax,%rdi                </div><div class="line">0x000000000040061b &lt;main+27&gt;:	xor    %esi,%esi                2nd arg NULL</div><div class="line">0x000000000040061d &lt;main+29&gt;:	mov    %rbp,%rcx                4th arg &amp;i</div><div class="line">0x0000000000400620 &lt;main+32&gt;:	lea    (%rbx,%rdi,8),%rdi       1st arg &amp;tid[i]</div><div class="line">0x0000000000400624 &lt;main+36&gt;:	mov    $0x4005e0,%edx           3rd arg thread</div><div class="line">0x0000000000400629 &lt;main+41&gt;:	callq  0x4004e0 &lt;pthread_create@plt&gt;</div><div class="line">0x000000000040062e &lt;main+46&gt;:	mov    0x2c(%rsp),%eax</div><div class="line">0x0000000000400632 &lt;main+50&gt;:	add    $0x1,%eax</div><div class="line">0x0000000000400635 &lt;main+53&gt;:	cmp    $0x3,%eax</div><div class="line">0x0000000000400638 &lt;main+56&gt;:	mov    %eax,0x2c(%rsp)</div><div class="line">0x000000000040063c &lt;main+60&gt;:	jle    0x400618 &lt;main+24&gt;</div><div class="line">0x000000000040063e &lt;main+62&gt;:	movl   $0x0,0x2c(%rsp)</div><div class="line">0x0000000000400646 &lt;main+70&gt;:	xor    %eax,%eax</div><div class="line">0x0000000000400648 &lt;main+72&gt;:	cltq   </div><div class="line">0x000000000040064a &lt;main+74&gt;:	xor    %esi,%esi</div><div class="line">0x000000000040064c &lt;main+76&gt;:	mov    (%rsp,%rax,8),%rdi</div><div class="line">0x0000000000400650 &lt;main+80&gt;:	callq  0x4004f0 &lt;pthread_join@plt&gt;</div><div class="line">0x0000000000400655 &lt;main+85&gt;:	mov    0x2c(%rsp),%eax</div><div class="line">0x0000000000400659 &lt;main+89&gt;:	add    $0x1,%eax</div><div class="line">0x000000000040065c &lt;main+92&gt;:	cmp    $0x3,%eax</div><div class="line">0x000000000040065f &lt;main+95&gt;:	mov    %eax,0x2c(%rsp)</div><div class="line">0x0000000000400663 &lt;main+99&gt;:	jle    0x400648 &lt;main+72&gt;</div><div class="line">0x0000000000400665 &lt;main+101&gt;:	xor    %edi,%edi</div><div class="line">0x0000000000400667 &lt;main+103&gt;:	callq  0x4004c0 &lt;exit@plt&gt;</div><div class="line">End of assembler dump.</div><div class="line">(gdb) disas thread</div><div class="line">Dump of assembler code for function thread:</div><div class="line">0x00000000004005e0 &lt;thread+0&gt;:	sub    $0x8,%rsp</div><div class="line">0x00000000004005e4 &lt;thread+4&gt;:	mov    (%rdi),%esi               2nd arg  i stored in (%rdi)</div><div class="line">0x00000000004005e6 &lt;thread+6&gt;:	xor    %eax,%eax                 eax=0</div><div class="line">0x00000000004005e8 &lt;thread+8&gt;:	mov    $0x400768,%edi            1st arg</div><div class="line">0x00000000004005ed &lt;thread+13&gt;:	callq  0x4004b0 &lt;printf@plt&gt;</div><div class="line">0x00000000004005f2 &lt;thread+18&gt;:	xor    %eax,%eax</div><div class="line">0x00000000004005f4 &lt;thread+20&gt;:	add    $0x8,%rsp</div><div class="line">0x00000000004005f8 &lt;thread+24&gt;:	retq   </div><div class="line">End of assembler dump.</div><div class="line">(gdb)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原因：</div><div class="line">1）把i的地址传给了其他函数，i在栈上多个寄存器中保存，i自增是在寄存器内完成的，自增后%rbp没及时更新。</div><div class="line">2）新启动的多个线程访问内存中同一个地址，存在竞争关系，取值可以在以下指令中任意一个执行。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0x0000000000400629 &lt;main+41&gt;:	callq  0x4004e0 &lt;pthread_create@plt&gt;   --另一个线程启动</div><div class="line">0x000000000040062e &lt;main+46&gt;:	mov    0x2c(%rsp),%eax    --取内存中i的值</div><div class="line">0x0000000000400632 &lt;main+50&gt;:	add    $0x1,%eax          --递增</div><div class="line">0x0000000000400635 &lt;main+53&gt;:	cmp    $0x3,%eax          --判断</div><div class="line">0x0000000000400638 &lt;main+56&gt;:	mov    %eax,0x2c(%rsp)    --把i的值放到内存中</div></pre></td></tr></table></figure>
<p>解决方案：传堆上的值，每次用个不同的地址保存。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> 1 #include&lt;stdio.h&gt;</div><div class="line"> 2 #include&lt;stdlib.h&gt;</div><div class="line"> 3 #include&lt;pthread.h&gt;</div><div class="line"> 4 #define N 4</div><div class="line"> 5 void *thread(void *vargp);</div><div class="line"> 6 int main()</div><div class="line"> 7 &#123;</div><div class="line"> 8     pthread_t tid[N];</div><div class="line"> 9     int i;</div><div class="line">10     for (i = 0; i &lt; N; i++)</div><div class="line">11     &#123;</div><div class="line">12          int *pi=malloc(sizeof(int));</div><div class="line">13          *pi=i;</div><div class="line">14          pthread_create(&amp;tid[i], NULL, thread, pi);</div><div class="line">15 </div><div class="line">16     &#125;</div><div class="line">17     for (i = 0; i &lt; N; i++)</div><div class="line">18         pthread_join(tid[i], NULL);</div><div class="line">19     exit(0);</div><div class="line">20 &#125;</div><div class="line">21 /* thread routine */</div><div class="line">22 void *thread(void *vargp)</div><div class="line">23 &#123;</div><div class="line">24     int myid = *((int *)vargp);</div><div class="line">25     free(vargp);</div><div class="line">26     printf(&quot;Hello from thread %d\n&quot;, myid);</div><div class="line">27     return NULL;</div><div class="line">28 &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">yshen@yshen-office:~/test/ass$ gcc race.c -O3 -lpthread -o race</div><div class="line">yshen@yshen-office:~/test/ass$ ./race </div><div class="line">Hello from thread 0</div><div class="line">Hello from thread 1</div><div class="line">Hello from thread 2</div><div class="line">Hello from thread 3</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[golang web编程之——读取csdn最新文章]]></title>
      <url>http://shenyu.wiki/2016/10/29/golang-web%E7%BC%96%E7%A8%8B%E4%B9%8B%E2%80%94%E2%80%94%E8%AF%BB%E5%8F%96csdn%E6%9C%80%E6%96%B0%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>利用go语言内置的各种网络包可以方便的进行web编程。本文章利用了csdn的<a href="http://open.csdn.net/wiki/apis" target="_blank" rel="external">开放API</a>实现读取最新文章的需求。演示了go语言发起http get请求和json的umarshing特性。</p>
</blockquote>
<h2 id="简单的http-GET请求"><a href="#简单的http-GET请求" class="headerlink" title="简单的http GET请求"></a>简单的http GET请求</h2><p>go语言内置了<code>net/http</code>包，采用<code>http.Get</code>能够方便的发起GET请求</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">	resp, err := http.Get(<span class="string">"http://api.csdn.net/blog/getnewarticlelist?client_id=????&amp;page=1&amp;size=10"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line">	contents, err := ioutil.ReadAll(resp.Body)</div><div class="line">	resp.Body.Close()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"%s"</span>, contents)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到返回的内容为json格式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;page&quot;:1,&quot;count&quot;:12733,&quot;size&quot;:10,&quot;list&quot;:[&#123;&quot;ArticleId&quot;:52963517,&quot;BlogId&quot;:5022393,&quot;UserName&quot;:&quot;u013410747&quot;,&quot;Title&quot;:&quot;linux修改默认的编辑器&quot;,&quot;Description&quot;:&quot;sudo select-editor    选择vim 搞定。。&quot;,&quot;PostTime&quot;:&quot;\/Date(1477712141000)\/&quot;,&quot;UpdateTime&quot;:&quot;\/Date(1477712177908)\/&quot;,&quot;Digg&quot;:0,&quot;Bury&quot;:0,&quot;ChannelId&quot;:2,&quot;Type&quot;:1,&quot;Status&quot;:0,&quot;ViewCount&quot;:0,&quot;CommentCount&quot;:0,&quot;CommentAuth&quot;:2,&quot;IsTop&quot;:false,&quot;Level&quot;:0,&quot;OutlinkCount&quot;:0,&quot;Note&quot;:null,&quot;IP&quot;:null,&quot;Categories&quot;:null,&quot;Tags&quot;:[],&quot;ColumnAlias&quot;:null,&quot;ColumnTitle&quot;:null,&quot;MarkDownContent&quot;:null,&quot;MarkDownDirectory&quot;:null,&quot;ArticleEditType&quot;:0,&quot;ArticleMore&quot;:null&#125;,...umnAlias&quot;:null,&quot;ColumnTitle&quot;:null,&quot;MarkDownContent&quot;:null,&quot;MarkDownDirectory&quot;:null,&quot;ArticleEditType&quot;:0,&quot;ArticleMore&quot;:null&#125;]&#125;成功: 进程退出代码 0.</div></pre></td></tr></table></figure>
<h2 id="JSON转为内部结构体"><a href="#JSON转为内部结构体" class="headerlink" title="JSON转为内部结构体"></a>JSON转为内部结构体</h2><p>那么如何把json格式的内容转为golang的内部结构体呢？这需要利用<code>json.Unmarshal</code></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Article <span class="keyword">struct</span> &#123;</div><div class="line">	ArticleId   <span class="keyword">int</span></div><div class="line">	BlogId      <span class="keyword">int</span></div><div class="line">	UserName    <span class="keyword">string</span></div><div class="line">	Title       <span class="keyword">string</span></div><div class="line">	Description <span class="keyword">string</span></div><div class="line">	PostTime    <span class="keyword">string</span></div><div class="line">	UpdateTime  <span class="keyword">string</span></div><div class="line">	ViewCount    <span class="keyword">int</span></div><div class="line">	CommentCount <span class="keyword">int</span></div><div class="line">	Categories  <span class="keyword">int</span></div><div class="line">	ColumnAlias <span class="keyword">bool</span></div><div class="line">	Url         <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> Articles <span class="keyword">struct</span> &#123;</div><div class="line">	Page  <span class="keyword">int</span> <span class="string">`json:"page,int"`</span></div><div class="line">	Count <span class="keyword">int</span></div><div class="line">	Size  <span class="keyword">int</span></div><div class="line">	List  []*Article</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	resp, err := http.Get(<span class="string">"http://api.csdn.net/blog/getnewarticlelist?client_id=????&amp;page=0&amp;size=20"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line">	str, err := ioutil.ReadAll(resp.Body)</div><div class="line">	resp.Body.Close()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> contents Articles</div><div class="line">	<span class="keyword">if</span> err := json.Unmarshal(str, &amp;contents); err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(<span class="string">"Json unmarshing failed: "</span>, err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> contents.List &#123;</div><div class="line">		fmt.Printf(<span class="string">"%v. %v\n"</span>, k, v.Title)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，我们完成了用csdn的<a href="http://open.csdn.net/wiki/apis" target="_blank" rel="external">开放API</a>实现读取最新文章的需求。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">0. 1048. Find Coins (25)解题报告</div><div class="line">1. 1049. Counting Ones (30)解题报告</div><div class="line">2. java实习第二天</div><div class="line">3. 1060. 爱丁顿数(25)</div><div class="line">4. 剑指offer-数组中出现次数超过一半的数字</div><div class="line">5. jsonp跨域访问案例</div><div class="line">6. framework jar包MAKEFILE示例</div><div class="line">7. Unity3d 乱序之惑</div><div class="line">8. CodeForces 445C DZY Loves Physics</div><div class="line">9. LeetCode #424: Longest Repeating Character Replacement</div><div class="line">10. 面板显示private变量用标签[SerializeField]</div><div class="line">11. PostgreSQL问题解决--连接数过多</div><div class="line">12. 多维高斯分布及多维条件高斯分布</div><div class="line">13. 王朝  都要学C</div><div class="line">14. CharacterController.Move 实现角色移动</div><div class="line">15. bootargs</div><div class="line">16. 不用输入法输自己的名字!!!!</div><div class="line">17. mybatis mbg自动生成的selectByExample按条件查询不出来值。</div><div class="line">18. 系统乔迁留念贴</div><div class="line">19. java中Proxy(代理与动态代理)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL中的字符编码]]></title>
      <url>http://shenyu.wiki/2016/10/27/PostgreSQL%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>字符编码（Character encoding）就是把某种或多种字符（比如英语字母，中文）按照某种形式编码为比特，以便于在计算机中存储和通过网络进行传递。常见的字符编码有ASCII、UTF-8、GBK等等。</p>
<p>PostgreSQL支持多种编码字符集，对各种语言有很好的支持。每个数据库有一个字符集，字符集在初始化数据库<code>initdb -E UTF-8</code>或新建数据库<code>CREATE DATABASE chinese WITH ENCODING &#39;UTF-8&#39;</code>时确定。编码信息保存在系统表<code>pg_database</code>中。你可以在psql中用-l命令来查看数据库和对应的字符集编码。</p>
<p>服务器端不是对所有编码都支持，比如不支持GBK，但是PostgreSQL支持服务器发给客户端时自动转码，比如可以转码为GBK。转码规则在系统表<code>pg_conversion</code>里确定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">postgres=# select  conname, conproc from pg_conversion where conname like &apos;%gbk%&apos;;</div><div class="line">   conname   |   conproc   </div><div class="line">-------------+-------------</div><div class="line"> gbk_to_utf8 | gbk_to_utf8</div><div class="line"> utf8_to_gbk | utf8_to_gbk</div><div class="line">(2 rows)</div></pre></td></tr></table></figure></p>
<p>比如如下例子，服务器的默认编码是UTF8<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">postgres=# \l</div><div class="line">                               List of databases</div><div class="line">    Name    | Owner | Encoding |   Collate   |    Ctype    | Access privileges </div><div class="line">------------+-------+----------+-------------+-------------+-------------------</div><div class="line"> postgres   | yshen | UTF8     | zh_CN.UTF-8 | zh_CN.UTF-8 |</div></pre></td></tr></table></figure></p>
<p>客户端的通过<code>set client_encoding = GBK;</code>设为GBK<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">postgres=# set client_encoding = GBK;</div><div class="line">SET</div><div class="line">postgres=# show client_encoding ;</div><div class="line"> client_encoding </div><div class="line">-----------------</div><div class="line"> GBK</div><div class="line">(1 row)</div></pre></td></tr></table></figure></p>
<p>在查询过程中，服务器把UTF8编码转换为GBK发送到客户端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">postgres=# select * from student;</div><div class="line">   sno   | sname  | gender | age | nation | classno </div><div class="line">---------+--------+--------+-----+--------+---------</div><div class="line"> 2016001 | 王二小 | 男     |  20 | 中国   | 1-1</div><div class="line"> 2016002 | 刘胡兰 | 女     |  20 | 中国   | 1-1</div><div class="line"> 2016003 | 李小明 | 男     |  20 | 中国   | 1-2</div><div class="line"> 2016004 | 李小花 | 女     |  20 | 中国   | 1-2</div><div class="line">(4 rows)</div></pre></td></tr></table></figure></p>
<p>那么编码是如何在内部实现的呢？窥探一下内部函数<code>utf8_to_gbk</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Datum</div><div class="line">utf8_to_gbk(PG_FUNCTION_ARGS)</div><div class="line">&#123;</div><div class="line">	unsigned char *src = (unsigned char *) PG_GETARG_CSTRING(2);</div><div class="line">	unsigned char *dest = (unsigned char *) PG_GETARG_CSTRING(3);</div><div class="line">	int			len = PG_GETARG_INT32(4);</div><div class="line"></div><div class="line">	CHECK_ENCODING_CONVERSION_ARGS(PG_UTF8, PG_GBK);</div><div class="line"></div><div class="line">	UtfToLocal(src, len, dest,</div><div class="line">			   ULmapGBK, lengthof(ULmapGBK),</div><div class="line">			   NULL, 0,</div><div class="line">			   NULL,</div><div class="line">			   PG_GBK);</div><div class="line"></div><div class="line">	PG_RETURN_VOID();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其实就是根据输入的字节流寻找一种编码到另一种编码的映射关系，映射关系保存在ULmapGBK这个里面,找到映射关系之后再把另一种编码对应的字节输出。</p>
<p>有兴趣可以移步<a href="https://www.postgresql.org/docs/9.5/static/multibyte.html" target="_blank" rel="external">官方手册</a>进一步了解</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux中的本地化]]></title>
      <url>http://shenyu.wiki/2016/10/27/linux%E4%B8%AD%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%8C%96/</url>
      <content type="html"><![CDATA[<blockquote>
<p>linux中显示乱码了怎么办？这时候需要设置对本地化。知其然还要知其所以然，下面一步步来为你截开linux中的本地化的神秘面纱。</p>
</blockquote>
<h2 id="从locale说起"><a href="#从locale说起" class="headerlink" title="从locale说起"></a>从locale说起</h2><p>locale翻译过来是<code>本地</code>的意思。linux中的<code>locale</code>工具能够输出当前本地化信息，或者输出所有支持的本地化、编码信息。<br>在linux中执行<code>locale</code>命令可以显示出当前的本地化信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ locale</div><div class="line">LANG=zh_CN.UTF-8</div><div class="line">LANGUAGE=zh_CN:zh</div><div class="line">LC_CTYPE=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_NUMERIC=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_TIME=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_COLLATE=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_MONETARY=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_MESSAGES=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_PAPER=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_NAME=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_ADDRESS=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_TELEPHONE=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_MEASUREMENT=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_IDENTIFICATION=&quot;zh_CN.UTF-8&quot;</div><div class="line">LC_ALL=</div></pre></td></tr></table></figure></p>
<p>本地化信息包含了13个变量</p>
<ol>
<li>LC_CTYPE<br>用于字符分类和字符串处理（大小写转换），控制所有字符的处理方式，包括字符编码，字符是单字节还是多字节，如何打印等。是最重要的一个环境变量。</li>
<li>LC_COLLATE<br>字符的比较和排序规则。</li>
<li>LC_MONETARY<br>货币格式。</li>
<li>LC_NUMERIC<br>非货币的数字显示格式。</li>
<li>LC_TIME<br>时间和日期格式。</li>
<li>LC_MESSAGES<br>提示信息的语言。另外还有一个LANGUAGE参数，它与LC_MESSAGES相似，但如果该参数一旦设置，则LC_MESSAGES参数就会失效。LANGUAGE参数可同时设置多种语言信息，如LANGUANE=”zh_CN.GB18030:zh_CN.GB2312:zh_CN”。</li>
<li>LANG<br>LC<em>*的默认值，是最低级别的设置，如果LC</em>*没有设置，则使用该值。类似于 LC_ALL。如果LANG设置了，别的变量也设置成这个值。</li>
<li>LC<em>ALL<br>它是一个宏，如果该值设置了，则该值会覆盖所有LC</em>*的设置值。注意，LANG的值不受该宏影响。</li>
<li>LC_PAPER<br>纸张大小。</li>
<li>LC_NAME<br>名称的格式</li>
<li>LC_ADDRESS<br>地址的格式</li>
<li>LC_TELEPHONE<br>电话的格式</li>
<li>LC_MEASUREMENT<br>度量单位</li>
</ol>
<p>可以看各种变量的值都是<code>zh_CN.UTF-8</code>,它表示什么意思呢？<br>分为2个部分:<br><code>zh_CN</code> : 是语言.地点信息<br><code>UTF-8</code> : 是字符编码信息<br>其书写格式是<code>语言[_地域[.字符集]]</code><br>比如<code>zh_CN.UTF-8</code>说明现在用中文，地处中华人民共和国，用的是UTF-8字符编码。<br>比如<code>zh_TW.BIG5</code>说名现在用中文，地处台湾，用的是大五码字符集<br>可以通过<code>locale -a</code>命令查看支持的地点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ locale -a</div><div class="line">C           #最早期简单的C语言环境</div><div class="line">C.UTF-8</div><div class="line">en_US.utf8  #美国</div><div class="line">POSIX       #posix标准</div><div class="line">zh_CN.utf8  #中国</div><div class="line">zh_SG.utf8  #新加坡</div></pre></td></tr></table></figure></p>
<p>可以通过<code>locale -m</code>命令查看支持的编码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ locale -m | grep BIG</div><div class="line">BIG5</div><div class="line">BIG5-HKSCS</div><div class="line">UTF-8</div><div class="line">GB18030</div><div class="line">GB2312</div><div class="line">GBK</div><div class="line">GB_1988-80</div></pre></td></tr></table></figure></p>
<p>有关这些信息都放在<code>/usr/share/i18n</code>文件夹下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/usr/share/i18n</div><div class="line">|-- SUPPORTED</div><div class="line">|-- charmaps</div><div class="line">|   |-- ANSI_X3.110-1983.gz</div><div class="line">|   |-- ANSI_X3.4-1968.gz</div><div class="line">|   |-- ARMSCII-8.gz</div><div class="line">|   |-- ASMO_449.gz</div><div class="line">|   |-- BIG5-HKSCS.gz</div><div class="line">|   |-- BIG5.gz</div><div class="line">|   |-- UTF-8.gz</div><div class="line">|   |-- VIDEOTEX-SUPPL.gz</div><div class="line">|   |-- VISCII.gz</div><div class="line">|   `-- WINDOWS-31J.gz</div><div class="line">`-- locales</div><div class="line">    |-- POSIX</div><div class="line">    |-- aa_DJ</div><div class="line">    |-- aa_ER</div><div class="line">    |-- aa_ER@saaho</div><div class="line">    |-- aa_ET</div><div class="line">    |-- af_ZA</div><div class="line">    |-- zh_CN</div><div class="line">    |-- zh_HK</div><div class="line">    |-- zh_SG</div><div class="line">    |-- zh_TW</div><div class="line">    `-- zu_ZA</div></pre></td></tr></table></figure></p>
<p>locales文件夹下面其实都是可编辑的文本文件。有兴趣的可以打开试试。</p>
<p>有时候因为编码的不同，显示出来的是乱码。那么如何设置呢？</p>
<h2 id="如何设置编码"><a href="#如何设置编码" class="headerlink" title="如何设置编码"></a>如何设置编码</h2><p>设定locale就是设定12大类的locale分类属性，即13个<code>LC_*</code>。除了这13个变量可以设定以外，为了简便起见，还有两个变量：<code>LC_ALL</code>和<code>LANG</code>。它们之间有一个优先级的关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LC_ALL &gt; LANG</div></pre></td></tr></table></figure></p>
<p>可以这么说，LC_ALL是最上级设定或者强制设定，而LANG是默认设定值。</p>
<p>1、如果你设定了<code>LC_ALL＝zh_CN.UTF-8</code>，那么不管<code>LC_*</code>和<code>LANG</code>设定成什么值，它们都会被强制服从<code>LC_ALL</code>的设定，成为 <code>zh_CN.UTF-8</code>。</p>
<p>2、假如你设定了<code>LANG＝zh_CN.UTF-8</code>，并且没有设定<code>LC_ALL</code>的话，那么系统的locale设定以<code>LC_*=zh_CN.UTF-8</code>。</p>
<p>PS: 除了环境变量设置对，如果使用的是图形化终端，还需要在终端设置相应的编码。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[交互式代码格式化工具——indent]]></title>
      <url>http://shenyu.wiki/2016/10/21/%E4%BA%A4%E4%BA%92%E5%BC%8F%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94indent/</url>
      <content type="html"><![CDATA[<blockquote>
<p>有时候在编码过程中很多细节不注意，造成了代码不符合规范。如果人工来检查，比较繁琐，还容易遗漏，不如交给工具做。在之前一片文章<a href="http://shenyu.wiki/2016/10/20/%E5%88%A9%E7%94%A8sed%E7%94%9F%E6%88%90%E8%A7%84%E8%8C%83%E7%9A%84c%E4%BB%A3%E7%A0%81/">《利用sed生成规范的c代码 》</a>基础上集合shell+vimdiff实现了交互式代码检查。</p>
</blockquote>
<h2 id="先睹为快"><a href="#先睹为快" class="headerlink" title="先睹为快"></a>先睹为快</h2><p>一份不规范的代码test.c运行工具检查一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./indent test.c</div></pre></td></tr></table></figure></p>
<p>效果如下图所示：<br><img src="http://static.zybuluo.com/shenyuflying/qv3omp4cp2ycm123vqscxob5/image_1avj8a4sm1fvr2s1e9dgsjrgs9.png" alt=""></p>
<p>左面是例子中的那份不规范的代码，右面是提示的规范代码。不规范的代码用红色标出。如果接受修改，移动到红色处用do来接受修改。]c移动到下一处。</p>
<p>修改完了之后wqa退出。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>这个小工具是用shell+sed+vimdiff写的。可以看到linux的强大之处就是可以融合多个工具来实现一个更强大的工具。<br>源码放在了github上：<a href="https://github.com/shenyuflying/indent" target="_blank" rel="external">https://github.com/shenyuflying/indent</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用sed生成规范的c代码]]></title>
      <url>http://shenyu.wiki/2016/10/20/%E5%88%A9%E7%94%A8sed%E7%94%9F%E6%88%90%E8%A7%84%E8%8C%83%E7%9A%84c%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>有时候在编码过程中很多细节不注意，造成了代码不符合规范。一行行人工来修改，太麻烦了，不如交给工具做。鼎鼎大名的sed就是用来帮助你做这些繁重工作的。</p>
</blockquote>
<p>我们准备了一个不规范的代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ cat equal.<span class="function">c </span></div><div class="line"><span class="title">if</span><span class="params">(a==b &amp;&amp; b == c)</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">/* some blank char follow */</span>      </div><div class="line">	<span class="keyword">if</span> (c== d)</div><div class="line">	&#123;</div><div class="line">		func(a,b, c)</div><div class="line">		func(d,e, f)</div><div class="line">		func(a, b, c)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中有这几种不规范的情况</p>
<ol>
<li>if后面不加空格</li>
<li>==前后不加空格</li>
<li>逗号后面不加空格</li>
<li>行尾有空白</li>
</ol>
<p>所以看起来十分乱。</p>
<p>废话不多说，先给出格式化脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">#!/bin/sed -f                                                               </div><div class="line"></div><div class="line"># 处理==两边加空格情况</div><div class="line"># a== b to a == b</div><div class="line">s/\([^ ]\)\(==\)/\1 \2/g</div><div class="line"># a ==b to a == b</div><div class="line">s/\(==\)\([^ ]\)/\1 \2/g</div><div class="line"></div><div class="line"># 处理&amp;&amp;两边加空格情况</div><div class="line"># a&amp;&amp; b to a &amp;&amp; b</div><div class="line">s/\([^ ]\)\(&amp;&amp;\)/\1 \2/g</div><div class="line"># a &amp;&amp;b to a &amp;&amp; b</div><div class="line">s/\(&amp;&amp;\)\([^ ]\)/\1 \2/g</div><div class="line"></div><div class="line"># 处理!=两边加空格情况</div><div class="line"># a!= b to a != b</div><div class="line">s/\([^ ]\)\(!=\)/\1 \2/g</div><div class="line"># a !=b to a != b</div><div class="line">s/\(!=\)\([^ ]\)/\1 \2/g</div><div class="line"></div><div class="line"># 处理if后面加空格情况</div><div class="line"># if(...) to if (...)</div><div class="line">s/if(/if (/g</div><div class="line"></div><div class="line"># 处理for后面加空格情况</div><div class="line"># for(...) to for (...)</div><div class="line">s/for(/for (/g</div><div class="line"></div><div class="line"># 处理逗号后面加空格情况</div><div class="line"># (a,b,c) to (a, b, c) </div><div class="line">s/\(,\)\([^ \t]\)/, \2/g</div><div class="line"></div><div class="line"># 处理行尾空格情况</div><div class="line"># remove tailing blanks</div><div class="line">s/[ \t]*$//g</div></pre></td></tr></table></figure>
<p>用上面我们的sed脚本格式化一下，看到几个不规范的情况都修正了。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ ./ident.sed   ./equal.<span class="function">c </span></div><div class="line"><span class="title">if</span> <span class="params">(a == b &amp;&amp; b == c)</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">/* some blank char follow */</span></div><div class="line">	<span class="keyword">if</span> (c == d)</div><div class="line">	&#123;</div><div class="line">		func(a, b, c)</div><div class="line">		func(d, e, f)</div><div class="line">		func(a, b, c)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后测试了一个比较大的c文件，没有发现啥bug。但是字符串里面的也会格式化，需要注意一下。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[yap--yet another program profiling tool]]></title>
      <url>http://shenyu.wiki/2016/10/14/yap-yet-another-program-profiling-tool/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Sampling tools like oprofile or dtrace’s profile provider don’t really provide methods to see what [multithreaded] programs are blocking on - only where they spend CPU time. Though there exist advanced techniques (such as systemtap and dtrace call level probes), it is overkill to build upon that. Poor man doesn’t have time. Poor man needs food.  –quoted from <a href="https://poormansprofiler.org/" target="_blank" rel="external">poor man’s profiler</a></p>
</blockquote>
<p>Just as the name implies, this is an enhenced version of poor man’s profiler with the following new features added:</p>
<ol>
<li>support command line argument, which make it easier to use and easier to integrate to your program.</li>
<li>support multi process profiling, which is good for PostgreSQL profiling.</li>
<li>user can choose how many stack level to print, which make the result set shorter and easier to read.</li>
<li>when stack level is set to 1 , instead of the stack ranking, the function ranking is printed</li>
<li>the result set is neater and much more pretty.</li>
</ol>
<h2 id="INSTALL"><a href="#INSTALL" class="headerlink" title="INSTALL"></a>INSTALL</h2><p>Download it from <code>https://github.com/shenyuflying/yap.git</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/shenyuflying/yap.git</div></pre></td></tr></table></figure></p>
<p>Type <code>yap -h</code> to show the help message.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># ./yap -h</div><div class="line">================================================================</div><div class="line">                          YAP    ver0.1                         </div><div class="line">================================================================</div><div class="line">  yap -- yet another profiling tool based on poor man&apos;s profiler</div><div class="line">         to generate stack rank of your program.                </div><div class="line">                                                                </div><div class="line">                             yshen 2016 see http://shenyu.wiki  </div><div class="line">================================================================</div><div class="line">                                                         </div><div class="line">usage: yap options=values</div><div class="line">        -s | --samples=n      how many samples to collect</div><div class="line">        -t | --sleeptime=n    how many time to sleep during each sample</div><div class="line">        -f | --stackframe=n   how deep the stack frame to output</div><div class="line">        -p | --pid=pid        which pid to analyze</div><div class="line">        -n | --progname=name  which program to analyze, good for multi-process profiling</div><div class="line">        -h | --help           show this help</div></pre></td></tr></table></figure></p>
<p>if the message is shown, the yap is ready to work.</p>
<h2 id="HOW-TO-USE"><a href="#HOW-TO-USE" class="headerlink" title="HOW TO USE"></a>HOW TO USE</h2><p>You need at least specify a progname or a pid to let yap attach to your program.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ./yap  --progname=postgres</div></pre></td></tr></table></figure></p>
<p>will be enough for the yap to run. after you have choosen a program to profile, you will be run with the default configurations, and <code>yap</code> is start working.<br>the default configurations are<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">samples=100   # take 100 samples of your program</div><div class="line">sleeptime=0   # no sleep during each iteration</div><div class="line">stackframe=5  # the stack frame depth is 5</div></pre></td></tr></table></figure></p>
<p>it will take a while and there will be a progress indicator on the screen, so take your time.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># ./yap  --progname=postgres</div><div class="line">1/100 completed.</div><div class="line">2/100 completed.</div><div class="line">3/100 completed.</div><div class="line">4/100 completed.</div><div class="line">5/100 completed.</div><div class="line">...</div><div class="line">100/100 complete.</div></pre></td></tr></table></figure></p>
<p>when done, the stack ranking is printed.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">40 __epoll_wait_nocancel	WaitEventSetWaitBlock	WaitEventSetWait	WaitLatchOrSocket	WaitLatch</div><div class="line">10 __select_nocancel	ServerLoop	PostmasterMain	main</div><div class="line">10 __epoll_wait_nocancel	WaitEventSetWaitBlock	WaitEventSetWait	WaitLatchOrSocket	SysLoggerMain</div><div class="line">10 __epoll_wait_nocancel	WaitEventSetWaitBlock	WaitEventSetWait	WaitLatchOrSocket	PgstatCollectorMain</div><div class="line">1</div></pre></td></tr></table></figure></p>
<p>if you want to seek the function ranking rather than stack ranking, use <code>--stackframe=1</code> and re-run yap</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">60 __epoll_wait_nocancel</div><div class="line">10 __select_nocancel</div><div class="line"> 1</div></pre></td></tr></table></figure>
<p>the function ranking is much sorter and easier to find the slowest functions.</p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ol>
<li>shall be run in a time duration, add -b | –begin and -e | –end and -d | –duration</li>
<li>shall be exit when the profiling program exit</li>
<li>…</li>
</ol>
<p>report bugs to shenyufly@163.com</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL性能分析]]></title>
      <url>http://shenyu.wiki/2016/10/13/PostgreSQL%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<blockquote>
<p>面对客户抱怨诸如“很慢”、“卡顿”等问题的时候，我们该如何找出性能瓶颈？从研发角度来说，做一下性能分析(profiling)可能有所帮助。性能分析能找出来最慢的函数，从而发现性能问题的瓶颈。再从瓶颈入手，优化代码从而解决性能问题。</p>
</blockquote>
<p>常用的方法是gdb或pstack堆栈跟踪，比如postgreSQL经常卡在一个特定的地方很长时间，往往都有相同的堆栈跟踪信息。我们要做的就是用gdb附加到进程，将所有进程堆栈打出来，然后利用一些简单的脚本将信息做汇总，再利用sort|uniq|sort的方法排序统计出最多的堆栈信息，或最多的函数调用信息。</p>
<p>其实这种profile工具已经有了，其中一个简洁有效的工具是<a href="https://poormansprofiler.org/" target="_blank" rel="external">poor man’s profiler</a>，Google, Facebook, Wikipedia, Intel的工程师都在用这个工具来分析程序的性能。在这里我对其改造一番，使得其更方便的分析postgreSQL数据库。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># ./poormansprofile.sh  </div><div class="line">usage: promansprofile username samples sleeptime</div></pre></td></tr></table></figure>
<p>username是postgreSQL登陆的用户名，脚本里来找到对应用户的pid<br>samples是采样点数<br>sleeptime是每采样点数间隔<br>比如我们分析<code>yshen</code>用户进程，采样点300个，那么如下命令启动分析：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># ./poormansprofile.sh  yshen 300 0</div><div class="line">1/300 completed.</div><div class="line">2/300 completed.</div><div class="line">3/300 completed.</div><div class="line">4/300 completed.</div><div class="line">5/300 completed.</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">300/300 completed.</div></pre></td></tr></table></figure></p>
<p>PS: 在有些环境下，需要用root用户。</p>
<h2 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h2><p>这个脚本可以分析</p>
<ul>
<li>函数排名：即哪个函数调用最占时间。</li>
<li>堆栈排名：即种调用堆栈最占用时间。</li>
</ul>
<h4 id="函数排名"><a href="#函数排名" class="headerlink" title="函数排名"></a>函数排名</h4><p>如下是跑回归测试的函数排名分析。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">266 ServerLoop</div><div class="line">266 PostmasterMain</div><div class="line">266 PostgresMain</div><div class="line">266 main</div><div class="line">266 BackendStartup</div><div class="line">266 BackendRun</div><div class="line">259 exec_simple_query</div><div class="line">134 CommitTransactionCommand</div><div class="line">134 CommitTransaction</div><div class="line">132 XLogFlush</div><div class="line">132 RecordTransactionCommit</div><div class="line">129 finish_xact_command</div><div class="line">128 XLogWrite</div><div class="line">128 pg_fdatasync</div><div class="line">128 issue_xlog_fsync</div><div class="line">128 __fdatasync_nocancel</div><div class="line">120 PortalRun</div><div class="line">101 standard_ProcessUtility</div><div class="line">101 ProcessUtility</div><div class="line"> 99 PortalRunMulti</div><div class="line"> 96 PortalRunUtility</div><div class="line"> 75 ProcessUtilitySlow</div><div class="line"> 74 smgrimmedsync</div><div class="line"> 74 pg_fsync_no_writethrough</div><div class="line"> 74 pg_fsync</div><div class="line"> 74 mdimmedsync</div><div class="line"> 74 __fsync_nocancel</div><div class="line"> 74 FileSync</div><div class="line"> 73 index_build</div><div class="line"> 69 btbuild</div></pre></td></tr></table></figure></p>
<p>可以看到ServerLoop这个函数最占用时间，很正常，因为这个函数在等待用户连接。下面几个函数其中有个函数XLogFlush，FileSync，smgrimmedsync，pg_fdatasync等等都是IO相关，可见IO非常耗时。以上是正常状态下的函数排名，如果有异常应该就可以发现，比如一些阻塞行为，死锁，IO，网络问题都能在这里发现。</p>
<h2 id="堆栈排名"><a href="#堆栈排名" class="headerlink" title="堆栈排名"></a>堆栈排名</h2><p>堆栈排名更加详细，说了哪种堆栈状态最耗时。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">45 __fdatasync_nocancel,pg_fdatasync,issue_xlog_fsync,XLogWrite,XLogFlush,RecordTransactionCommit,CommitTransaction,CommitTransactionCommand,finish_xact_command,exec_simple_query,PostgresMain,BackendRun,BackendStartup,ServerLoop,PostmasterMain,main</div><div class="line"> 7 __fsync_nocancel,pg_fsync_no_writethrough,pg_fsync,FileSync,mdimmedsync,smgrimmedsync,_bt_load,_bt_leafbuild,btbuild,index_build,index_create,DefineIndex,ProcessUtilitySlow,standard_ProcessUtility,ProcessUtility,PortalRunUtility,PortalRunMulti,PortalRun,exec_simple_query,PostgresMain,BackendRun,BackendStartup,ServerLoop,PostmasterMain,main</div><div class="line"> 4 __fsync_nocancel,pg_fsync_no_writethrough,pg_fsync,FileSync,mdimmedsync,smgrimmedsync,_bt_load,_bt_leafbuild,btbuild,index_build,index_create,create_toast_table,CheckAndCreateToastTable,NewRelationCreateToastTable,ProcessUtilitySlow,standard_ProcessUtility,ProcessUtility,PortalRunUtility,PortalRunMulti,PortalRun,exec_simple_query,PostgresMain,BackendRun,BackendStartup,ServerLoop,PostmasterMain,mai</div></pre></td></tr></table></figure></p>
<p>分析第一个堆栈，出现了45次，堆栈的内容是CommitTransaction提交事务带来的刷盘持久化操作，可见很耗时啊，因为带来了IO。同样的，如果发现什么异常行为也可以在这里发现。</p>
<h2 id="源码1-——只分析用户进程"><a href="#源码1-——只分析用户进程" class="headerlink" title="源码1 ——只分析用户进程"></a>源码1 ——只分析用户进程</h2><p>源码如下：<br>如果去掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sed &apos;s/,/\n/g&apos; | \</div><div class="line">uniq | \</div></pre></td></tr></table></figure></p>
<p>这两行就是显示的堆栈排名，否则是函数排名。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">if [ $# != 3 ] ; then</div><div class="line">        echo &quot;usage: promansprofile username samples sleeptime&quot;</div><div class="line">        exit 1</div><div class="line">fi</div><div class="line"></div><div class="line">username=$1</div><div class="line">nsamples=$2</div><div class="line">sleeptime=$3</div><div class="line"></div><div class="line">if [ $(ps aux | grep &quot;postgres: $username&quot; | wc -l) -eq 1 ] ; then</div><div class="line">        echo &quot;user process is not running&quot;</div><div class="line">        exit 1</div><div class="line">fi</div><div class="line"></div><div class="line">for x in $(seq 1 $nsamples)</div><div class="line">  do</div><div class="line">    ps_info=$(ps aux | grep &quot;postgres: $username&quot; )</div><div class="line">    pid=$(echo $ps_info | sed -n &quot;1, 1p&quot; | awk &apos;&#123;print $2&#125;&apos;)</div><div class="line">    gdb -ex &quot;set pagination 0&quot; -ex &quot;thread apply all bt&quot; -batch -p $pid  2&gt;/dev/null</div><div class="line">    sleep $sleeptime</div><div class="line">    echo &quot;$x/$nsamples completed.&quot; &gt;&amp;2</div><div class="line">  done | \</div><div class="line">awk &apos;</div><div class="line">  BEGIN &#123; s = &quot;&quot;; &#125; </div><div class="line">  /^Thread/ &#123; print s; s = &quot;&quot;; &#125; </div><div class="line">  /^\#/ &#123; if (s != &quot;&quot; ) &#123; s = s &quot;,&quot; $4&#125; else &#123; s = $4 &#125; &#125; </div><div class="line">  END &#123; print s &#125;&apos; | \</div><div class="line">sed &apos;s/,/\n/g&apos; | \</div><div class="line">uniq | \</div><div class="line">sort | \</div><div class="line">uniq -c | \</div><div class="line">sort -r -n -k 1,1</div></pre></td></tr></table></figure>
<h2 id="源码2-——分析所有postgreSQL进程"><a href="#源码2-——分析所有postgreSQL进程" class="headerlink" title="源码2 ——分析所有postgreSQL进程"></a>源码2 ——分析所有postgreSQL进程</h2><p>以下源码能分析所有PostgreSQL进程，比如vacuum、log、stat、checkpoint进程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">if [ $# != 2 ] ; then                                                                                                                                  </div><div class="line">    echo &quot;usage: promansprofile samples sleeptime&quot;</div><div class="line">    exit 1</div><div class="line">fi</div><div class="line"></div><div class="line">nsamples=$1</div><div class="line">sleeptime=$2</div><div class="line"></div><div class="line"></div><div class="line">for x in $(seq 1 $nsamples)</div><div class="line">  do  </div><div class="line">    ps_info=$(ps aux)</div><div class="line">    ps_cnt=$(echo $ps_info | wc -l)</div><div class="line">    for p in $(seq 1 $ps_cnt) ; do</div><div class="line">        pid=$(echo $ps_info | sed -n &quot;$p, 1p&quot; | awk &apos;&#123;print $2&#125;&apos;)</div><div class="line">        gdb -ex &quot;set pagination 0&quot; -ex &quot;thread apply all bt&quot; -batch -p $pid  2&gt;/dev/null </div><div class="line">    done</div><div class="line">    sleep $sleeptime</div><div class="line">    echo &quot;$x/$nsamples completed.&quot; &gt;&amp;2</div><div class="line">  done | \ </div><div class="line">awk &apos;</div><div class="line">  BEGIN &#123; s = &quot;&quot;; &#125; </div><div class="line">  /^Thread/ &#123; print s; s = &quot;&quot;; &#125; </div><div class="line">  /^\#/ &#123; if (s != &quot;&quot; ) &#123; s = s &quot;,&quot; $4&#125; else &#123; s = $4 &#125; &#125; </div><div class="line">  END &#123; print s &#125;&apos; | \ </div><div class="line">sed &apos;s/,/\n/g&apos; | \ </div><div class="line">uniq  |\  </div><div class="line">sort |\</div><div class="line">uniq -c |\</div><div class="line">sort -r -n -k 1,1</div></pre></td></tr></table></figure></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果有人说gdb这样不断attach到进程，是否对数据库的性能有影响，大概会拖慢0.2秒。但是为了找出性能问题所在，这样做是值得的，你的付出将会得到加倍回报。稍后我再介绍一个比gdb更快的堆栈工具，只需要1ms就能打出来堆栈。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL日志分析工具——pgBadger]]></title>
      <url>http://shenyu.wiki/2016/10/13/PostgreSQL%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94pgBadger/</url>
      <content type="html"><![CDATA[<blockquote>
<p>面对客户抱怨诸如“很慢”、“卡顿”等问题的时候，常用的办法就是查看服务器的日志。但是一头扎进几百M甚至几个G的日志里查看并不现实。那么如何快速回答：最慢的查询有哪些？查询相应时间分布？等等问题，并对最突出的问题着手优化呢？显然我们需要借助自动化工具来完成这个任务。</p>
</blockquote>
<p>pgBadger就是为分析<code>PostgreSQL全日志</code>为目的诞生的一个工具，能够分析日志并生成分析报告，<a href="/uploads/out.html">这里</a>给出了一个报告样本。怎么样，报告是不是很详细？</p>
<h2 id="pdBadger安装"><a href="#pdBadger安装" class="headerlink" title="pdBadger安装"></a>pdBadger安装</h2><p>pgBadger代码托管在github上，可以到<a href="https://github.com/dalibo/pgbadger/releases" target="_blank" rel="external">这里</a>进行下载，最新的版本是<a href="https://github.com/dalibo/pgbadger/archive/v9.0.tar.gz" target="_blank" rel="external">v9.0</a><br>安装步骤页十分简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/dalibo/pgbadger/archive/v9.0.tar.gz</div><div class="line">tar xzf pgbadger-9.0.tar.gz</div><div class="line">cd pgbadger-9.x/</div><div class="line">perl Makefile.PL</div><div class="line">make &amp;&amp; sudo make install</div></pre></td></tr></table></figure></p>
<p>安装完后，在终端执行<code>pgbadger --version</code>显示版本信息后，表明安装成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pgbadger --version</div><div class="line">pgBadger version 9.0</div></pre></td></tr></table></figure></p>
<h2 id="收集PostgreSQL日志"><a href="#收集PostgreSQL日志" class="headerlink" title="收集PostgreSQL日志"></a>收集PostgreSQL日志</h2><p>要利用pgbadger来分析日志，那么我们首先要打开PostgreSQL记录日志的参数，如下是一个典型的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">log_min_duration_statement = 0 </div><div class="line">log_checkpoints = on</div><div class="line">log_connections = on</div><div class="line">log_disconnections = on</div><div class="line">log_lock_waits = on</div><div class="line">log_temp_files = 0 </div><div class="line">log_autovacuum_min_duration = 0 </div><div class="line">log_line_prefix = &apos;%t [%p]: [%l-1] db=%d,user=%u,app=%a,client=%h&apos;</div><div class="line">log_destination = &apos;stderr&apos;  </div><div class="line">logging_collector = on    </div><div class="line">log_directory = &apos;pg_log&apos;</div><div class="line">log_filename = &apos;postgresql-%Y-%m-%d_%H%M%S.log&apos;</div><div class="line">log_file_mode = 0600</div><div class="line">log_rotation_age = 1d</div><div class="line">log_rotation_size = 1000MB</div><div class="line">lc_messages=&apos;C&apos;</div></pre></td></tr></table></figure></p>
<p>接着打开数据库，如果数据库正在运行那么需要发送一个SIGHUP信号来让数据库重新读取配置。过段时间，我们就能够在<code>pg_log</code>文件夹下看到日志产生了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls</div><div class="line">postgresql-2016-10-13_113844.log</div></pre></td></tr></table></figure></p>
<h2 id="生成分析报告"><a href="#生成分析报告" class="headerlink" title="生成分析报告"></a>生成分析报告</h2><p>生成分析报告非常简单只需要一步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pgbadger ./postgresql-2016-10-13_113844.log</div><div class="line">[========================&gt;] Parsed 5642240 bytes of 5642240 (100.00%), queries: 19436, events: 3002</div><div class="line">LOG: Ok, generating html report...</div></pre></td></tr></table></figure></p>
<p>稍等片刻就会输出分析报告<a href="/uploads/out.html">out.html</a></p>
<p>当然了，pgbadger还有一些高端玩法，比如</p>
<ul>
<li><p>分析压缩文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pgbadger /var/log/postgres.log.1.tar.gz</div></pre></td></tr></table></figure>
</li>
<li><p>分析多个文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pgbadger /var/log/postgresql/postgresql-2012-05-*</div></pre></td></tr></table></figure>
</li>
<li><p>排除某些类型查询</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pgbadger --exclude-query=&quot;^(COPY|COMMIT)&quot; /var/log/postgresql.log</div></pre></td></tr></table></figure>
</li>
<li><p>指定起始时间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pgbadger -b &quot;2012-06-25 10:56:11&quot; -e &quot;2012-06-25 10:59:11&quot; </div><div class="line">                       /var/log/postgresql.log</div></pre></td></tr></table></figure>
</li>
<li><p>从管道读取</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /var/log/postgres.log | pgbadger -</div></pre></td></tr></table></figure>
</li>
<li><p>开启多进程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">perl pgbadger -j 8 /pglog/postgresql-9.1-main.log</div></pre></td></tr></table></figure>
</li>
</ul>
<p>也可以把pgbadger加入crontab计划中，来实现生成每周报告等等。</p>
<h2 id="报告分析"><a href="#报告分析" class="headerlink" title="报告分析"></a>报告分析</h2><p>报告包括了很多方面的内容：</p>
<p>总体信息</p>
<ul>
<li>服务器traffic信息，比如select、update、insert情况</li>
<li>连接情况信息，比如每个库、用户连接情况</li>
<li>会话信息，比如会话时长</li>
<li>checkpoint检查点信息</li>
<li>临时文件信息</li>
<li>vacuum信息，比如做vacuum时间分布，做vacuum表情况，删除元组、页面信息</li>
<li>等待锁的信息</li>
<li>查询信息，insert/update/delete比例分布</li>
<li>慢查询排名，查询耗时分布</li>
<li>报错信息</li>
</ul>
<p>下面介绍一下主要的几个内容</p>
<h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p><img src="http://static.zybuluo.com/shenyuflying/f65eqmftm1egi0k8vkm68ub4/image_1auubla73147a1j8r1sf53a11ejq9.png" alt="image_1auubla73147a1j8r1sf53a11ejq9.png-27.5kB"></p>
<h3 id="QPS"><a href="#QPS" class="headerlink" title="QPS"></a>QPS</h3><p><img src="http://static.zybuluo.com/shenyuflying/qtlgqigexi461t1ixoppuxkd/image_1auubnceb1ah08qorkt1hct1tf3m.png" alt="image_1auubnceb1ah08qorkt1hct1tf3m.png-46.6kB"></p>
<p>这里可以看到有关服务器压力的信息。</p>
<h3 id="查询时间分布-Histogram-of-query-times"><a href="#查询时间分布-Histogram-of-query-times" class="headerlink" title="查询时间分布 Histogram of query times"></a>查询时间分布 Histogram of query times</h3><p><img src="http://static.zybuluo.com/shenyuflying/n5eyqk5866jo00x082uubo63/image_1auubrt19117m130akqdhgbcd513.png" alt="image_1auubrt19117m130akqdhgbcd513.png-38.5kB"></p>
<p>这里可以看到查询时间分布的信息。</p>
<h3 id="慢查询排名-Slowest-individual-queries"><a href="#慢查询排名-Slowest-individual-queries" class="headerlink" title="慢查询排名 Slowest individual queries"></a>慢查询排名 Slowest individual queries</h3><p><img src="http://static.zybuluo.com/shenyuflying/b608kg30v8brh5m4mfupw7xt/image_1auubtkfr1kvfuke1dqiknii6p1g.png" alt="image_1auubtkfr1kvfuke1dqiknii6p1g.png-161.8kB"><br>这里可以看到慢查询信息。<br>另外还有<br>Time Consuming queries (N) —— 最耗时的查询<br>Most frequent queries (N) ——　最频繁的查询<br>Normalized slowest queries　——　归一化后最慢的查询</p>
<p>PS：这里的归一化，就是排除参数不同的干扰。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>另外报告中还有关于报错信息的统计和详细情况。有助于发现服务器的故障。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过pgbadger可以快速分析几百M甚至几个G的服务器日志。掌握服务器运行情况并快速回答：最慢的查询有哪些？查询相应时间分布？等等问题。有助于对最突出的问题着手优化。从而快速解决客户的抱怨。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux性能曲线工具]]></title>
      <url>http://shenyu.wiki/2016/10/11/linux%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC-%E7%BB%98%E5%9B%BE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>linux下有很多监控工具，如top，free，vmstat等。有一大痛点就是各种工具生成的结果格式不一致，较长一段时间内监控数据量大，人工阅读非常困难。所以写了一个脚本，把各种监控参数输出为一个表格，最后再画出图形。</p>
</blockquote>
<p>目前脚本能够监控如下内容</p>
<ol>
<li>平均负载</li>
<li>空闲内存</li>
<li>已用内存</li>
<li>可用内存</li>
<li>缓存中的脏页面</li>
<li>硬盘使用率</li>
<li>进程占用CPU百分比</li>
<li>等等（可以很方便的添加别的监控参数）</li>
</ol>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$./monitor.sh  [程序名]</div></pre></td></tr></table></figure>
<p>脚本输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">------------time---------|-load-|-m_used-|-m_aval-|-m_ditry-|-sda--|-dm-0--|-dm-1--</div><div class="line">2016-10-11_21:26:07	0.34	1223	6272	0	0.50	0.48	0.00	</div><div class="line">2016-10-11_21:26:08	0.34	1224	6271	0	0.50	0.48	0.00	</div><div class="line">2016-10-11_21:26:09	0.34	1227	6269	0	0.50	0.48	0.00	</div><div class="line">2</div></pre></td></tr></table></figure></p>
<p>再用gnuplot绘图工具来绘制曲线，后期我把绘图再加到脚本中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$gnuplot</div><div class="line">set xdata time </div><div class="line">set timefmt &quot;%Y-%m-%d_%H:%M:%S&quot;</div><div class="line">plot &apos;monitor.log&apos; using 1:2 with linespoints linestyle 1</div></pre></td></tr></table></figure>
<p>比如下图绘制了我机器3分钟时间内的load average<br><img src="http://static.zybuluo.com/shenyuflying/r2rjbiq08oop1et5wi2f6uve/image_1aupv45rv67o149rtt1cjk1io29.png" alt=""></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># A system monitoring tool</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># which can generate results as a table </span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#   yshen 2016</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#global configuration</span></div><div class="line">INTERVAL=1</div><div class="line">OUTFILE=<span class="string">"monitor.log"</span></div><div class="line"></div><div class="line"><span class="comment">#monitoring configuration</span></div><div class="line">MONITOR_LOAD=1</div><div class="line">MONITOR_MEM=1</div><div class="line">MONITOR_IO=1</div><div class="line">MONITOR_PROCESS=1</div><div class="line">PRO_NAME=<span class="string">"Xorg"</span></div><div class="line"></div><div class="line"><span class="comment">#internal variables</span></div><div class="line">time=<span class="string">""</span></div><div class="line">result=<span class="string">""</span></div><div class="line">loops=0</div><div class="line"></div><div class="line"><span class="comment">#monitoring functions</span></div><div class="line"><span class="function"><span class="title">monitor_load</span></span>() &#123;</div><div class="line">	load_avg=$(uptime | awk <span class="string">'&#123;print $9&#125;'</span> | sed <span class="string">'s/,$//g'</span>)</div><div class="line">	col=<span class="string">"<span class="variable">$col</span>|-load-"</span></div><div class="line">	result=<span class="string">"<span class="variable">$result</span><span class="variable">$load_avg</span>\t"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">monitor_mem</span></span>() &#123;</div><div class="line">	mem_used=$(free -m|sed -n <span class="string">"2, 1p"</span>  | awk <span class="string">'&#123;print $3&#125;'</span>)</div><div class="line">	mem_free=$(free -m|sed -n <span class="string">"2, 1p"</span>  | awk <span class="string">'&#123;print $4&#125;'</span>)</div><div class="line">	mem_cache=$(free -m|sed -n <span class="string">"2, 1p"</span>  | awk <span class="string">'&#123;print $6&#125;'</span>)</div><div class="line">	mem_avali=$(free -m|sed -n <span class="string">"2, 1p"</span>  | awk <span class="string">'&#123;print $7&#125;'</span>)</div><div class="line">	mem_dirty_kb=$(cat /proc/meminfo  | grep Dirty | awk <span class="string">'&#123;print $2&#125;'</span>) <span class="comment">#in kb</span></div><div class="line">	mem_dirty=$((mem_dirty_kb/1024)) <span class="comment">#in mb</span></div><div class="line">	<span class="comment">#col="$col|-m_used-|-m_free-|--m_cache--|-m_aval-|"</span></div><div class="line">	col=<span class="string">"<span class="variable">$col</span>|-m_used-|-m_aval-|-m_ditry-"</span></div><div class="line">	result=<span class="string">"<span class="variable">$result</span><span class="variable">$mem_used</span>\t<span class="variable">$mem_avali</span>\t<span class="variable">$mem_dirty</span>\t"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">monitor_io</span></span>() &#123;</div><div class="line">	dev_count=$(iostat -xmd | wc <span class="_">-l</span>)</div><div class="line">	dev_count=$((dev_count - 4))</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> $(seq <span class="variable">$dev_count</span>); <span class="keyword">do</span></div><div class="line">		line=$((i+3))</div><div class="line">		dev_util=$(iostat -xmd | sed -n <span class="string">"<span class="variable">$line</span>,1p"</span>| awk <span class="string">'&#123;print $14&#125;'</span>)</div><div class="line">		dev_name=$(iostat -xmd | sed -n <span class="string">"<span class="variable">$line</span>,1p"</span>| awk <span class="string">'&#123;print $1&#125;'</span>)</div><div class="line">		col=<span class="string">"<span class="variable">$col</span>|-<span class="variable">$dev_name</span>--"</span></div><div class="line">		result=<span class="string">"<span class="variable">$result</span><span class="variable">$dev_util</span>\t"</span></div><div class="line">	<span class="keyword">done</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">monitor_process</span></span>() &#123;</div><div class="line">	process_id=$( ps aux | grep <span class="variable">$PRO_NAME</span> | sed -n <span class="string">"1,1p"</span> | awk <span class="string">'&#123;print $2&#125;'</span>)</div><div class="line">	process_cpu=$(top -b -p 3303 -n1 | sed -n <span class="string">"8,1p"</span> | awk <span class="string">'&#123;print $9&#125;'</span>)</div><div class="line">	col=<span class="string">"<span class="variable">$col</span>|-%CPU-"</span></div><div class="line">	result=<span class="string">"<span class="variable">$result</span><span class="variable">$process_cpu</span>\t"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#main entry point</span></div><div class="line"></div><div class="line"><span class="comment">#the first argument is process name to monitor</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> <span class="_">-eq</span> 0 ] ; <span class="keyword">then</span></div><div class="line">	<span class="comment">#no arg, turn off monitor process</span></div><div class="line">	MONITOR_PROCESS=0</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> <span class="_">-eq</span> 1 ] ; <span class="keyword">then</span></div><div class="line">	process_exist=$(ps aux | grep <span class="variable">$PRO_NAME</span> | wc <span class="_">-l</span>)</div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$process_exist</span> <span class="_">-eq</span> 1 ] ; <span class="keyword">then</span></div><div class="line">		MONITOR_PROCESS=0</div><div class="line">	<span class="keyword">fi</span>	</div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$process_exist</span> <span class="_">-eq</span> 2 ] ; <span class="keyword">then</span></div><div class="line">		PRO_NAME=<span class="variable">$1</span></div><div class="line">	<span class="keyword">fi</span>	</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> [ 1 <span class="_">-eq</span> 1 ] ; <span class="keyword">do</span></div><div class="line">	result=<span class="string">""</span></div><div class="line">	col=<span class="string">""</span></div><div class="line"></div><div class="line">	<span class="comment"># sleep until next integer seconds</span></div><div class="line">	sleep=$(date <span class="string">'+%s.%N'</span> | awk <span class="string">"&#123;print <span class="variable">$INTERVAL</span> - (\$1 % <span class="variable">$INTERVAL</span>)&#125;"</span>)</div><div class="line">	sleep <span class="variable">$sleep</span></div><div class="line">	</div><div class="line">	time=$(date <span class="string">'+%F_%k:%M:%S.%N'</span>)</div><div class="line">	<span class="comment">#time=$(date '+%F_%k:%M:%S')</span></div><div class="line">	result=<span class="string">"<span class="variable">$result</span><span class="variable">$time</span>\t"</span></div><div class="line">	<span class="comment">#        2016-10-11_17:45:34.002592500</span></div><div class="line">	col=<span class="string">"<span class="variable">$col</span>------------time-------------"</span></div><div class="line">	<span class="comment"># do the work</span></div><div class="line">	</div><div class="line">	<span class="comment">## COL1 monitoring the load average</span></div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$MONITOR_LOAD</span> <span class="_">-eq</span> 1 ]</div><div class="line">	<span class="keyword">then</span></div><div class="line">		monitor_load</div><div class="line">	<span class="keyword">fi</span></div><div class="line"></div><div class="line">	<span class="comment">## COL1 monitoring the load average</span></div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$MONITOR_MEM</span> <span class="_">-eq</span> 1 ]</div><div class="line">	<span class="keyword">then</span></div><div class="line">		monitor_mem</div><div class="line">	<span class="keyword">fi</span></div><div class="line"></div><div class="line">	<span class="comment">## COL1 monitoring the load average</span></div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$MONITOR_IO</span> <span class="_">-eq</span> 1 ]</div><div class="line">	<span class="keyword">then</span></div><div class="line">		monitor_io</div><div class="line">	<span class="keyword">fi</span></div><div class="line">	<span class="comment">## COL1 monitoring the load average</span></div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$MONITOR_PROCESS</span> <span class="_">-eq</span> 1 ]</div><div class="line">	<span class="keyword">then</span></div><div class="line">		monitor_process</div><div class="line">	<span class="keyword">fi</span></div><div class="line">	<span class="comment">## extra COLs add below</span></div><div class="line"></div><div class="line">	<span class="comment"># do the print</span></div><div class="line">    <span class="comment">## on the first iteration print the col names</span></div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$loops</span> <span class="_">-eq</span> 0 ]</div><div class="line">	<span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="variable">$col</span> &gt;&gt; <span class="variable">$OUTFILE</span></div><div class="line">		<span class="built_in">echo</span> <span class="variable">$col</span></div><div class="line">	<span class="keyword">fi</span></div><div class="line"></div><div class="line">	<span class="built_in">echo</span> <span class="variable">$result</span> &gt;&gt; <span class="variable">$OUTFILE</span></div><div class="line">	<span class="built_in">echo</span> <span class="variable">$result</span></div><div class="line"></div><div class="line">	loops=$((1))</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据库性能测试标准TPC]]></title>
      <url>http://shenyu.wiki/2016/10/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%A0%87%E5%87%86TPC/</url>
      <content type="html"><![CDATA[<blockquote>
<p>经常有人在自己机器上跑了一个简单的查询，就发布到网上说哪个数据性能如何如何。数据库性能的好坏影响因素很多，比如业务特点、数据量、测试时间、硬件配置等等。那么有没有一个标准来度量数据库性能的好呢？</p>
</blockquote>
<p>有这么一个组织：TPC，即事务处理性能委员位TPC(Transaction Processing Performance Council)，成立于88年，制定了一系列用来测试数据库性能的标准，在业内广泛应用。<br>TPC成员有很多软硬件厂商组成，比如IBM，INTEL传统的硬件厂商；还有ORALCE、SAP、REDHAT等软件厂商等。国内的HUAWEI也在其中。可以说TPC组织覆盖了数据库的整个生态系统。<br>他们的官网是：<a href="http://www.tpc.org" target="_blank" rel="external">http://www.tpc.org</a></p>
<p>TPC有很多测试标准，见下图。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/le1aa8mmq6jnh0191fscinj7/image_1aup9fil01m0qsda13k0mi51jmp9.png" alt="TPC测试标准"></p>
<p>其中最有名的是TPC-C和TPC-H标准。TPC-C标准是TPC推出的最早的一个标准，主要用来测试交易处理的的场景。TPC-H标准主要用来测试决策支持场景。</p>
<h2 id="TPC-C"><a href="#TPC-C" class="headerlink" title="TPC-C"></a>TPC-C</h2><p>TPC-C全称为TPC Benchmark C，主要用来测试交易处理场景下数据库的性能。该测试标准模拟了一个批发商管理订单的场景。包括了输入订单，发货，收钱，查询订单状态。性能指标有2个分别是：</p>
<ul>
<li>new-order txn rate (tpmC)</li>
<li>price/performance ($/tpmC)</li>
</ul>
<p>根据字面意思不难理解，tmpC是每分钟处理订单的数量，$/tmpC是一个经济指标说的是每tmpC花费。</p>
<h2 id="TPC-H"><a href="#TPC-H" class="headerlink" title="TPC-H"></a>TPC-H</h2><p>TPC-H全称The TPC Benchmark™H ，主要用来测试决策支持场景下数据库的性能。该测试标准模拟了商业环境中一些即席查询（Ad-hoc queries）和并发修改。这些场景都需要访问大量的数据，执行的查询非常复杂。是不是可以理解成为OLAP场景测试？</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[好书推荐：《操作系统设计与实现》]]></title>
      <url>http://shenyu.wiki/2016/10/10/%E5%A5%BD%E4%B9%A6%E6%8E%A8%E8%8D%90%EF%BC%9A%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E3%80%8B/</url>
      <content type="html"><![CDATA[<p><img src="http://static.zybuluo.com/shenyuflying/9zirytck87tjzui21z89irin/QQ%E6%88%AA%E5%9B%BE20161010194316.png" alt=""></p>
<p>这本书带领你从理论到设计再到编码，一步步深入讲解了进程、内存管理、文件系统等内容。第一次读本书是在研究生期间，最近又拿出来看了一遍，又有很多收获。其中有些设计、编程思想十分经典，值得反复阅读。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux中的硬链接和软链接]]></title>
      <url>http://shenyu.wiki/2016/10/10/linux%E4%B8%AD%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E5%92%8C%E8%BD%AF%E9%93%BE%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h2 id="建立硬链接和软链接"><a href="#建立硬链接和软链接" class="headerlink" title="建立硬链接和软链接"></a>建立硬链接和软链接</h2><p>在linux中我们通过ln命令来建立硬链接和软链接，默认是建立硬链接，加上-s参数那么建立的就是软链接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;Hello world&quot; &gt; a</div><div class="line">$ ln a a_hard_link</div><div class="line">$ ln -s a a_soft_link</div></pre></td></tr></table></figure></p>
<p>建立好之后，用ls命令看一下，记得加上-i这样我们就可以看到inode号了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ls -ali</div><div class="line">19796575 -rw-rw-r--  2 yshen yshen   12 10月 10 11:33 a</div><div class="line">19796575 -rw-rw-r--  2 yshen yshen   12 10月 10 11:33 a_hard_link</div><div class="line">19796574 lrwxrwxrwx  1 yshen yshen    1 10月 10 11:34 a_soft_link -&gt; a</div></pre></td></tr></table></figure></p>
<p><strong>inode</strong><br>科普一下：inode全称是index node即索引节点。可见inode中并没有存放文件的实际内容，而是存放了索引。这个索引指向的是磁盘中存放文件内容的物理位置。<br><strong>目录</strong><br>在linux中目录也有一个inode，inode指向记录目录实际内容的磁盘物理位置。</p>
<h2 id="什么是硬链接和软链接"><a href="#什么是硬链接和软链接" class="headerlink" title="什么是硬链接和软链接"></a>什么是硬链接和软链接</h2><p>再回到我们的例子里，ls的结果第一列是该文件的inode号，可以看到硬链接的inode号和文件原来的inode号是一样的。说明指向的物理位置是一样的。<br>我们看软链接的inode号不同，说明是一个新的文件，该文件指向的是另外的一个物理位置。该物理位置里面存放着链接目标的路径。</p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>让我们删除连接目标文件a<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ rm a</div><div class="line">$ ls -ali</div><div class="line">总用量 12</div><div class="line">19796573 drwxrwxr-x  2 yshen yshen 4096 10月 10 11:35 .</div><div class="line">58720267 drwxrwxr-x 43 yshen yshen 4096 10月 10 11:33 ..</div><div class="line">19796575 -rw-rw-r--  1 yshen yshen   12 10月 10 11:33 a_hard_link</div><div class="line">19796574 lrwxrwxrwx  1 yshen yshen    1 10月 10 11:34 a_soft_link -&gt; a</div></pre></td></tr></table></figure></p>
<p>硬链接和软链接现在还能访问么？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat a_hard_link </div><div class="line">Hello world</div><div class="line">$ cat a_soft_link </div><div class="line">cat: a_soft_link: 没有那个文件或目录</div></pre></td></tr></table></figure></p>
<p>硬链接还能访问，软链接现在已经失效了！根据定义我们不难找出原因：<br>(1)硬链接指向的是物理位置和连接对象指向的物理位置一样，该物理位置有一个引用计数（ls的第三列），删除链接对象后，引用计数从原来的2变为1，所以物理上文件并没有删除，如果为0的话采用unlink删除。所以硬链接依然可以访问。<br>(2)软链接其实是一个文件，文件指向的路径已经失效了，所以会显示没有那个文件或目录。</p>
<p>我们总结一下区别：<br>(1) 链接目标失效之后，硬链接依然可以访问。软链接不能访问。<br>(2) 硬链接只能指向和链接目标同一个分区，软链接没有限制，甚至可以指向网络地址。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux中的僵尸进程]]></title>
      <url>http://shenyu.wiki/2016/10/09/linux%E4%B8%AD%E7%9A%84%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>如果一个进程已经退出或者被杀死，但是它的父进程尚未执行wait操作，那么该进程进入僵尸(zombie)状态。这种进程不再参与调度，它的内存也会被释放，但系统不会把它从进程表中删除(top 命令中显示状态为Z)。僵尸在进程等待父进程回收它的退出状态。</p>
</blockquote>
<p>这篇文章会告诉你：</p>
<ol>
<li>僵尸进程产生原理。</li>
<li>如何产生僵尸进程。</li>
<li>如何回收僵尸进程。</li>
</ol>
<a id="more"></a>
<h2 id="产生僵尸进程"><a href="#产生僵尸进程" class="headerlink" title="产生僵尸进程"></a>产生僵尸进程</h2><p>根据僵尸进程的定义，我们不难用c语言来产生一个僵尸进程</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MB 1024*1024</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> pid;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"new process PID=%d\n"</span>, getpid());</div><div class="line">    pid = fork();</div><div class="line">    <span class="keyword">if</span>(pid==<span class="number">0</span>)</div><div class="line">    &#123;   </div><div class="line">        <span class="comment">/* child */</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"new process PID=%d\n"</span>, getpid());</div><div class="line">        <span class="keyword">char</span> * p = <span class="built_in">malloc</span>(<span class="number">512</span>*MB);</div><div class="line">        <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="number">512</span>*MB);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">    &#125;   </div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;   </div><div class="line">        <span class="comment">/* parent */</span></div><div class="line">        sleep(<span class="number">60</span>);</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译并执行该程序，然后再看该程序进程的状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ./main </div><div class="line">new process PID=25810</div><div class="line">new process PID=25811</div><div class="line"></div><div class="line">$ ps aux | grep main</div><div class="line">yshen    25810  0.0  0.0   4200   620 pts/31   S+   14:30   0:00 ./main</div><div class="line">yshen    25811  0.0  0.0      0     0 pts/31   Z+   14:30   0:00 [main] &lt;defunct&gt;</div></pre></td></tr></table></figure></p>
<p>可以看到，主进程的状态为S+即休眠状态，子进程的状态为Z+即僵尸状态。此时僵尸进程等待父进程读取其退出状态。在该程序中等待父进程退出之后，子进程也将退出（因为子进程的状态在父进程退出之后已经没什么用了）。</p>
<p>用top命令来查看内存占用情况，可以看到实僵尸进程的内存占用等于0.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ top</div><div class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND </div><div class="line">25810 yshen     20   0    4200    792    712 S   0.0  0.0   0:00.00 main</div><div class="line">25811 yshen     20   0       0      0      0 Z   0.0  0.0   0:00.67 main</div></pre></td></tr></table></figure></p>
<h2 id="处理僵尸进程"><a href="#处理僵尸进程" class="headerlink" title="处理僵尸进程"></a>处理僵尸进程</h2><p>根据以上分析，我们不难得出僵尸进程退出的2种情况：</p>
<ol>
<li>父进程用wait/waitpid来获取子进程的状态。</li>
<li>父进程退出。</li>
</ol>
<p>子进程退出，也会给父进程发送SIGCHLD信号来通知。在实际编码中，一般应SIGCHLD信号进行处理。（如：重新fork拉起子进程或进行垃圾回收，记录日志等等）。如下例子我们注册SIGCHLD信号处理函数，等待子进程退出时由父进程调用wait来获取其退出状态。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">#include&lt;unistd.h&gt;</div><div class="line">#include&lt;stdio.h&gt;</div><div class="line">#include&lt;stdlib.h&gt;</div><div class="line">#include&lt;signal.h&gt;</div><div class="line"></div><div class="line">void handler(int code)</div><div class="line">&#123;</div><div class="line">	int status;</div><div class="line">	pid_t pid =	wait(&amp;status);</div><div class="line">	printf(&quot;parent get SIGCHLD, child %d returned %d\n&quot;,</div><div class="line">									pid, WEXITSTATUS(status));</div><div class="line">	sleep(60); /* 加这行是因为父进程收到SIGCHLD信号打断了原来的sleep，如果不加这个父进程就会马上退出 */</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line"></div><div class="line">	int pid;</div><div class="line">	signal(SIGCHLD,handler);</div><div class="line">	</div><div class="line">	printf(&quot;new process PID=%d\n&quot;, getpid());</div><div class="line">	pid = fork();</div><div class="line"></div><div class="line">	if(pid==0)</div><div class="line">	&#123;</div><div class="line">		/* child */</div><div class="line">		printf(&quot;new process PID=%d\n&quot;, getpid());</div><div class="line">		exit(123);</div><div class="line">	&#125;</div><div class="line">	/* parent */</div><div class="line">	sleep(60);</div><div class="line">	exit(0);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译并执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ./main </div><div class="line">new process PID=26559</div><div class="line">new process PID=26560</div><div class="line">parent get SIGCHLD, child 26560 returned 123</div><div class="line"></div><div class="line">$ ps aux | grep main</div><div class="line">yshen    26604  0.0  0.0   4200   624 pts/31   S+   15:07   0:00 ./main</div></pre></td></tr></table></figure></p>
<p>可以看到，已经没有僵尸进程了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[字符串中特殊字符转义——php中urlencode urldecode的c语言版本]]></title>
      <url>http://shenyu.wiki/2016/10/09/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%BD%AC%E4%B9%89%E2%80%94%E2%80%94php%E4%B8%ADurlencode-urldecode%E7%9A%84c%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC/</url>
      <content type="html"><![CDATA[<blockquote>
<p>有时候字符串中的特殊字符会影响到字符串解析，比如在某些情况中不允许字符串中有特殊字符，但是用户输入的文本中可能包含一些特殊字符。这时我们需要对特殊字符进行转义。在这里我们模仿php里面的urlencode和urldecode函数，给出其C语言实现。</p>
</blockquote>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./str_encode </div><div class="line"> select * from hello_world; = [+select+%2A+from+hello_world%3B]</div></pre></td></tr></table></figure>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line"></div><div class="line"></div><div class="line">static char *str_encode(char *s, int len, int *new_length);</div><div class="line">static int str_decode(char *str, int len);</div><div class="line">static int htoi(char *s);</div><div class="line"></div><div class="line"></div><div class="line">int main(int argc, char *argv[])</div><div class="line">&#123;</div><div class="line"></div><div class="line">	char * msg = &quot;hello world!&quot;;</div><div class="line">	char * msg_encode;</div><div class="line">	char  msg_decode[1024] ;</div><div class="line"></div><div class="line">	msg_encode = str_encode(msg, strlen(msg), NULL);</div><div class="line"></div><div class="line">	/* decode modify the str inplace , so have to make a copy of it */</div><div class="line">	strcpy(msg_decode, msg_encode);</div><div class="line">	str_decode(msg_decode, strlen(msg_decode));</div><div class="line"></div><div class="line">	printf(&quot;%s = [%s]\n&quot;, msg_decode, msg_encode);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">static char *str_encode(char *s, int len, int *new_length)</div><div class="line">&#123;</div><div class="line">    register unsigned char c;</div><div class="line">    unsigned char *to, *start;</div><div class="line">    unsigned char const *from, *end;</div><div class="line">    static unsigned char hexchars[] = &quot;0123456789ABCDEF&quot;;</div><div class="line">    from = (unsigned char *)s;</div><div class="line">    end  = (unsigned char *)s + len;</div><div class="line">    start = to = (unsigned char *) malloc((3*len+1)*sizeof(char));</div><div class="line"></div><div class="line">    while (from &lt; end)</div><div class="line">    &#123;</div><div class="line">        c = *from++;</div><div class="line"></div><div class="line">        if (c == &apos; &apos;)</div><div class="line">        &#123;</div><div class="line">            *to++ = &apos;+&apos;;</div><div class="line">        &#125;</div><div class="line">        else if ((c &lt; &apos;0&apos; &amp;&amp; c != &apos;-&apos; &amp;&amp; c != &apos;.&apos;) ||</div><div class="line">                 (c &lt; &apos;A&apos; &amp;&amp; c &gt; &apos;9&apos;) ||</div><div class="line">                 (c &gt; &apos;Z&apos; &amp;&amp; c &lt; &apos;a&apos; &amp;&amp; c != &apos;_&apos;) ||</div><div class="line">                 (c &gt; &apos;z&apos;))</div><div class="line">        &#123;</div><div class="line">            to[0] = &apos;%&apos;;</div><div class="line">            to[1] = hexchars[c &gt;&gt; 4];</div><div class="line">            to[2] = hexchars[c &amp; 15];</div><div class="line">            to += 3;</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            *to++ = c;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    *to = 0;</div><div class="line">    if (new_length)</div><div class="line">    &#123;</div><div class="line">        *new_length = to - start;</div><div class="line">    &#125;</div><div class="line">    return (char *) start;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">static int str_decode(char *str, int len)</div><div class="line">&#123;</div><div class="line">    char *dest = str;</div><div class="line">    char *data = str;</div><div class="line"></div><div class="line">    while (len--)</div><div class="line">    &#123;</div><div class="line">        if (*data == &apos;+&apos;)</div><div class="line">        &#123;</div><div class="line">            *dest = &apos; &apos;;</div><div class="line">        &#125;</div><div class="line">        else if (*data == &apos;%&apos; &amp;&amp; len &gt;= 2 &amp;&amp; isxdigit((int) *(data + 1)) &amp;&amp; isxdigit((int) *(data + 2)))</div><div class="line">        &#123;</div><div class="line">            *dest = (char) htoi(data + 1);</div><div class="line">            data += 2;</div><div class="line">            len -= 2;</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            *dest = *data;</div><div class="line">        &#125;</div><div class="line">        data++;</div><div class="line">        dest++;</div><div class="line">    &#125;</div><div class="line">    *dest = &apos;\0&apos;;</div><div class="line">    return dest - str;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">static int htoi(char *s)</div><div class="line">&#123;</div><div class="line">    int value;</div><div class="line">    int c;</div><div class="line"></div><div class="line">    c = ((unsigned char *)s)[0];</div><div class="line">    if (isupper(c))</div><div class="line">        c = tolower(c);</div><div class="line">    value = (c &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos; ? c - &apos;0&apos; : c - &apos;a&apos; + 10) * 16;</div><div class="line"></div><div class="line">    c = ((unsigned char *)s)[1];</div><div class="line">    if (isupper(c))</div><div class="line">        c = tolower(c);</div><div class="line">    value += c &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos; ? c - &apos;0&apos; : c - &apos;a&apos; + 10;</div><div class="line"></div><div class="line">    return (value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[好文推荐：《Spanner: Google's Globally-Distributed Database》]]></title>
      <url>http://shenyu.wiki/2016/10/05/%E5%A5%BD%E6%96%87%E6%8E%A8%E8%8D%90%EF%BC%9A%E3%80%8ASpanner-Google-s-Globally-Distributed-Database%E3%80%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Spanner是谷歌公司研发的、可扩展的、多版本、全球分布式、同步复制数据库。它是第一个把数据分布在全球范围内的系统，并且支持外部一致性的分布式事务。本文描述了Spanner的架构、特性、不同设计决策的背后机理和一个新的时间API，这个API可以暴露时钟的不确定性。这个API及其实现，对于支持外部一致性和许多强大特性而言，是非常重要的，这些强大特性包括：非阻塞的读、不采用锁机制的只读事务、原子模式变更。</p>
</blockquote>
<p>附上原文<a href="/uploads/spanner.pdf">Spanner: Google’s Globally-Distributed Database</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux下配置IP地址子网掩码和网关]]></title>
      <url>http://shenyu.wiki/2016/10/05/linux%E4%B8%8B%E9%85%8D%E7%BD%AEIP%E5%9C%B0%E5%9D%80%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E5%92%8C%E7%BD%91%E5%85%B3/</url>
      <content type="html"><![CDATA[<h2 id="命令配置"><a href="#命令配置" class="headerlink" title="命令配置"></a>命令配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ifconfig eth0 ipaddr 192.12.12.12 netmask 255.255.255.0 </div><div class="line">route add default gw 192.12.12.1</div><div class="line">ifconfig eth0 down</div><div class="line">ifconfig eht0 up</div></pre></td></tr></table></figure>
<p>该方法重启过之后就失效了，如果要永久生效，方法有：</p>
<ol>
<li>把以上配置命令加入到启动脚本里面</li>
<li>修改网络配置文件</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssh免密码登陆linux主机]]></title>
      <url>http://shenyu.wiki/2016/10/05/ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86linux%E4%B8%BB%E6%9C%BA/</url>
      <content type="html"><![CDATA[<blockquote>
<p>比如想登陆一台服务器但是每次都需要输密码，这时候我们可以用ssh的authorized_keys文件来记录允许登陆的主机。</p>
</blockquote>
<h2 id="配置hosts"><a href="#配置hosts" class="headerlink" title="配置hosts"></a>配置hosts</h2><p>比如我们有2台主机，分别是host1和host2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cat /etc/hosts</div><div class="line">192.168.0.101 host1</div><div class="line">192.168.0.102 host2</div></pre></td></tr></table></figure></p>
<h2 id="生成key"><a href="#生成key" class="headerlink" title="生成key"></a>生成key</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@host1 ~]# ssh-keygen -t dsa -f ~/.ssh/id_dsa -N &quot;&quot;</div><div class="line">Generating public/private dsa key pair.</div><div class="line">Your identification has been saved in /root/.ssh/id_dsa.</div><div class="line">Your public key has been saved in /root/.ssh/id_dsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">91:09:5c:82:5a:6a:50:08:4e:b2:0c:62:de:cc:74:44 root@host1.clusterlabs.org</div><div class="line">The key&apos;s randomart image is:</div><div class="line">+--[ DSA 1024]----+</div><div class="line">|==.ooEo..        |</div><div class="line">|X O + .o o       |</div><div class="line">| * A    +        |</div><div class="line">|  +      .       |</div><div class="line">| .      S        |</div><div class="line">|                 |</div><div class="line">|                 |</div><div class="line">|                 |</div><div class="line">|                 |</div><div class="line">+-----------------+</div></pre></td></tr></table></figure>
<h2 id="新建authorized-keys文件"><a href="#新建authorized-keys文件" class="headerlink" title="新建authorized_keys文件"></a>新建authorized_keys文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@host1 ~]# cp ~/.ssh/id_dsa.pub ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>
<h2 id="把authorized-keys文件部署到远程主机"><a href="#把authorized-keys文件部署到远程主机" class="headerlink" title="把authorized_keys文件部署到远程主机"></a>把authorized_keys文件部署到远程主机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@host1 ~]# scp -r ~/.ssh/authorized_keys host2:～/.ssh/</div></pre></td></tr></table></figure>
<h2 id="免密码登陆远程主机"><a href="#免密码登陆远程主机" class="headerlink" title="免密码登陆远程主机"></a>免密码登陆远程主机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@host1 ~]# ssh host2</div></pre></td></tr></table></figure>
<p>其实就是把本机生成的*.pub文件内容copy到另外一台主机~/.ssh/authorized_keys文件里面就ok！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux查找文件内容]]></title>
      <url>http://shenyu.wiki/2016/10/04/linux%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/</url>
      <content type="html"><![CDATA[<blockquote>
<p>有时候我们需要在一堆文件中查找包含<code>某单词</code>的文件。比如在一堆源码文件中找出来调用一个函数的地方。</p>
</blockquote>
<p>可以用find，xargs，grep三个命令联合起来实现。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find ./ -type f -name *.c | xargs grep <span class="string">"word"</span></div></pre></td></tr></table></figure></p>
<p>find找出当前目录下所有.c的普通文件<br>xargs将文件名变成参数传入到grep<br>grep打开该文件并找出文件中包含word的行</p>
<h2 id="一个脚本"><a href="#一个脚本" class="headerlink" title="一个脚本"></a>一个脚本</h2><p>为了方便使用，避免每次都输入很长的命令，写出了下面一个脚本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash                                                                 </span></div><div class="line"><span class="comment">#递归查找当前目录文件中的内容</span></div><div class="line"><span class="comment">#参数1： 文件后缀，可以省略</span></div><div class="line"><span class="comment">#参数2： 要查找的字符串</span></div><div class="line"></div><div class="line">F_ARG_SUFFIX=<span class="string">""</span></div><div class="line">F_ARG_PATTEN=<span class="string">""</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> == 0 ] ; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"usage: f [file suffix] pattern"</span></div><div class="line">    <span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> == 1 ] ; <span class="keyword">then</span></div><div class="line">    F_ARG_PATTEN=<span class="string">"<span class="variable">$1</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> == 2 ] ; <span class="keyword">then</span></div><div class="line">    F_ARG_SUFFIX=<span class="string">"-name *.<span class="variable">$1</span>"</span></div><div class="line">    F_ARG_PATTEN=<span class="string">"<span class="variable">$2</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">find ./ -type f <span class="variable">$F_ARG_NAME</span> | xargs grep <span class="variable">$F_ARG_PATTEN</span></div></pre></td></tr></table></figure></p>
<p>保存在/bin目录下，并加上可执行权限</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>比如找出postgreSQL源码中, c语言文件使用到heap_open函数的地方：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ f c heap_open</div><div class="line">./backend/commands/tablecmds.c:         rel = heap_openrv(rv, AccessExclusiveLock);</div><div class="line">./backend/commands/tablecmds.c:                         rel = heap_open(childrelid, NoLock);</div><div class="line">...</div><div class="line"></div><div class="line">$ f c heap_open | wc <span class="_">-l</span></div><div class="line">587</div></pre></td></tr></table></figure></p>
<p>一共使用了587次，很多啊！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[好书推荐：《软技能-代码之外的生存指南》]]></title>
      <url>http://shenyu.wiki/2016/10/04/%E5%A5%BD%E4%B9%A6%E6%8E%A8%E8%8D%90%EF%BC%9A%E3%80%8A%E8%BD%AF%E6%8A%80%E8%83%BD-%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%96%E7%9A%84%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97%E3%80%8B/</url>
      <content type="html"><![CDATA[<p><img src="http://static.zybuluo.com/shenyuflying/phjbqy6j0tco0bvbtc3h3q45/2016-10-04%2017-26-44%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p>
<p>是在知乎上看到大家说这本书非常值得一读，在当当上买到这本书一个月有余，平时工作比较忙，陆陆续续的读了一部分，今天才利用国庆假期读完。</p>
<p>正如书名所说，这本书涵盖了除如何编程以外的各个方面，从职业规划，自我营销，如何学习，提高效率到理财、健身、心态等等。相比于一些励志、心理学方面的书籍，更加贴近于程序员的生活，因为作者本身就是一个非常成功的程序员。</p>
<p>在读这本书关于自我营销这一章的过程中，对我的直接影响就是我开始写博客了。我注册了<a href="http://www.shenyu.wiki" target="_blank" rel="external">域名</a>，快速学习并掌握了一个博客框架hexo，学习了markdown标记语言和cmdmarkdown跨平台markdown编辑器，在github上架设了我的第一个个人博客。当然其中走了一段弯路，想用树莓派+wordpress+花生棒搭建本地的博客，但是由于运营商限制80端口以及网速原因放弃了。你能想象这都是在一个月中利用业余时间完成的么？</p>
<p>在读这本书关于健身这一章的过程中，我体重一个月内下降了3斤。</p>
<p>该书的别的章节，比如职业规划，如何学习，健身，理财等等，对于程序员来说也非常重要。</p>
<p>这本书值得反复读，把其中有价值的思想和方法应用到自己的学习、工作生活之中。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[颐和园 Summer Palace]]></title>
      <url>http://shenyu.wiki/2016/10/04/%E9%A2%90%E5%92%8C%E5%9B%AD/</url>
      <content type="html"><![CDATA[<blockquote>
<p>颐和园，中国清朝时期皇家园林，前身为清漪园，坐落在北京西郊，距城区十五公里，占地约二百九十公顷，与圆明园毗邻。它是以昆明湖、万寿山为基址，以杭州西湖为蓝本，汲取江南园林的设计手法而建成的一座大型山水园林，也是保存最完整的一座皇家行宫御苑，被誉为“皇家园林博物馆”，也是国家重点旅游景点。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/y5a04va003m6b4cwu9agky5v/2016-10-04%2012-37-23%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="昆明湖"><br>$$昆明湖$$</p>
<p>昆明湖是颐和园的主要湖泊，占全园面积的四分之三，约220公顷。南部的前湖区碧波荡漾，西望起伏、北望楼阁成群；湖中有一道西堤，堤上桃柳成行；</p>
<p><img src="http://static.zybuluo.com/shenyuflying/98ubpp8932fg35oovjeuz5e5/2016-10-04%2012-35-49%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$十七孔桥$$<br>十七孔桥横卧湖上，湖中3岛上也有形式各异的古典建筑。昆明湖是清代皇家诸园中最大的湖泊，湖中一道长堤──西堤，自西北逶迤向南。西堤及其支堤把湖面划分为三个大小不等的水域，每个水域各有一个湖心岛。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/r17fgepk5zbfc0cd5oyly2xy/2016-10-04%2012-38-18%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$万寿山$$</p>
<p>万寿山属燕山余脉，高58.59米。建筑群依山而筑，万寿山前山，以八面三层四重檐的佛香阁为中心，组成巨大的主体建筑群。</p>
<p>2016-10-3</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo静态博客修改侧边栏]]></title>
      <url>http://shenyu.wiki/2016/10/04/hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E4%BE%A7%E8%BE%B9%E6%A0%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>hexo主题默认的侧边栏只有<code>首页</code>、<code>归档</code>、<code>标签</code>这几项。调研了几个比较优秀的博客之后发现，还需要添加<code>关于</code>、<code>搜索</code>、<code>阅读</code>、<code>旅行</code>等等几个侧边栏项目，那么如何在博客里面添加新的侧边栏项目呢？</p>
</blockquote>
<h2 id="添加关于、留言项目"><a href="#添加关于、留言项目" class="headerlink" title="添加关于、留言项目"></a>添加关于、留言项目</h2><p>关于、留言这两个项目实际上是利用了hexo的page页面功能。</p>
<h3 id="Step1-新建关于页面"><a href="#Step1-新建关于页面" class="headerlink" title="Step1 新建关于页面"></a>Step1 新建关于页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo new page about</div><div class="line">INFO  Created: ~/blog/source/about/index.md</div></pre></td></tr></table></figure>
<p>打开修改为如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: about</div><div class="line">date: 2016-09-17 13:21:20</div><div class="line">comments: false   添加这行关闭评论</div><div class="line">---</div><div class="line">here is something about me</div></pre></td></tr></table></figure></p>
<h3 id="Step2-新建留言页面"><a href="#Step2-新建留言页面" class="headerlink" title="Step2 新建留言页面"></a>Step2 新建留言页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page message</div></pre></td></tr></table></figure>
<p>打开修改为如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: message</div><div class="line">date: 2016-09-17 13:21:20</div><div class="line">comments: true   打开评论</div><div class="line">---</div><div class="line">有事请留言</div></pre></td></tr></table></figure></p>
<h3 id="Step3-把关于、留言添加到侧边栏中"><a href="#Step3-把关于、留言添加到侧边栏中" class="headerlink" title="Step3 把关于、留言添加到侧边栏中"></a>Step3 把关于、留言添加到侧边栏中</h3><p>打开主题配置文件<code>./themes/next/_config.yml</code>，可以看到侧边栏Menu Settings有两项：<br>第一项是menu，控制侧边栏显示的项目；<br>第二项是menu_icons，控制显示项目的图标；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  books: /categories/阅读</div><div class="line">  travel: /categories/旅行</div><div class="line">  archives: /archives</div><div class="line">  tags: /tags</div><div class="line">  message: /message #添加这一行</div><div class="line">  about: /about     #添加这一行</div><div class="line"></div><div class="line">menu_icons:</div><div class="line">  enable: true</div><div class="line">  home: home</div><div class="line">  about: user     #添加这一行</div><div class="line">  categories: th</div><div class="line">  books: book</div><div class="line">  travel: plane</div><div class="line">  tags: tags</div><div class="line">  archives: archive</div><div class="line">  commonweal: heartbeat</div><div class="line">  message: comment #添加这一行</div></pre></td></tr></table></figure></p>
<p>添加我们需要的阅读、旅行两个项目。<br>然后配置项目的图标，可以参考<a href="http://fontawesome.io/icons/" target="_blank" rel="external">http://fontawesome.io/icons/</a></p>
<h3 id="Step4-生成"><a href="#Step4-生成" class="headerlink" title="Step4 生成"></a>Step4 生成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure>
<p>我们看到，生成了关于、评论的页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/public/about/index.html</div><div class="line">/public/message/index.html</div></pre></td></tr></table></figure></p>
<h2 id="添加阅读、旅行项目"><a href="#添加阅读、旅行项目" class="headerlink" title="添加阅读、旅行项目"></a>添加阅读、旅行项目</h2><p>阅读、旅行这两个项目实际上是利用了hexo主题的categories分类功能。</p>
<h3 id="Step1-模板添加分类categories"><a href="#Step1-模板添加分类categories" class="headerlink" title="Step1  模板添加分类categories"></a>Step1  模板添加分类categories</h3><p>打开<code>./scaffolds/post.md</code>添加一行<code>categories:</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line">tags:</div><div class="line">categories:</div><div class="line">comments: true</div><div class="line">---</div></pre></td></tr></table></figure></p>
<h3 id="Step2-把分类添加到侧边栏中"><a href="#Step2-把分类添加到侧边栏中" class="headerlink" title="Step2 把分类添加到侧边栏中"></a>Step2 把分类添加到侧边栏中</h3><p>打开主题配置文件<code>./themes/next/_config.yml</code>，可以看到侧边栏Menu Settings有两项：<br>第一项是menu，控制侧边栏显示的项目；<br>第二项是menu_icons，控制显示项目的图标；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  books: /categories/阅读</div><div class="line">  travel: /categories/旅行</div><div class="line">  archives: /archives</div><div class="line">  tags: /tags</div><div class="line">  message: /message</div><div class="line">  about: /about</div><div class="line"></div><div class="line">menu_icons:</div><div class="line">  enable: true</div><div class="line">  home: home</div><div class="line">  about: user</div><div class="line">  categories: th</div><div class="line">  books: book</div><div class="line">  travel: plane</div><div class="line">  tags: tags</div><div class="line">  archives: archive</div><div class="line">  commonweal: heartbeat</div><div class="line">  message: comment</div></pre></td></tr></table></figure></p>
<p>添加我们需要的阅读、旅行两个项目。<br>然后配置项目的图标，可以参考<a href="http://fontawesome.io/icons/" target="_blank" rel="external">http://fontawesome.io/icons/</a></p>
<h3 id="Step3-新建文章"><a href="#Step3-新建文章" class="headerlink" title="Step3 新建文章"></a>Step3 新建文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo new &quot;我推荐的编程书籍&quot;</div><div class="line">INFO  Created: ~/blog/source/_posts/我推荐的编程书籍.md</div><div class="line">$ vim ./source/_posts/我推荐的编程书籍.md</div></pre></td></tr></table></figure>
<p>新建的文章自动添加了categories标签。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 我推荐的编程书籍</div><div class="line">comments: true</div><div class="line">date: 2016-10-04 11:19:10</div><div class="line">tags: 阅读</div><div class="line">categories:</div><div class="line">---</div><div class="line">## 《代码大全》 Code Complete</div><div class="line">。。。该书籍的介绍。。。</div></pre></td></tr></table></figure></p>
<h3 id="Step4-生成-1"><a href="#Step4-生成-1" class="headerlink" title="Step4 生成"></a>Step4 生成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure>
<p>我们看到，生成了书籍分类的页面index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/home/yshen/blog/public/categories/书籍/index.html</div></pre></td></tr></table></figure></p>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>最后，看一下最终效果：<br><img src="http://static.zybuluo.com/shenyuflying/nsteo6fk5y9ss50gz1z22gny/side_bar.png" alt="效果图"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wget下载网站供离线浏览]]></title>
      <url>http://shenyu.wiki/2016/10/02/wget%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%AB%99%E4%BE%9B%E7%A6%BB%E7%BA%BF%E6%B5%8F%E8%A7%88/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我们经常使用wget命令来下载文件，那么能不能使用wget来下载整个网站呢？</p>
</blockquote>
<p>看wget的man说明，可以发现wget有几个特点：</p>
<ol>
<li>非交互式，可以工作在后台。</li>
<li>可以追踪html中的链接，在下载过程中把连接自动转换为本地路径，从而创建本地网站镜像。</li>
<li>健壮性高，在失败之后会不断尝试，支持断线重连。</li>
</ol>
<p>发现wget果然强大，有网站下载这个功能，而且还可以控制网站下载的方式，下面就是wget进行网站下载的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ wget \</div><div class="line">     --recursive \</div><div class="line">     --no-clobber \</div><div class="line">     --page-requisites \</div><div class="line">     --html-extension \</div><div class="line">     --convert-links \</div><div class="line">     --restrict-file-names=windows \</div><div class="line">     --domains shenyu.wiki \</div><div class="line">     --no-parent \</div><div class="line">         shenyu.wiki</div></pre></td></tr></table></figure>
<p>上面的命令会下载 <a href="http://www.shenyu.wiki" target="_blank" rel="external">http://www.shenyu.wiki</a> 下面所有的页面。</p>
<p>上面用到的wget网站下载选择解释：</p>
<pre><code>--recursive: 下载整个网站
--domains shenyu.wiki: 不要下载指定域名之外的网页。
--no-parent: 仅仅下载当前目录结构下的文件。
--page-requisites: 现在网页包括的所有内容(images, CSS and so on).
--html-extension: 将网页保存为html文件。
--convert-links: 将连接转换为本地连接
--restrict-file-names=unix: 文件名保存为unix格式,如果是要保存windows格式的，这里写成windows
--no-clobber: 不要覆盖已有文件，在下载中断后继续下载。
</code></pre><p>下载完成之后，生成了<code>shenyu.wiki</code>文件夹，进去可以看到该网站的内容都下载好了。可以打开index.html文件来离线浏览网站。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ ll</div><div class="line">total 220</div><div class="line">drwxr-xr-x 6 yshen yshen   4096 10月  2 16:41 ./</div><div class="line">drwxr-xr-x 3 yshen yshen   4096 10月  2 16:41 ../</div><div class="line">drwxr-xr-x 4 yshen yshen   4096 10月  2 16:41 2016/</div><div class="line">-rw-r--r-- 1 yshen yshen  21632 10月  2 13:08 about.html</div><div class="line">-rw-r--r-- 1 yshen yshen  27364 10月  2 13:08 archives.html</div><div class="line">drwxr-xr-x 2 yshen yshen   4096 10月  2 16:41 css/</div><div class="line">-rw-r--r-- 1 yshen yshen 101642 10月  2 13:08 index.html</div><div class="line">-rw-r--r-- 1 yshen yshen  19836 10月  2 13:08 message.html</div><div class="line">-rw-r--r-- 1 yshen yshen  20598 10月  2 13:08 tags.html</div><div class="line">drwxr-xr-x 2 yshen yshen   4096 10月  2 16:41 uploads/</div><div class="line">drwxr-xr-x 4 yshen yshen   4096 10月  2 16:41 vendors/</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[二进制文件 十六进制文件 互转]]></title>
      <url>http://shenyu.wiki/2016/10/02/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6-%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6-%E4%BA%92%E8%BD%AC/</url>
      <content type="html"><![CDATA[<blockquote>
<p>二进制文件用文本方式打开之后都是乱码，如何把二进制转为十六进制呢？如下一个小程序实现了二进制和十六进制相互转换。转换为十六进制之后就可以以0-9，a-f显示出来，方便阅读和以字符串形式发送。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># 编译</div><div class="line">$ gcc c2bs.c -o c2bs</div><div class="line"></div><div class="line"># 帮助</div><div class="line">$ ./c2bs2</div><div class="line">convert to binary or strings.</div><div class="line">will read from stdin and write to stdout</div><div class="line">usage: ./c2bs2 [options]</div><div class="line">[options]</div><div class="line">    -b convert to binary</div><div class="line">    -s convert to string</div><div class="line"></div><div class="line"># 二进制可执行文件转16进制字符串</div><div class="line">$ cat ./c2bs | ./c2bs -c &gt; c2bs.hex </div><div class="line">$ head c2bs.hex</div><div class="line">7f454c4602010100000000000000000002003e000100000020064000000000004000000000000000a0110000000000000000000040003800090040001e001b000600000005000000400000000000000040004000000000004000400000000000f801000000000000f8010000000...</div><div class="line"></div><div class="line"># 十六进制字符串再转回到二进制</div><div class="line">$ cat ./c2bs.hex | ./c2bs -b &gt; c2bs</div></pre></td></tr></table></figure>
<p> 源码如下，需要注意的是，都用了不带符号的unsigned char类型，这个很关键，想想为什么？</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> in;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> talbe[<span class="string">'f'</span>+<span class="number">1</span>];</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> in_2[<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (argc == <span class="number">1</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"convert to binary or strings.\n"</span>);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"will read from stdin and write to stdout\n"</span>);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"usage: %s [options]\n"</span></div><div class="line">			<span class="string">"[options]\n"</span></div><div class="line">			<span class="string">"    -b convert to binary\n"</span></div><div class="line">			<span class="string">"    -s convert to string\n"</span>,argv[<span class="number">0</span>]);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">switch</span>(argv[<span class="number">1</span>][<span class="number">1</span>])</div><div class="line">	&#123;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> <span class="string">'s'</span>:</div><div class="line">			<span class="keyword">while</span>( fread(&amp;in,<span class="keyword">sizeof</span>(<span class="keyword">char</span>),<span class="number">1</span>,<span class="built_in">stdin</span>) &gt; <span class="number">0</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">"%02x"</span>,in);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		<span class="keyword">break</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">case</span> <span class="string">'b'</span>:</div><div class="line"></div><div class="line">			talbe[<span class="string">'0'</span>]=<span class="number">0</span>;	</div><div class="line">			talbe[<span class="string">'1'</span>]=<span class="number">1</span>;	</div><div class="line">			talbe[<span class="string">'2'</span>]=<span class="number">2</span>;	</div><div class="line">			talbe[<span class="string">'3'</span>]=<span class="number">3</span>;	</div><div class="line">			talbe[<span class="string">'4'</span>]=<span class="number">4</span>;	</div><div class="line">			talbe[<span class="string">'5'</span>]=<span class="number">5</span>;	</div><div class="line">			talbe[<span class="string">'6'</span>]=<span class="number">6</span>;	</div><div class="line">			talbe[<span class="string">'7'</span>]=<span class="number">7</span>;	</div><div class="line">			talbe[<span class="string">'8'</span>]=<span class="number">8</span>;	</div><div class="line">			talbe[<span class="string">'9'</span>]=<span class="number">9</span>;	</div><div class="line">			talbe[<span class="string">'a'</span>]=<span class="number">10</span>;	</div><div class="line">			talbe[<span class="string">'b'</span>]=<span class="number">11</span>;	</div><div class="line">			talbe[<span class="string">'c'</span>]=<span class="number">12</span>;	</div><div class="line">			talbe[<span class="string">'d'</span>]=<span class="number">13</span>;	</div><div class="line">			talbe[<span class="string">'e'</span>]=<span class="number">14</span>;	</div><div class="line">			talbe[<span class="string">'f'</span>]=<span class="number">15</span>;	</div><div class="line">			<span class="keyword">while</span>( fread(in_2,<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">2</span>,<span class="number">1</span>,<span class="built_in">stdin</span>) &gt; <span class="number">0</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">unsigned</span> <span class="keyword">char</span> out;</div><div class="line">				out = <span class="number">16</span>*talbe[in_2[<span class="number">0</span>]] + talbe[in_2[<span class="number">1</span>]]; </div><div class="line">				<span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">"%c"</span>,out);</div><div class="line">			&#125;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"unknown parameter %s"</span>,argv[<span class="number">1</span>]);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL count(*) 优化]]></title>
      <url>http://shenyu.wiki/2016/10/02/PostgreSQL-count-%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>在PostgreSQL数据库中，count(<em>)默认是全表扫描，那么对于数据量很大的表，因为需要把表的所有页面读入到内存，需要较多IO，耗费的时间很长。在很多应用中，需要频繁的count(</em>)来统计行数，那么在此类应用中如何优化count(*)的效率呢？</p>
<h2 id="建立一个表"><a href="#建立一个表" class="headerlink" title="建立一个表"></a>建立一个表</h2><p>我们先建立一个100万行的表，来做实验。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">postgres=# create table tb ( a int, b text);</div><div class="line">CREATE TABLE</div><div class="line">postgres=# insert into tb values ( generate_series(1,1000000), 'xxxxxx');</div><div class="line">INSERT 0 1000000</div><div class="line">postgres=# select count(*) from tb;</div><div class="line">  count  </div><div class="line">---------</div><div class="line"> 1000000</div><div class="line">(1 row)</div><div class="line">Time: 652.431 ms</div></pre></td></tr></table></figure>
<p>实际执行下来，花费时间是652ms<br>下面我们来看一下执行计划</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">postgres=# explain select count(*) from tb;</div><div class="line">                            QUERY PLAN                            </div><div class="line">------------------------------------------------------------------</div><div class="line"> Aggregate  (cost=17906.00..17906.01 rows=1 width=0)</div><div class="line">   -&gt;  Seq Scan on tb  (cost=0.00..15406.00 rows=1000000 width=0)</div><div class="line">(2 rows)</div></pre></td></tr></table></figure>
<p>可以看到，count(*)是采用顺序扫描的执行计划。</p>
<h2 id="analyze会不会有改善？"><a href="#analyze会不会有改善？" class="headerlink" title="analyze会不会有改善？"></a>analyze会不会有改善？</h2><p>那么analyze会不会起作用呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">postgres=# analyze tb;</div><div class="line">ANALYZE</div><div class="line">Time: 201.853 ms</div><div class="line">postgres=# select count(*) from tb;</div><div class="line">  count  </div><div class="line">---------</div><div class="line"> 1000000</div><div class="line">(1 row)</div><div class="line">Time: 649.252 ms</div></pre></td></tr></table></figure>
<p>可以看到analyze基本没什么作用。</p>
<h2 id="主键会不会有改善？"><a href="#主键会不会有改善？" class="headerlink" title="主键会不会有改善？"></a>主键会不会有改善？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">postgres=# alter table tb add  primary key(a);</div><div class="line">ALTER TABLE</div><div class="line">Time: 2353.671 ms</div><div class="line">postgres=# select count(*) from tb;</div><div class="line">  count  </div><div class="line">---------</div><div class="line"> 1000000</div><div class="line">(1 row)</div><div class="line"></div><div class="line">Time: 654.886 ms</div><div class="line">postgres=# alter table tb add  primary key(a);</div><div class="line">ERROR:  multiple primary keys for table &quot;tb&quot; are not allowed</div><div class="line">Time: 1.603 ms</div><div class="line">postgres=# explain select count(*) from tb;</div><div class="line">                            QUERY PLAN                            </div><div class="line">------------------------------------------------------------------</div><div class="line"> Aggregate  (cost=17906.00..17906.01 rows=1 width=0)</div><div class="line">   -&gt;  Seq Scan on tb  (cost=0.00..15406.00 rows=1000000 width=0)</div><div class="line">(2 rows)</div><div class="line"></div><div class="line">Time: 1.246 ms</div></pre></td></tr></table></figure>
<p>可以看到，加了索引之后还是在走顺序扫描，时间没有什么改善。</p>
<h2 id="索引会不会有改善？"><a href="#索引会不会有改善？" class="headerlink" title="索引会不会有改善？"></a>索引会不会有改善？</h2><p>那么建立一个索引有没有作用？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">postgres=# create index tb_idx on tb(a);</div><div class="line">CREATE INDEX</div><div class="line">Time: 2009.193 ms</div><div class="line">postgres=# select count(*) from tb;</div><div class="line">  count  </div><div class="line">---------</div><div class="line"> 1000000</div><div class="line">(1 row)</div><div class="line"></div><div class="line">Time: 654.997 ms</div><div class="line">postgres=# explain select count(*) from tb;</div><div class="line">                            QUERY PLAN                            </div><div class="line">------------------------------------------------------------------</div><div class="line"> Aggregate  (cost=17906.00..17906.01 rows=1 width=0)</div><div class="line">   -&gt;  Seq Scan on tb  (cost=0.00..15406.00 rows=1000000 width=0)</div><div class="line">(2 rows)</div></pre></td></tr></table></figure>
<p>可以看到，建立了索引之后，时间依然没有明显改善，查看执行计划，可以看到依然是走的顺序扫描。<br>为什么不走索引呢？我们把顺序扫描关闭之后。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">postgres=# set enable_seqscan = off;</div><div class="line">SET</div><div class="line">postgres=# explain (analyze,buffers) select count(*) from tb;</div><div class="line">                              QUERY PLAN                     </div><div class="line">                                           </div><div class="line">----------------------------------------------------------------------</div><div class="line"> Aggregate  (cost=33889.43..33889.44 rows=1 width=0) (actual time=1968.386..1968.387 rows=1 loo</div><div class="line">ps=1)</div><div class="line">   Buffers: shared hit=8141</div><div class="line">   -&gt;  Index Only Scan using tb_pkey on tb  (cost=0.42..31389.42 rows=1000000 width=0) (actual </div><div class="line">time=0.073..1542.385 rows=1000000 loops=1)</div><div class="line">         Heap Fetches: 1000000</div><div class="line">         Buffers: shared hit=8141</div><div class="line"> Planning time: 0.203 ms</div><div class="line"> Execution time: 1968.514 ms</div><div class="line">(7 rows)</div><div class="line">Time: 1969.929 ms</div></pre></td></tr></table></figure></p>
<p>顺序扫描之后看到时间反而变多了！查看执行计划可以看到，用的是Index Only Scan，读取到的页面是8141，而且还要读Heap上的100万条数据来查看事务信息，所以在该例子中采用索引扫描并不能有多大提升。</p>
<h2 id="优化方法——建触发器"><a href="#优化方法——建触发器" class="headerlink" title="优化方法——建触发器"></a>优化方法——建触发器</h2><p>如果这个表更新不那么频繁，可以建一个表用来缓存count的结果，再建一个触发器来更新缓存表。查的时候，查缓存count的那个表。<br>举个例子：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--建立count缓存表</span></div><div class="line"> <span class="keyword">create</span> <span class="keyword">table</span> tb_count(<span class="keyword">col</span> <span class="built_in">int</span>);</div><div class="line"><span class="comment">--初始化count缓存表</span></div><div class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> tb_count ( <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb);</div><div class="line"><span class="comment">--创建更新函数</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> tb_func()  <span class="keyword">RETURNS</span> <span class="keyword">TRIGGER</span> <span class="keyword">AS</span> $$</div><div class="line">        <span class="keyword">BEGIN</span></div><div class="line">                <span class="keyword">update</span>  tb_count  <span class="keyword">set</span> <span class="keyword">col</span> = <span class="keyword">col</span> + <span class="number">1</span>;</div><div class="line">                RETURN null;</div><div class="line">        <span class="keyword">END</span>;</div><div class="line">$$ LANGUAGE plpgsql; </div><div class="line"><span class="comment">--创建触发器</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> tb_insert</div><div class="line">    <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> tb</div><div class="line">    <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></div><div class="line">    <span class="keyword">EXECUTE</span> <span class="keyword">PROCEDURE</span> tb_func();</div><div class="line">    </div><div class="line"><span class="comment">--类似的创建对于如下2个的触发器</span></div><div class="line">    <span class="keyword">DELETE</span></div><div class="line">    <span class="keyword">TRUNCATE</span></div></pre></td></tr></table></figure>
<p>下面我们来看一下，优化之后的效率：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">postgres=# select count(*) from tb;</div><div class="line">  count  </div><div class="line">---------</div><div class="line"> 1000001</div><div class="line">(1 row)</div><div class="line"></div><div class="line">Time: 898.974 ms</div><div class="line">postgres=# select * from tb_count;</div><div class="line">   col   </div><div class="line">---------</div><div class="line"> 1000001</div><div class="line">(1 row)</div><div class="line"></div><div class="line">Time: 2.463 ms</div><div class="line">postgres=#</div></pre></td></tr></table></figure>
<p>可以看到，优化之后时间从原来的898ms降低为2ms。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Here Document]]></title>
      <url>http://shenyu.wiki/2016/10/02/Here-Document/</url>
      <content type="html"><![CDATA[<p>我们经常需要在shell中新建文件并输入内容，通常的做法有2种。<br>第一种： 用vim打开一个文件，输入内容，保存并退出。<br>第二种： 用echo输出重定向：echo “hello world” &gt; a.out。<br>但是这两种方法都有一定弊端，比如第一种无法在shell脚本里面实现往文件中输入内容。第二种，无法输入多行内容。<br>如果我们需要在shell脚本中对文件中输入多行内容，这时候我们Here Document就派上用场了。</p>
<h2 id="什么是Here-Document"><a href="#什么是Here-Document" class="headerlink" title="什么是Here Document?"></a>什么是Here Document?</h2><p>Here Document 是在Linux Shell 中的一种特殊的重定向方式，它的基本的形式如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cmd &lt;&lt; delimiter</div><div class="line">  Here Document Content</div><div class="line">delimiter</div></pre></td></tr></table></figure></p>
<p>它的作用就是将两个 delimiter 之间的内容(Here Document Content 部分) 传递给cmd 作为输入参数。</p>
<h2 id="在shell脚本中对文件输入多行内容"><a href="#在shell脚本中对文件输入多行内容" class="headerlink" title="在shell脚本中对文件输入多行内容"></a>在shell脚本中对文件输入多行内容</h2><p>基本方法是用here document把输入重定向给cat然后输出重定向到a.out文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">yshen@yshen-ThinkPad-X201 ~ $ cat &lt;&lt;EOF &gt; a.out</div><div class="line">&gt; this is line1</div><div class="line">&gt; this is line2</div><div class="line">&gt; this is line3</div><div class="line">&gt; ...</div><div class="line">&gt; this is lineN</div><div class="line">&gt; EOF</div><div class="line">yshen@yshen-ThinkPad-X201 ~ $ cat a.out </div><div class="line">this is line1</div><div class="line">this is line2</div><div class="line">this is line3</div><div class="line">...</div><div class="line">this is lineN</div></pre></td></tr></table></figure></p>
<p>这样，我们就使用Here Document在shell脚本中完成了多行文本的输入。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[贪吃蛇-基于SDL]]></title>
      <url>http://shenyu.wiki/2016/09/17/%E8%B4%AA%E5%90%83%E8%9B%87-%E5%9F%BA%E4%BA%8ESDL/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>贪吃蛇不用多说了吧，就是一条蛇吃水果，吃一个他的长度就加１。</p>
<h2 id="无图无真相"><a href="#无图无真相" class="headerlink" title="无图无真相"></a>无图无真相</h2><p><img src="/uploads/snake.png" alt="tup"></p>
<p>目前只是先实现了基本的功能，移动，长度加１。还没有实现碰撞检测的功能。</p>
<a id="more"></a>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL2/SDL.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL2/SDL_image.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> bool int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> true 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> false 0</span></div><div class="line"></div><div class="line"><span class="comment">//Screen dimension constants</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SCREEN_WIDTH   640</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SCREEN_HEIGHT   480</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BOX_SIZE   20</span></div><div class="line"></div><div class="line"><span class="comment">//the map grid</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BOX_WIDTH SCREEN_WIDTH/BOX_SIZE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BOX_HEIGHT   SCREEN_HEIGHT/BOX_SIZE</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="number">_</span>game &#123;</div><div class="line">	<span class="keyword">bool</span> (*init) (<span class="keyword">struct</span> <span class="number">_</span>game * self);</div><div class="line">	<span class="keyword">bool</span> (*handle_events)(<span class="keyword">struct</span> <span class="number">_</span>game * self);</div><div class="line">	<span class="keyword">bool</span> (*update)(<span class="keyword">struct</span> <span class="number">_</span>game * self);</div><div class="line">	<span class="keyword">bool</span> (*render)(<span class="keyword">struct</span> <span class="number">_</span>game * self);</div><div class="line">	<span class="keyword">bool</span> (*close)(<span class="keyword">struct</span> <span class="number">_</span>game * self);</div><div class="line"></div><div class="line">	<span class="comment">//The window we'll be rendering to</span></div><div class="line">	SDL_Window* gWindow;</div><div class="line"></div><div class="line">	<span class="comment">//The window renderer</span></div><div class="line">	SDL_Renderer* gRenderer;</div><div class="line"></div><div class="line">	<span class="comment">//Event handler</span></div><div class="line">	SDL_Event e;</div><div class="line"></div><div class="line">	<span class="comment">//if want to quit</span></div><div class="line">	<span class="keyword">bool</span> quit;</div><div class="line"></div><div class="line">	<span class="comment">//if key pressed and need update the screen</span></div><div class="line">	<span class="keyword">bool</span> need_update;</div><div class="line"></div><div class="line">	<span class="comment">// use to draw a snake</span></div><div class="line">	<span class="keyword">int</span> path[BOX_WIDTH][BOX_HEIGHT];</div><div class="line">	<span class="keyword">int</span> head_x,head_y;</div><div class="line">	<span class="keyword">int</span> tail_x,tail_y;</div><div class="line"></div><div class="line">	<span class="comment">// use to draw the fruit</span></div><div class="line">	<span class="keyword">int</span> fruit_x,fruit_y;</div><div class="line">	<span class="keyword">int</span> fruit_need_update;</div><div class="line"></div><div class="line">	<span class="comment">// counter for each node used to find the tail</span></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> counter;</div><div class="line">	</div><div class="line">&#125; GameData, * Game;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="number">_</span>color &#123;</div><div class="line">	Uint8 r;</div><div class="line">	Uint8 g;</div><div class="line">	Uint8 b;</div><div class="line">	Uint8 a;</div><div class="line">&#125; Color;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">init</span><span class="params">(<span class="keyword">struct</span> <span class="number">_</span>game * self)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">handle_events</span><span class="params">(<span class="keyword">struct</span> <span class="number">_</span>game * self)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">update</span><span class="params">(<span class="keyword">struct</span> <span class="number">_</span>game * self)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">render</span><span class="params">(<span class="keyword">struct</span> <span class="number">_</span>game * self)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">render_draw_solid_rec</span><span class="params">(Game self,<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w, <span class="keyword">int</span> h, Color c)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">render_draw_empty_rec</span><span class="params">(Game self,<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w, <span class="keyword">int</span> h, Color c)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">render_draw_line</span><span class="params">(Game self,<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, Color c)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">close</span><span class="params">(<span class="keyword">struct</span> <span class="number">_</span>game * self)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">get_count</span><span class="params">(<span class="keyword">struct</span> <span class="number">_</span>game *self)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> self-&gt;counter++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> newGame(game)\</span></div><div class="line">	(Game) malloc(sizeof(GameData)); \</div><div class="line">	game-&gt;init=init;\</div><div class="line">	game-&gt;handle_events=handle_events;\</div><div class="line">	game-&gt;update=update;\</div><div class="line">	game-&gt;render=render;\</div><div class="line">	game-&gt;close=close;\</div><div class="line">	game-&gt;gWindow=NULL;\</div><div class="line">	game-&gt;gRenderer=NULL;\</div><div class="line">	game-&gt;quit=false;\</div><div class="line">	game-&gt;need_update=false;\</div><div class="line">	game-&gt;length=3;\</div><div class="line">	memset(game-&gt;path,0,sizeof(game-&gt;path));\</div><div class="line">	game-&gt;counter=1;\</div><div class="line">	game-&gt;path[10][11]=get_count(game);\</div><div class="line">	game-&gt;path[10][12]=get_count(game);\</div><div class="line">	game-&gt;head_x=10;game-&gt;head_y=12;\</div><div class="line">	game-&gt;tail_x=10;game-&gt;tail_y=11;\</div><div class="line">	game-&gt;fruit_x=rand()%BOX_WIDTH;game-&gt;fruit_y=rand()%BOX_HEIGHT;\</div><div class="line">	game-&gt;fruit_need_update=false;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> have_fruit()\</span></div><div class="line">	(self-&gt;fruit_x!=-1 &amp;&amp; self-&gt;fruit_y!=-1)</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fruit_need_update()\</span></div><div class="line">	(self-&gt;fruit_need_update)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">init</span><span class="params">(Game self)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//Initialization flag</span></div><div class="line">	<span class="keyword">bool</span> success = <span class="literal">true</span>;</div><div class="line"></div><div class="line">	<span class="comment">//Initialize SDL</span></div><div class="line">	<span class="keyword">if</span>( SDL_Init( SDL_INIT_VIDEO ) &lt; <span class="number">0</span> )</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>( <span class="string">"SDL could not initialize! SDL Error: %s\n"</span>, SDL_GetError() );</div><div class="line">		success = <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">//Set texture filtering to linear</span></div><div class="line">		<span class="keyword">if</span>( !SDL_SetHint( SDL_HINT_RENDER_SCALE_QUALITY, <span class="string">"1"</span> ) )</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>( <span class="string">"Warning: Linear texture filtering not enabled!"</span> );</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//Create window</span></div><div class="line">		self-&gt;gWindow = SDL_CreateWindow( <span class="string">"Snake"</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );</div><div class="line">		<span class="keyword">if</span>( self-&gt;gWindow == <span class="literal">NULL</span> )</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>( <span class="string">"Window could not be created! SDL Error: %s\n"</span>, SDL_GetError() );</div><div class="line">			success = <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="comment">//Create renderer for window</span></div><div class="line">			self-&gt;gRenderer = SDL_CreateRenderer( self-&gt;gWindow, <span class="number">-1</span>, SDL_RENDERER_ACCELERATED );</div><div class="line">			<span class="keyword">if</span>(self-&gt;gRenderer == <span class="literal">NULL</span> )</div><div class="line">			&#123;</div><div class="line">				<span class="built_in">printf</span>( <span class="string">"Renderer could not be created! SDL Error: %s\n"</span>, SDL_GetError() );</div><div class="line">				success = <span class="literal">false</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				<span class="comment">//Initialize renderer color</span></div><div class="line">				SDL_SetRenderDrawColor( self-&gt;gRenderer, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span> );</div><div class="line"></div><div class="line">				<span class="comment">//Initialize PNG loading</span></div><div class="line">				<span class="keyword">int</span> imgFlags = IMG_INIT_PNG;</div><div class="line">				<span class="keyword">if</span>( !( IMG_Init( imgFlags ) &amp; imgFlags ) )</div><div class="line">				&#123;</div><div class="line">					<span class="built_in">printf</span>( <span class="string">"SDL_image could not initialize! SDL_image Error: %s\n"</span>, IMG_GetError() );</div><div class="line">					success = <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> success;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">handle_events</span><span class="params">(Game self)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="comment">//Handle events on queue</span></div><div class="line">	<span class="keyword">while</span>( SDL_PollEvent( &amp;(self-&gt;e) ) != <span class="number">0</span> )</div><div class="line">	&#123;</div><div class="line">		<span class="comment">//User requests quit</span></div><div class="line">		<span class="keyword">if</span>( self-&gt;e.type == SDL_QUIT )</div><div class="line">		&#123;</div><div class="line">			self-&gt;quit = <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//User presses a key</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( self-&gt;e.type == SDL_KEYDOWN )</div><div class="line">        &#123;</div><div class="line">			<span class="comment">//Select surfaces based on key press</span></div><div class="line">            <span class="keyword">switch</span>( self-&gt;e.key.keysym.sym )</div><div class="line">             &#123;</div><div class="line">                  <span class="keyword">case</span> SDLK_UP:</div><div class="line">				  	<span class="keyword">if</span> (self-&gt;head_y<span class="number">-1</span>!=<span class="number">-1</span>&amp;&amp; !self-&gt;path[self-&gt;head_x][self-&gt;head_y<span class="number">-1</span>])</div><div class="line">				  	&#123;</div><div class="line">		                self-&gt;head_y--;	</div><div class="line">						self-&gt;need_update=<span class="literal">true</span>;</div><div class="line">				  	&#125;</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                  <span class="keyword">case</span> SDLK_DOWN:</div><div class="line">				  	<span class="keyword">if</span> (self-&gt;head_y+<span class="number">1</span>!=BOX_HEIGHT &amp;&amp; !self-&gt;path[self-&gt;head_x][self-&gt;head_y+<span class="number">1</span>])</div><div class="line">				  	&#123;				  	</div><div class="line">	                 	self-&gt;head_y++;</div><div class="line">						self-&gt;need_update=<span class="literal">true</span>;</div><div class="line">			  		&#125;</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                  <span class="keyword">case</span> SDLK_LEFT:</div><div class="line">				  	<span class="keyword">if</span> (self-&gt;head_x<span class="number">-1</span>!=<span class="number">-1</span> &amp;&amp; !self-&gt;path[self-&gt;head_x<span class="number">-1</span>][self-&gt;head_y])</div><div class="line">				  	&#123;	</div><div class="line">						self-&gt;head_x--;	</div><div class="line">						self-&gt;need_update=<span class="literal">true</span>;</div><div class="line">				  	&#125;</div><div class="line">				  <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                  <span class="keyword">case</span> SDLK_RIGHT:</div><div class="line">				  	<span class="keyword">if</span> (self-&gt;head_x+<span class="number">1</span>!=BOX_WIDTH &amp;&amp; !self-&gt;path[self-&gt;head_x+<span class="number">1</span>][self-&gt;head_y])</div><div class="line">				  	&#123;	</div><div class="line">	                     self-&gt;head_x++;</div><div class="line">						 self-&gt;need_update=<span class="literal">true</span>;</div><div class="line">				  	&#125;</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line"></div><div class="line">              &#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">update</span><span class="params">(Game self)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i,j;</div><div class="line">	<span class="keyword">if</span>(self-&gt;need_update)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">// the head always have the biggest number</span></div><div class="line">		self-&gt;path[self-&gt;head_x][self-&gt;head_y]=get_count(self);</div><div class="line"></div><div class="line">		<span class="comment">// if head reach fruit, tail don't move</span></div><div class="line">		<span class="keyword">if</span> (self-&gt;head_x == self-&gt;fruit_x &amp;&amp; self-&gt;head_y == self-&gt;fruit_y)</div><div class="line">		&#123;</div><div class="line">			self-&gt;fruit_need_update = <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="comment">//the head missed fruit, need move</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">unsigned</span> <span class="keyword">int</span> max;</div><div class="line">			<span class="comment">//mark the tail as invisible</span></div><div class="line">			self-&gt;path[self-&gt;tail_x][self-&gt;tail_y]=<span class="number">0</span>;</div><div class="line"></div><div class="line">			<span class="comment">//find new tail, shall be min</span></div><div class="line">			max=self-&gt;path[self-&gt;head_x][self-&gt;head_y];</div><div class="line">			<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;BOX_WIDTH;i++)</div><div class="line">			<span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;BOX_HEIGHT;j++)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span> (self-&gt;path[i][j]!=<span class="number">0</span> &amp;&amp; self-&gt;path[i][j] &lt; max)</div><div class="line">				&#123;</div><div class="line">					self-&gt;tail_x=i;</div><div class="line">					self-&gt;tail_y=j;</div><div class="line">					max = self-&gt;path[i][j];</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		self-&gt;need_update=<span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (have_fruit()&amp;&amp;fruit_need_update())</div><div class="line">	&#123;</div><div class="line">		self-&gt;fruit_x=rand()%BOX_WIDTH;</div><div class="line">		self-&gt;fruit_y=rand()%BOX_HEIGHT;</div><div class="line">		self-&gt;fruit_need_update=<span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">render</span><span class="params">(Game self)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i,j;</div><div class="line">	</div><div class="line">	<span class="comment">//Clear screen</span></div><div class="line">	SDL_SetRenderDrawColor( self-&gt;gRenderer, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span> );</div><div class="line">	SDL_RenderClear( self-&gt;gRenderer );</div><div class="line"></div><div class="line">	<span class="comment">//do the drawing...</span></div><div class="line"></div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;BOX_WIDTH;i++)</div><div class="line">	<span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;BOX_HEIGHT;j++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (self-&gt;path[i][j])</div><div class="line">		&#123;</div><div class="line">			Color c = &#123;<span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFF</span> &#125;;</div><div class="line">			render_draw_solid_rec(self,i*BOX_SIZE,j*BOX_SIZE,BOX_SIZE,BOX_SIZE,c);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (have_fruit())</div><div class="line">	&#123;</div><div class="line">		Color c = &#123;<span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0xFF</span> &#125;;</div><div class="line">		render_draw_solid_rec(self,self-&gt;fruit_x*BOX_SIZE,self-&gt;fruit_y*BOX_SIZE,BOX_SIZE,BOX_SIZE,c);</div><div class="line">	&#125;</div><div class="line">		</div><div class="line">	SDL_RenderPresent( self-&gt;gRenderer );</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">close</span><span class="params">(Game self)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">render_draw_solid_rec</span><span class="params">(Game self,<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w, <span class="keyword">int</span> h, Color c)</span></span></div><div class="line">&#123;</div><div class="line">	SDL_Rect fillRect = &#123; x,y,w,h &#125;;</div><div class="line">	SDL_SetRenderDrawColor( self-&gt;gRenderer, c.r, c.g, c.b, c.a );		</div><div class="line">	SDL_RenderFillRect( self-&gt;gRenderer, &amp;fillRect );</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">render_draw_empty_rec</span><span class="params">(Game self,<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w, <span class="keyword">int</span> h, Color c)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//Render green outlined quad</span></div><div class="line">	SDL_Rect outlineRect = &#123; x,y,w,h&#125;;</div><div class="line">	SDL_SetRenderDrawColor( self-&gt;gRenderer, c.r, c.g, c.b, c.a );	</div><div class="line">	SDL_RenderDrawRect( self-&gt;gRenderer, &amp;outlineRect );</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">render_draw_line</span><span class="params">(Game self,<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, Color c)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//Draw blue horizontal line</span></div><div class="line">	SDL_SetRenderDrawColor( self-&gt;gRenderer, c.r, c.g, c.b, c.a );	</div><div class="line">	SDL_RenderDrawLine( self-&gt;gRenderer, x1,y1,x2,y2);</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">	Game  snake = newGame(snake) ;</div><div class="line"></div><div class="line">	snake-&gt;init(snake);</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(!snake-&gt;quit)</div><div class="line">	&#123;</div><div class="line">		snake-&gt;handle_events(snake);</div><div class="line">		snake-&gt;update(snake);</div><div class="line">		snake-&gt;render(snake);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[c语言转汇编语言shell脚本]]></title>
      <url>http://shenyu.wiki/2016/09/17/c%E8%AF%AD%E8%A8%80%E8%BD%AC%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80shell%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>最近在学习汇编，为了方便写了一个shell脚本，用来把c语言转换为汇编语言。很方便。</p>
<h2 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash  </div><div class="line">if [  &quot;$#&quot; = &quot;0&quot; ] ; then</div><div class="line">        echo &apos;help: c2asm FILENAME&apos;  </div><div class="line">        exit 1;</div><div class="line">fi</div><div class="line"></div><div class="line"></div><div class="line">if [ -f &quot;$1&quot; ] ; then</div><div class="line">        echo &apos;check file ok!&apos;  </div><div class="line">else</div><div class="line">        echo &apos;c2asm: file not exist&apos;  </div><div class="line">        exit 1;</div><div class="line">fi</div><div class="line">echo &apos;generating asm file...&apos;  </div><div class="line">gcc -O0 -S &quot;$1&quot;</div><div class="line">tmp=$1</div><div class="line">asmfile=$&#123;tmp%%.c&#125;.s;</div><div class="line"></div><div class="line">echo &quot;asm file generated: $asmfile&quot;  </div><div class="line">echo &apos;==================asm====================&apos;  </div><div class="line">cat &quot;$asmfile&quot; | grep -v &apos;\.&apos;</div><div class="line">echo &apos;==================c======================&apos;  </div><div class="line">cat &quot;$1&quot;</div><div class="line">echo &apos;==================END====================&apos;  </div><div class="line">echo &apos;done&apos;</div></pre></td></tr></table></figure>
<h2 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">check file ok!</div><div class="line">generating asm file...</div><div class="line">asm file generated: main.s</div><div class="line">==================asm====================</div><div class="line">main:</div><div class="line">	pushq	%rbp</div><div class="line">	movq	%rsp, %rbp</div><div class="line">	movl	$1, -8(%rbp)</div><div class="line">	movl	$1, -4(%rbp)</div><div class="line">	movl	-8(%rbp), %edx</div><div class="line">	movl	-4(%rbp), %eax</div><div class="line">	addl	%edx, %eax</div><div class="line">	popq	%rbp</div><div class="line">	ret</div><div class="line">==================c======================</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	int a,b;</div><div class="line">	a = 1;</div><div class="line">	b = 1;</div><div class="line">	return a+b;</div><div class="line"></div><div class="line">&#125;</div><div class="line">==================END====================</div><div class="line">done</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux shell聊天室]]></title>
      <url>http://shenyu.wiki/2016/09/17/linux-shell%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
      <content type="html"><![CDATA[<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>里程碑0：</p>
<p>1、基于C/S架构的聊天室，分为客户端和服务器。<br>2、客户端登陆时输入服务器IP、port、 昵称不能重复</p>
<p>里程碑1：</p>
<p>3、可以群发消息或指定接收人<br>4、admin账号可以踢人<br>5、新加入用户可以看到聊天历史记录</p>
<p>里程碑2：</p>
<p>5、可以互传文件<br>6、保存聊天信息</p>
<p>里程碑3：</p>
<p>7、第一次登录时，需要注册。</p>
<h2 id="技术设计"><a href="#技术设计" class="headerlink" title="技术设计"></a>技术设计</h2><p>1、在shell下的图形库：curses<br>2、多线程：pthread<br>3、网络：socket<br>4、消息结构：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> msg_st  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">char</span> name[<span class="number">256</span>];  </div><div class="line">    <span class="keyword">char</span> to[<span class="number">256</span>];  </div><div class="line">    <span class="keyword">char</span> data[<span class="number">4096</span>];  </div><div class="line">    <span class="keyword">char</span> cmd[<span class="number">256</span>];  </div><div class="line"><span class="comment">/*</span></div><div class="line"> * 其中，关于cmd内容：</div><div class="line"> * login 登陆</div><div class="line"> * offline 服务器即将踢人</div><div class="line"> * user 服务发送的用户列表，数据在data里</div><div class="line"> * chat 表示这是一条消息，数据在data里</div><div class="line"> */</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>5、服务器用了epoll来监听多个fd</p>
<h2 id="登陆界面"><a href="#登陆界面" class="headerlink" title="登陆界面"></a>登陆界面</h2><p><img src="http://img.blog.csdn.net/20141228204352953?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2hlbnl1Zmx5aW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="登陆界面"></p>
<h2 id="聊天界面"><a href="#聊天界面" class="headerlink" title="聊天界面"></a>聊天界面</h2><p><img src="http://img.blog.csdn.net/20141228193822585?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2hlbnl1Zmx5aW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="聊天界面"></p>
<a id="more"></a>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//client.c  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netdb.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/ioctl.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/select.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ncurses.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"shared_vals.h"</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"chat_net.h"</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"chat_ui.h"</span>  </span></div><div class="line">  </div><div class="line"><span class="keyword">char</span> promote[<span class="number">256</span>]= &#123;<span class="number">0</span>&#125;;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    ui_init();  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="keyword">do</span>  </div><div class="line">    &#123;  </div><div class="line">        ui_login(ip,&amp;port,name);  </div><div class="line">        <span class="keyword">if</span>(<span class="number">0</span>==net_login(ip,&amp;port,name))  </div><div class="line">        &#123;  </div><div class="line">            ui_alert(<span class="string">"Login ok!"</span>);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">        &#123;  </div><div class="line">            ui_alert(<span class="string">"Login failed!"</span>);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>);  </div><div class="line">  </div><div class="line">    ui_init_wins();  </div><div class="line">  </div><div class="line">    ui_refresh_wins();  </div><div class="line">    wprintw(win[<span class="number">1</span>],<span class="string">"IP:%s\nPORT:%d\nNAME:%s"</span>,ip,port,name);  </div><div class="line">    ui_refresh_wins();  </div><div class="line">  </div><div class="line"><span class="comment">//    int i=0;  </span></div><div class="line"><span class="comment">//    for(i=0; i&lt;100; i++)  </span></div><div class="line"><span class="comment">//        ui_print_msg("This is a test message!");  </span></div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="comment">//generate promote as [from] [to]  </span></div><div class="line">    <span class="built_in">sprintf</span>(promote,<span class="string">"[%s]:"</span>, name);  </div><div class="line">    <span class="comment">//start recev process  </span></div><div class="line">  </div><div class="line">    <span class="keyword">pthread_t</span> thread;  </div><div class="line">    <span class="keyword">int</span> res=pthread_create(&amp;thread,<span class="literal">NULL</span>,(<span class="keyword">void</span> *)net_getmsg,(<span class="keyword">void</span>*)<span class="literal">NULL</span>);  </div><div class="line">    <span class="keyword">if</span>(res!=<span class="number">0</span>)  </div><div class="line">    &#123;  </div><div class="line">          ui_alert(<span class="string">"Error"</span>);  </div><div class="line">          getch();  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)  </div><div class="line">    &#123;  </div><div class="line">        ui_promote(promote);  </div><div class="line">  </div><div class="line">        <span class="keyword">int</span> c=<span class="number">0</span>;  </div><div class="line">        <span class="keyword">struct</span> msg_st msg_client;  </div><div class="line">        <span class="built_in">memset</span>((<span class="keyword">void</span> *)&amp;msg_client,<span class="number">0</span>,<span class="keyword">sizeof</span>(msg_client));  </div><div class="line">        ui_getmsg(msg_client.data);  </div><div class="line">        <span class="built_in">strcpy</span>(msg_client.name,name);  </div><div class="line">        <span class="built_in">strcpy</span>(msg_client.cmd,<span class="string">"chat"</span>);  </div><div class="line">        write(sockfd,&amp;msg_client,<span class="keyword">sizeof</span>(msg_client));  </div><div class="line">  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    net_end();  </div><div class="line">    ui_end();  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//chat_net.h  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _CHAT_NET_H_  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CHAT_NET_H_  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netdb.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/ioctl.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/select.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ncurses.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"shared_vals.h"</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">"chat_ui.h"</span>  </span></div><div class="line"><span class="keyword">int</span> sockfd;  </div><div class="line"><span class="keyword">int</span> len;  </div><div class="line"><span class="keyword">struct</span> sockaddr_in address;  </div><div class="line"><span class="keyword">int</span> result;  </div><div class="line"><span class="keyword">char</span> ip[<span class="number">256</span>];  </div><div class="line"><span class="keyword">int</span>  port;  </div><div class="line"><span class="keyword">char</span> name[<span class="number">256</span>];  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">net_login</span><span class="params">(<span class="keyword">char</span> *ip,<span class="keyword">int</span> * port,<span class="keyword">char</span> *name)</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">  </div><div class="line">    sockfd=socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);  </div><div class="line">    address.sin_family=AF_INET;  </div><div class="line">    address.sin_addr.s_addr=inet_addr(<span class="string">"127.0.0.1"</span>);  </div><div class="line">    address.sin_port=htons(*port);  </div><div class="line">    len=<span class="keyword">sizeof</span>(address);  </div><div class="line">    result=connect(sockfd,(<span class="keyword">struct</span> sockaddr *)&amp;address,len);  </div><div class="line">    <span class="keyword">if</span>(result==<span class="number">-1</span>)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"ERROR:%s\n"</span>,strerror(errno));  </div><div class="line">        close(sockfd);  </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">struct</span> msg_st msg;  </div><div class="line">    <span class="built_in">memset</span>((<span class="keyword">void</span> *)&amp;msg,<span class="number">0</span>,<span class="keyword">sizeof</span>(msg));  </div><div class="line">    <span class="built_in">sprintf</span>(msg.cmd,<span class="string">"login"</span>);  </div><div class="line">    <span class="built_in">strcpy</span>(msg.name,name);  </div><div class="line">    <span class="comment">//  fgets(msg.name,256,stdin);  </span></div><div class="line">    <span class="comment">//printf("checking name [%s]...\n",msg.name);  </span></div><div class="line">    write(sockfd,&amp; msg,<span class="keyword">sizeof</span>( msg));  </div><div class="line">  </div><div class="line">    usleep(<span class="number">100000</span>);  </div><div class="line">    <span class="keyword">int</span> nread=<span class="number">0</span>;  </div><div class="line">    ioctl(sockfd,FIONREAD,&amp;nread);  </div><div class="line">    <span class="keyword">if</span>(nread!=<span class="number">0</span>)  </div><div class="line">    &#123;  </div><div class="line">        read(sockfd,&amp;msg,<span class="keyword">sizeof</span>(msg));  </div><div class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">"ok"</span>,msg.data)==<span class="number">0</span>)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//login ok  </span></div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">        &#123;  </div><div class="line">  </div><div class="line">            <span class="comment">// printf("Login failed!\n");  </span></div><div class="line">            close(sockfd);  </div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//login failed  </span></div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line"><span class="comment">//   printf("Login failed!\n");  </span></div><div class="line">    close(sockfd);  </div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//login failed  </span></div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">net_getmsg</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)  </div><div class="line">    &#123;  </div><div class="line">        usleep(<span class="number">100000</span>);  </div><div class="line">        <span class="keyword">int</span> nread=<span class="number">0</span>;  </div><div class="line">        ioctl(sockfd,FIONREAD,&amp;nread);  </div><div class="line">        <span class="keyword">if</span>(nread!=<span class="number">0</span>)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">struct</span> msg_st msg_read;  </div><div class="line">            read(sockfd,&amp;msg_read,<span class="keyword">sizeof</span>(msg_read));  </div><div class="line">            <span class="keyword">if</span>(<span class="built_in">strncmp</span>(msg_read.cmd,<span class="string">"chat"</span>,<span class="number">4</span>)==<span class="number">0</span>)  </div><div class="line">            &#123;  </div><div class="line">                <span class="keyword">struct</span> tm *tm_ptr;  </div><div class="line">                <span class="keyword">time_t</span> the_time;  </div><div class="line">                (<span class="keyword">void</span>)time(&amp;the_time);  </div><div class="line">                tm_ptr=gmtime(&amp;the_time);  </div><div class="line">                <span class="keyword">char</span> buff[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;  </div><div class="line">                <span class="built_in">sprintf</span>(buff,<span class="string">"\n[%02d:%02d:%02d]"</span>,tm_ptr-&gt;tm_hour,tm_ptr-&gt;tm_min,tm_ptr-&gt;tm_sec);  </div><div class="line">                <span class="built_in">strcat</span>(buff,msg_read.name);  </div><div class="line">                <span class="built_in">strcat</span>(buff,<span class="string">":"</span>);  </div><div class="line">                ui_print_msg(buff);  </div><div class="line">                ui_print_msg(msg_read.data);  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strncmp</span>(msg_read.cmd,<span class="string">"user"</span>,<span class="number">4</span>)==<span class="number">0</span>)  </div><div class="line">            &#123;  </div><div class="line">                 ui_list_users(msg_read.data);  </div><div class="line">                 ui_input_win_active();  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strncmp</span>(msg_read.cmd,<span class="string">"chat"</span>,<span class="number">4</span>)==<span class="number">0</span>)  </div><div class="line">            &#123;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strncmp</span>(msg_read.cmd,<span class="string">"chat"</span>,<span class="number">4</span>)==<span class="number">0</span>)  </div><div class="line">            &#123;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span>  </div><div class="line">            &#123;  </div><div class="line">            &#125;  </div><div class="line">            <span class="comment">//debug  </span></div><div class="line">  </div><div class="line">            <span class="comment">//todo  </span></div><div class="line">  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    pthread_exit(<span class="literal">NULL</span>);  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">net_end</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    close(sockfd);  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//chat_ui.h  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _CHAT_UI_H_  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CHAT_UI_H_  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;curses.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> WIN_MAX  10  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> USR_MAX  20l  </span></div><div class="line">  </div><div class="line"><span class="comment">//need from other files  </span></div><div class="line"><span class="comment">//char ip[256];  </span></div><div class="line"><span class="comment">//int port;  </span></div><div class="line"><span class="comment">//char name[256];  </span></div><div class="line">  </div><div class="line"><span class="comment">//char *usr_list[USR_MAX]=&#123;"Shenyu",  </span></div><div class="line"><span class="comment">//                            "Wanglm",  </span></div><div class="line"> <span class="comment">//                           NULL&#125;;  </span></div><div class="line">  </div><div class="line">  </div><div class="line"><span class="comment">////  </span></div><div class="line">WINDOW * win[WIN_MAX ]=&#123;<span class="number">0</span>&#125;;<span class="comment">//max open win = 10  </span></div><div class="line"><span class="keyword">int</span> cur_x,cur_y;  </div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_refresh_wins</span><span class="params">()</span> <span class="comment">//refresh all open wins  </span></span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;WIN_MAX ;i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(win [i]!=<span class="literal">NULL</span>)  </div><div class="line">        &#123;  </div><div class="line">            touchwin(win [i]);  </div><div class="line">            wrefresh(win [i]);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//the input always active  </span></div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_input_win_active</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">      touchwin(win [<span class="number">2</span>]);  </div><div class="line">      wrefresh(win [<span class="number">2</span>]);  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ui_init</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    initscr();  </div><div class="line">    refresh();  </div><div class="line">  </div><div class="line">    start_color();  </div><div class="line">  </div><div class="line">    init_pair(<span class="number">1</span>,COLOR_BLACK,COLOR_CYAN);  </div><div class="line">    init_pair(<span class="number">2</span>,COLOR_YELLOW,COLOR_BLUE);  </div><div class="line">    init_pair(<span class="number">3</span>,COLOR_YELLOW,COLOR_RED);  </div><div class="line">  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ui_init_wins</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    win[<span class="number">0</span>]=newwin(<span class="number">20</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">0</span>);  </div><div class="line">    win[<span class="number">1</span>]=newwin(<span class="number">20</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">10</span>);  </div><div class="line">    win[<span class="number">2</span>]=newwin(<span class="number">1</span>,<span class="number">60</span>,<span class="number">20</span>,<span class="number">0</span>);  </div><div class="line">  </div><div class="line">  </div><div class="line">    wbkgd(win[<span class="number">0</span>],COLOR_PAIR(<span class="number">1</span>));  </div><div class="line">    wbkgd(win[<span class="number">1</span>],COLOR_PAIR(<span class="number">2</span>)|A_BOLD);  </div><div class="line">    wbkgd(win[<span class="number">2</span>],COLOR_PAIR(<span class="number">3</span>)|A_BOLD);  </div><div class="line">    scrollok(win[<span class="number">0</span>],TRUE);  </div><div class="line">    scrollok(win[<span class="number">1</span>],TRUE);  </div><div class="line">  </div><div class="line">  </div><div class="line">    keypad(win[<span class="number">0</span>],TRUE);  </div><div class="line">    keypad(win[<span class="number">1</span>],TRUE);  </div><div class="line">    keypad(win[<span class="number">2</span>],TRUE);  </div><div class="line">    keypad(stdscr, TRUE);  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ui_login</span><span class="params">(<span class="keyword">char</span> *ip,<span class="keyword">int</span> * port,<span class="keyword">char</span> *name)</span>  </span></div><div class="line">&#123;  </div><div class="line">    win[<span class="number">3</span>]=newwin(<span class="number">10</span>,<span class="number">40</span>,<span class="number">5</span>,<span class="number">10</span>);  </div><div class="line">    wbkgd(win[<span class="number">3</span>],COLOR_PAIR(<span class="number">3</span>)|A_BOLD);  </div><div class="line">  </div><div class="line">    wrefresh(win[<span class="number">3</span>]);  </div><div class="line">    mvwprintw(win[<span class="number">3</span>],<span class="number">3</span>,<span class="number">3</span>,<span class="string">"Server   IP:\n"</span>);  </div><div class="line">    mvwprintw(win[<span class="number">3</span>],<span class="number">4</span>,<span class="number">3</span>,<span class="string">"Server port:\n"</span>);  </div><div class="line">    mvwprintw(win[<span class="number">3</span>],<span class="number">5</span>,<span class="number">3</span>,<span class="string">"User name  :\n"</span>);  </div><div class="line">    wrefresh(win[<span class="number">3</span>]);  </div><div class="line">  </div><div class="line">    wmove(win[<span class="number">3</span>],<span class="number">3</span>,<span class="number">16</span>);  </div><div class="line">    wrefresh(win[<span class="number">3</span>]);  </div><div class="line">    wgetnstr(win[<span class="number">3</span>],ip,<span class="number">100</span>);  </div><div class="line">  </div><div class="line">    wmove(win[<span class="number">3</span>],<span class="number">4</span>,<span class="number">16</span>);  </div><div class="line">    wrefresh(win[<span class="number">3</span>]);  </div><div class="line">    wscanw(win[<span class="number">3</span>],<span class="string">"%d"</span>, port);  </div><div class="line">  </div><div class="line">    wmove(win[<span class="number">3</span>],<span class="number">5</span>,<span class="number">16</span>);  </div><div class="line">    wrefresh(win[<span class="number">3</span>]);  </div><div class="line">    wgetnstr(win[<span class="number">3</span>],name,<span class="number">100</span>);  </div><div class="line">    delwin(win[<span class="number">3</span>]);  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_list_users</span><span class="params">(<span class="keyword">char</span> * data)</span>  </span></div><div class="line">&#123;  </div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;  </div><div class="line">wclear(win[<span class="number">0</span>]);  </div><div class="line"> wprintw(win[<span class="number">0</span>],<span class="string">"--users--\n"</span>);  </div><div class="line"> wprintw(win[<span class="number">0</span>],<span class="string">"%s\n"</span>,data);  </div><div class="line">wrefresh(win[<span class="number">0</span>]);  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_print_msg</span><span class="params">(<span class="keyword">char</span> *msg)</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">   wprintw(win[<span class="number">1</span>],<span class="string">"%s\n"</span>,msg);  </div><div class="line">   wrefresh(win[<span class="number">1</span>]);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_alert</span><span class="params">(<span class="keyword">char</span> *msg)</span>  </span></div><div class="line">&#123;  </div><div class="line">    win[<span class="number">4</span>]=newwin(<span class="number">10</span>,<span class="number">40</span>,<span class="number">5</span>,<span class="number">10</span>);  </div><div class="line">    wbkgd(win[<span class="number">4</span>],COLOR_PAIR(<span class="number">3</span>)|A_BOLD);  </div><div class="line">    wrefresh(win[<span class="number">4</span>]);  </div><div class="line">    mvwprintw(win[<span class="number">4</span>],<span class="number">5</span>,<span class="number">3</span>,<span class="string">"%s\n   Press any key to continue..."</span>,msg);  </div><div class="line">    wrefresh(win[<span class="number">4</span>]);  </div><div class="line">    getch();  </div><div class="line">    delwin(win[<span class="number">3</span>]);  </div><div class="line">  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_end</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    endwin();  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_promote</span><span class="params">(<span class="keyword">char</span> *msg)</span>  </span></div><div class="line">&#123;  </div><div class="line"> ui_input_win_active();  </div><div class="line"> wclear(win[<span class="number">2</span>]);  </div><div class="line"> wprintw(win[<span class="number">2</span>],<span class="string">"%s"</span>,msg);  </div><div class="line"> wrefresh(win[<span class="number">2</span>]);  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ui_getmsg</span><span class="params">(<span class="keyword">char</span> * buff)</span>  </span></div><div class="line">&#123;  </div><div class="line"> ui_input_win_active();  </div><div class="line"> wgetnstr(win[<span class="number">2</span>],buff,<span class="number">4096</span>);  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//sample programs for UI  </span></div><div class="line"><span class="comment">//int main(int argc, char * argv[])  </span></div><div class="line"><span class="comment">//&#123;  </span></div><div class="line"><span class="comment">//  </span></div><div class="line"><span class="comment">//  </span></div><div class="line"><span class="comment">//    ui_init();  </span></div><div class="line"><span class="comment">//    ui_login(ip,&amp;port,name);  </span></div><div class="line"><span class="comment">//  </span></div><div class="line"><span class="comment">//    ui_init_wins();  </span></div><div class="line"><span class="comment">//    ui_list_users( usr_list );  </span></div><div class="line"><span class="comment">//    ui_refresh_wins();  </span></div><div class="line"><span class="comment">//    wprintw(win[1],"IP:%s\nPORT:%d\nNAME:%s",ip,port,name);  </span></div><div class="line"><span class="comment">//    ui_refresh_wins();  </span></div><div class="line"><span class="comment">//  </span></div><div class="line"><span class="comment">//int i=0;  </span></div><div class="line"><span class="comment">//for(i=0;i&lt;100;i++)  </span></div><div class="line"><span class="comment">//    ui_print_msg("This is a test message!");  </span></div><div class="line"><span class="comment">//  </span></div><div class="line"><span class="comment">//  </span></div><div class="line"><span class="comment">//    ui_refresh_wins();  </span></div><div class="line"><span class="comment">//    getch();  </span></div><div class="line"><span class="comment">//&#125;  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// _CHAT_UI_H_</span></span></div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SHARED_VALS_H_  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _SHARED_VALS_H_  </span></div><div class="line">  </div><div class="line"><span class="keyword">struct</span> msg_st  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">char</span> name[<span class="number">256</span>];<span class="comment">//发送信息人  </span></div><div class="line">    <span class="keyword">char</span> to[<span class="number">256</span>];  <span class="comment">//接收人  </span></div><div class="line">    <span class="keyword">char</span> data[<span class="number">4096</span>];<span class="comment">//数据  </span></div><div class="line">    <span class="keyword">char</span> cmd[<span class="number">256</span>];<span class="comment">//消息的类型  </span></div><div class="line">&#125;;  </div><div class="line">  </div><div class="line"><span class="comment">//login 登陆  </span></div><div class="line"><span class="comment">//offline 服务器即将踢人  </span></div><div class="line"><span class="comment">//user 服务发送的用户列表，数据在data里  </span></div><div class="line"><span class="comment">//chat 表示这是一条消息，数据在data里  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netdb.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/ioctl.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/select.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXEVENTS 64  </span></div><div class="line">  </div><div class="line"><span class="keyword">struct</span> msg_st  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">char</span> name[<span class="number">256</span>];  </div><div class="line">    <span class="keyword">char</span> to[<span class="number">256</span>];  </div><div class="line">    <span class="keyword">char</span> data[<span class="number">4096</span>];  </div><div class="line">    <span class="keyword">char</span> cmd[<span class="number">256</span>];  </div><div class="line">&#125;;  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_CLIENTS 256  </span></div><div class="line"><span class="keyword">int</span> chat_clients_sets[MAX_CLIENTS]=&#123;<span class="number">0</span>&#125;;  </div><div class="line"><span class="keyword">char</span> *chat_clients_names [MAX_CLIENTS] = &#123;<span class="number">0</span>&#125;;  </div><div class="line"><span class="keyword">int</span> chat_clients_count=<span class="number">0</span>;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">chat_clients_add</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">char</span> * <span class="number">_</span>name)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;MAX_CLIENTS; i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(chat_clients_sets[i]==<span class="number">0</span>)  </div><div class="line">        &#123;  </div><div class="line">            chat_clients_sets[i]=fd;  </div><div class="line">  </div><div class="line">            <span class="keyword">int</span> len=<span class="built_in">strlen</span>(<span class="number">_</span>name)+<span class="number">1</span>;  </div><div class="line">            <span class="keyword">char</span> *ptr=<span class="built_in">malloc</span>(len*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));  </div><div class="line">            <span class="built_in">memset</span>(ptr,<span class="number">0</span>,<span class="keyword">sizeof</span>(ptr));  </div><div class="line">            <span class="built_in">strcpy</span>(ptr,<span class="number">_</span>name);  </div><div class="line">            *(chat_clients_names+i)=ptr;  </div><div class="line">  </div><div class="line">            chat_clients_count++;  </div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">chat_clients_del</span><span class="params">(<span class="keyword">int</span> fd)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;MAX_CLIENTS;i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(chat_clients_sets[i]==fd)  </div><div class="line">        &#123;  </div><div class="line">            chat_clients_sets[i]=<span class="number">0</span>;  </div><div class="line">            <span class="built_in">free</span>(*(chat_clients_names+i));  </div><div class="line">            *(chat_clients_names+i)=<span class="literal">NULL</span>;  </div><div class="line">            chat_clients_count--;  </div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">chat_user_list</span><span class="params">(<span class="keyword">struct</span> msg_st * m)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="built_in">memset</span>( m,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> msg_st));  </div><div class="line">    <span class="built_in">strcpy</span>(m-&gt;cmd,<span class="string">"user"</span>);  </div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;MAX_CLIENTS;i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(*(chat_clients_names+i)!=<span class="literal">NULL</span>)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">char</span> buff[<span class="number">4096</span>];  </div><div class="line">            <span class="built_in">memset</span>(buff,<span class="number">0</span>,<span class="keyword">sizeof</span>(buff));  </div><div class="line">  </div><div class="line">            <span class="built_in">sprintf</span>(buff,<span class="string">"%s\n"</span>,*(chat_clients_names+i));  </div><div class="line">            <span class="built_in">strcat</span>(m-&gt;data,buff);  </div><div class="line">  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">chat_clients_sendto_all</span><span class="params">(<span class="keyword">struct</span> msg_st * mymsg)</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; MAX_CLIENTS; j++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(chat_clients_sets[j]!=<span class="number">0</span>)  </div><div class="line">        &#123;  </div><div class="line">  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"send to %s\n"</span>,(*mymsg).name);  </div><div class="line">          <span class="keyword">int</span>    s = write (chat_clients_sets[j] , mymsg, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> msg_st));  </div><div class="line">            <span class="keyword">if</span> (s == <span class="number">-1</span>)  </div><div class="line">            &#123;  </div><div class="line">                perror (<span class="string">"write"</span>);  </div><div class="line">                <span class="built_in">abort</span> ();  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span>  </span></div><div class="line"><span class="title">create_and_bind</span> <span class="params">(<span class="keyword">char</span> *port)</span>  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">struct</span> addrinfo hints;  </div><div class="line">    <span class="keyword">struct</span> addrinfo *result, *rp;  </div><div class="line">    <span class="keyword">int</span> s, sfd;  </div><div class="line">  </div><div class="line">    <span class="built_in">memset</span> (&amp;hints, <span class="number">0</span>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> addrinfo));  </div><div class="line">    hints.ai_family = AF_UNSPEC;     <span class="comment">/* Return IPv4 and IPv6 choices */</span>  </div><div class="line">    hints.ai_socktype = SOCK_STREAM; <span class="comment">/* We want a TCP socket */</span>  </div><div class="line">    hints.ai_flags = <span class="number">0x0001</span>;  <span class="comment">/* All interfaces */</span>  </div><div class="line">  </div><div class="line">    s = getaddrinfo (<span class="literal">NULL</span>, port, &amp;hints, &amp;result);  </div><div class="line">    <span class="keyword">if</span> (s != <span class="number">0</span>)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">"getaddrinfo: %s\n"</span>, gai_strerror (s));  </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">for</span> (rp = result; rp != <span class="literal">NULL</span>; rp = rp-&gt;ai_next)  </div><div class="line">    &#123;  </div><div class="line">        sfd = socket (rp-&gt;ai_family, rp-&gt;ai_socktype, rp-&gt;ai_protocol);  </div><div class="line">        <span class="keyword">if</span> (sfd == <span class="number">-1</span>)  </div><div class="line">            <span class="keyword">continue</span>;  </div><div class="line">        s = bind (sfd, rp-&gt;ai_addr, rp-&gt;ai_addrlen);  </div><div class="line">        <span class="keyword">if</span> (s == <span class="number">0</span>)  </div><div class="line">        &#123;  </div><div class="line">            <span class="comment">/* We managed to bind successfully! */</span>  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        close (sfd);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">if</span> (rp == <span class="literal">NULL</span>)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">"Could not bind\n"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">    &#125;  </div><div class="line">    freeaddrinfo (result);  </div><div class="line">    <span class="keyword">return</span> sfd;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span>  </span></div><div class="line"><span class="title">make_socket_non_blocking</span> <span class="params">(<span class="keyword">int</span> sfd)</span>  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> flags, s;  </div><div class="line">  </div><div class="line">    flags = fcntl (sfd, F_GETFL, <span class="number">0</span>);  </div><div class="line">    <span class="keyword">if</span> (flags == <span class="number">-1</span>)  </div><div class="line">    &#123;  </div><div class="line">        perror (<span class="string">"fcntl"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    flags |= O_NONBLOCK;  </div><div class="line">    s = fcntl (sfd, F_SETFL, flags);  </div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)  </div><div class="line">    &#123;  </div><div class="line">        perror (<span class="string">"fcntl"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">int</span> sfd, s;  </div><div class="line">    <span class="keyword">int</span> efd;  </div><div class="line">    <span class="keyword">struct</span> epoll_event event;  </div><div class="line">    <span class="keyword">struct</span> epoll_event *events;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">"Usage: %s [port]\n"</span>, argv[<span class="number">0</span>]);  </div><div class="line">        <span class="built_in">exit</span> (EXIT_FAILURE);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    sfd = create_and_bind (argv[<span class="number">1</span>]);  </div><div class="line">    <span class="keyword">if</span> (sfd == <span class="number">-1</span>)  </div><div class="line">        <span class="built_in">abort</span> ();  </div><div class="line">  </div><div class="line">    s = make_socket_non_blocking (sfd);  </div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)  </div><div class="line">        <span class="built_in">abort</span> ();  </div><div class="line">  </div><div class="line">    s = listen (sfd, SOMAXCONN);  </div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)  </div><div class="line">    &#123;  </div><div class="line">        perror (<span class="string">"listen"</span>);  </div><div class="line">        <span class="built_in">abort</span> ();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    efd = epoll_create1 (<span class="number">0</span>);  </div><div class="line">    <span class="keyword">if</span> (efd == <span class="number">-1</span>)  </div><div class="line">    &#123;  </div><div class="line">        perror (<span class="string">"epoll_create"</span>);  </div><div class="line">        <span class="built_in">abort</span> ();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    event.data.fd = sfd;  </div><div class="line">    event.events = EPOLLIN | EPOLLET;  </div><div class="line">    s = epoll_ctl (efd, EPOLL_CTL_ADD, sfd, &amp;event);  </div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)  </div><div class="line">    &#123;  </div><div class="line">        perror (<span class="string">"epoll_ctl"</span>);  </div><div class="line">        <span class="built_in">abort</span> ();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* Buffer where events are returned */</span>  </div><div class="line">    events = <span class="built_in">calloc</span> (MAXEVENTS, <span class="keyword">sizeof</span> event);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">server_accept_clients</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line"> <span class="comment">/* We have a notification on the listening socket, which </span></div><div class="line">                   means one or more incoming connections. */  </div><div class="line">                <span class="keyword">while</span> (<span class="number">1</span>)  </div><div class="line">                &#123;  </div><div class="line">                    <span class="keyword">struct</span> sockaddr in_addr;  </div><div class="line">                    <span class="keyword">socklen_t</span> in_len;  </div><div class="line">                    <span class="keyword">int</span> infd;  </div><div class="line">                    <span class="keyword">char</span> hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];  </div><div class="line">  </div><div class="line">                    in_len = <span class="keyword">sizeof</span> in_addr;  </div><div class="line">                    infd = accept (sfd, &amp;in_addr, &amp;in_len);  </div><div class="line">                    <span class="keyword">if</span> (infd == <span class="number">-1</span>)  </div><div class="line">                    &#123;  </div><div class="line">                        <span class="keyword">if</span> ((errno == EAGAIN) ||  </div><div class="line">                                (errno == EWOULDBLOCK))  </div><div class="line">                        &#123;  </div><div class="line">                            <span class="comment">/* We have processed all incoming </span></div><div class="line">                               connections. */  </div><div class="line">                            <span class="keyword">break</span>;  </div><div class="line">                        &#125;  </div><div class="line">                        <span class="keyword">else</span>  </div><div class="line">                        &#123;  </div><div class="line">                            perror (<span class="string">"accept"</span>);  </div><div class="line">                            <span class="keyword">break</span>;  </div><div class="line">                        &#125;  </div><div class="line">                    &#125;  </div><div class="line">  </div><div class="line">                     <span class="keyword">int</span> s = getnameinfo (&amp;in_addr, in_len,  </div><div class="line">                                     hbuf, <span class="keyword">sizeof</span> hbuf,  </div><div class="line">                                     sbuf, <span class="keyword">sizeof</span> sbuf,  </div><div class="line">                                     NI_NUMERICHOST | NI_NUMERICSERV);  </div><div class="line">                    <span class="keyword">if</span> (s == <span class="number">0</span>)  </div><div class="line">                    &#123;  </div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"Server: accepted connection on descriptor %d "</span>  </div><div class="line">                               <span class="string">"(host=%s, port=%s)\n"</span>, infd, hbuf, sbuf);  </div><div class="line">                    &#125;  </div><div class="line">  </div><div class="line">                    <span class="comment">/* Make the incoming socket non-blocking and add it to the </span></div><div class="line">                       list of fds to monitor. */  </div><div class="line">                    s = make_socket_non_blocking (infd);  </div><div class="line">                    <span class="keyword">if</span> (s == <span class="number">-1</span>)  </div><div class="line">                        <span class="built_in">abort</span> ();  </div><div class="line">  </div><div class="line">                    event.data.fd = infd;  </div><div class="line">                    event.events = EPOLLIN | EPOLLET;  </div><div class="line">                    s = epoll_ctl (efd, EPOLL_CTL_ADD, infd, &amp;event);  </div><div class="line">                    <span class="comment">//add to clients sets  </span></div><div class="line">                   <span class="comment">// chat_clients_add(infd);  </span></div><div class="line">                    <span class="keyword">if</span> (s == <span class="number">-1</span>)  </div><div class="line">                    &#123;  </div><div class="line">                        perror (<span class="string">"epoll_ctl"</span>);  </div><div class="line">                        <span class="built_in">abort</span> ();  </div><div class="line">                    &#125;  </div><div class="line">                &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span>  </span></div><div class="line"><span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span>  </div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    init(argc,argv);  </div><div class="line">  </div><div class="line">    <span class="comment">/* The event loop */</span>  </div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">int</span> n, i;  </div><div class="line">  </div><div class="line">        n = epoll_wait (efd, events, MAXEVENTS, <span class="number">-1</span>);  </div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span> ((events[i].events &amp; EPOLLERR) ||  </div><div class="line">                    (events[i].events &amp; EPOLLHUP) ||  </div><div class="line">                    (!(events[i].events &amp; EPOLLIN)))  </div><div class="line">            &#123;  </div><div class="line">                <span class="comment">/* An error has occured on this fd, or the socket is not </span></div><div class="line">                   ready for reading (why were we notified then?) */  </div><div class="line">                <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">"epoll error\n"</span>);  </div><div class="line">                close (events[i].data.fd);  </div><div class="line">                <span class="keyword">continue</span>;  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sfd == events[i].data.fd)  </div><div class="line">            &#123;  </div><div class="line">                server_accept_clients();  </div><div class="line">                <span class="keyword">continue</span>;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span>  </div><div class="line">            &#123;  </div><div class="line">                <span class="comment">/* We have data on the fd waiting to be read. Read and </span></div><div class="line">                   display it. We must read whatever data is available </div><div class="line">                   completely, as we are running in edge-triggered mode </div><div class="line">                   and won't get a notification again for the same </div><div class="line">                   data. */  </div><div class="line">                <span class="keyword">int</span> done = <span class="number">0</span>;  </div><div class="line">  </div><div class="line">                <span class="keyword">while</span> (<span class="number">1</span>)  </div><div class="line">                &#123;  </div><div class="line">                    <span class="keyword">ssize_t</span> count;  </div><div class="line">                    <span class="comment">//char buf[512]= &#123;0&#125;;  </span></div><div class="line">                    <span class="keyword">struct</span> msg_st mymsg;  </div><div class="line">                    <span class="built_in">memset</span>((<span class="keyword">void</span> *)&amp;mymsg,<span class="number">0</span>,<span class="keyword">sizeof</span>(mymsg));  </div><div class="line">                    count = read (events[i].data.fd, (<span class="keyword">void</span> *)&amp;mymsg, <span class="keyword">sizeof</span>(mymsg));  </div><div class="line">  </div><div class="line">                    <span class="keyword">if</span> (count == <span class="number">-1</span>)  </div><div class="line">                    &#123;  </div><div class="line">                        <span class="comment">/* If errno == EAGAIN, that means we have read all </span></div><div class="line">                           data. So go back to the main loop. */  </div><div class="line">                        <span class="keyword">if</span> (errno != EAGAIN)  </div><div class="line">                        &#123;  </div><div class="line">                            perror (<span class="string">"read"</span>);  </div><div class="line">                            done = <span class="number">1</span>;  </div><div class="line">                        &#125;  </div><div class="line">                        <span class="keyword">break</span>;  </div><div class="line">                    &#125;  </div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">0</span>)  </div><div class="line">                    &#123;  </div><div class="line">                        <span class="comment">/* End of file. The remote has closed the </span></div><div class="line">                           connection. */  </div><div class="line">                        done = <span class="number">1</span>;  </div><div class="line">                        <span class="keyword">break</span>;  </div><div class="line">                    &#125;  </div><div class="line">                    <span class="comment">/* do a little work here*/</span>  </div><div class="line">  </div><div class="line">                    <span class="comment">/* Write the buffer to standard output */</span>  </div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"Server: msg from client [%s]-[%s]\n"</span>,mymsg.name,mymsg.data);  </div><div class="line">  </div><div class="line">                    <span class="keyword">if</span>(<span class="built_in">strncmp</span>(mymsg.cmd,<span class="string">"login"</span>,<span class="number">5</span>)==<span class="number">0</span>)  </div><div class="line">                    &#123;  </div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"return login ok!\n"</span>);  </div><div class="line">                        <span class="built_in">strcpy</span>(mymsg.data,<span class="string">"ok"</span>);  </div><div class="line">                        chat_clients_add(events[i].data.fd,mymsg.name);  </div><div class="line">                          chat_clients_sendto_all(&amp;mymsg);  </div><div class="line">                          <span class="keyword">continue</span>;  </div><div class="line">                    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line">                    <span class="built_in">strcpy</span>(mymsg.cmd,<span class="string">"chat"</span>);  </div><div class="line">                    chat_clients_sendto_all(&amp;mymsg);  </div><div class="line">                    usleep(<span class="number">100000</span>);  </div><div class="line">                    chat_user_list(&amp;mymsg);  </div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"==user==\n%s\n"</span>,mymsg.data);  </div><div class="line">                    chat_clients_sendto_all(&amp;mymsg);  </div><div class="line">  </div><div class="line">                &#125;  </div><div class="line">  </div><div class="line">                <span class="keyword">if</span> (done)  </div><div class="line">                &#123;  </div><div class="line">                    <span class="built_in">printf</span> (<span class="string">"Server: closed connection on descriptor %d\n"</span>,  </div><div class="line">                            events[i].data.fd);  </div><div class="line">  </div><div class="line">                    <span class="comment">/* Closing the descriptor will make epoll remove it </span></div><div class="line">                       from the set of descriptors which are monitored. */  </div><div class="line">                    close (events[i].data.fd);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="built_in">free</span> (events);  </div><div class="line">  </div><div class="line">    close (sfd);  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> EXIT_SUCCESS;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在linux shell 下切换程序]]></title>
      <url>http://shenyu.wiki/2016/09/17/linux-shell-%E5%88%87%E6%8D%A2%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>我们都知道，在 Windows 上我们可以轻松打开多个窗口并用Alt+TAB进行切换。但是在 Linux Shell下如何实现呢？请看下面的介绍。</p>
<h2 id="让程序在后台执行"><a href="#让程序在后台执行" class="headerlink" title="让程序在后台执行"></a>让程序在后台执行</h2><p>命令： &amp;<br>这个用在一个命令的最后，可以把这个命令放到后台执行。<br>例如 ./program1 &amp;程序便在后台执行了，此时用户可以继续输入其他命令。</p>
<h2 id="把程序放到后台"><a href="#把程序放到后台" class="headerlink" title="把程序放到后台"></a>把程序放到后台</h2><p>命令：ctrl + z<br>可以将一个正在前台执行的命令放到后台，并且暂停。</p>
<h2 id="查看当前有多少在后台运行的命令"><a href="#查看当前有多少在后台运行的命令" class="headerlink" title="查看当前有多少在后台运行的命令"></a>查看当前有多少在后台运行的命令</h2><p>命令：jobs<br>查看当前有多少在后台运行的命令</p>
<h2 id="将后台中的命令调至前台继续运行"><a href="#将后台中的命令调至前台继续运行" class="headerlink" title="将后台中的命令调至前台继续运行"></a>将后台中的命令调至前台继续运行</h2><p>命令：fg<br>如果后台中有多个命令，可以用 fg %jobnumber将选中的命令调出，%jobnumber是通过jobs命令查到的后台正在执行的命令的序号(不是pid)。</p>
<h2 id="将一个在后台暂停的命令，变成继续执行"><a href="#将一个在后台暂停的命令，变成继续执行" class="headerlink" title="将一个在后台暂停的命令，变成继续执行"></a>将一个在后台暂停的命令，变成继续执行</h2><p>命令：bg<br>将一个在后台暂停的命令，变成继续执行<br>如果后台中有多个命令，可以用bg %jobnumber将选中的命令调出，%jobnumber是通过jobs命令查到的后台正在执行的命令的序号(不是pid)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[奥运会成绩管理系统]]></title>
      <url>http://shenyu.wiki/2016/09/17/%E5%A5%A5%E8%BF%90%E4%BC%9A%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>要求编程实现奥运会成绩管理系统，具有如下功能：初始化、录入成绩、取消成绩、查询奖牌榜。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>能够任何时候初始化，清空系统所有数据。<br>函数原型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void init (void);</div></pre></td></tr></table></figure></p>
<h3 id="录入成绩"><a href="#录入成绩" class="headerlink" title="录入成绩"></a>录入成绩</h3><p>录入运动员取得成绩情况。<br>函数原型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool enter_score(int time, int country, char * name, int sport, int medal);</div></pre></td></tr></table></figure></p>
<p>入参：</p>
<ul>
<li>时间： 0-30 单位为天，录入成绩时，时间必须不变或递增</li>
<li>国家：运动员所在的国家，有中、美、日、韩、俄、英</li>
<li>名字：运动员的名字，10个字符以内，只有字母，区分大小写</li>
<li>项目：比赛获奖的项目，1-11，共11个项目。 录入成绩顺序，一个项目必须先录入金牌，再录入银牌，最后录入铜牌。</li>
<li>奖牌：金牌、银牌、铜牌</li>
</ul>
<h3 id="取消成绩"><a href="#取消成绩" class="headerlink" title="取消成绩"></a>取消成绩</h3><p>取消一条取得的成绩，该项目成绩取消后，其他选手的成绩自动上调。如：取消金牌，则原来的银牌变金牌，铜牌变银牌。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bool cancle_score(int time, char * name, int sport);</div><div class="line">void query_score(void);</div></pre></td></tr></table></figure></p>
<h3 id="查询奖牌榜"><a href="#查询奖牌榜" class="headerlink" title="查询奖牌榜"></a>查询奖牌榜</h3><p>按照比赛获奖情况，生成奖牌榜，排序并显示。</p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">____________________________________________</div><div class="line">|  COUNTRY  | GOLD | SILVER | BRONZE | RANK |</div><div class="line">|-------------------------------------------|</div><div class="line">|      CHINA|     2|       0|       0|     1|</div><div class="line">|    AMERICA|     2|       0|       0|     1|</div><div class="line">|      KOREA|     0|       2|       0|     3|</div><div class="line">|     RUSSUA|     0|       0|       3|     4|</div><div class="line">|      JAPAN|     0|       0|       0|     5|</div><div class="line">|    ENGLAND|     0|       0|       0|     5|</div><div class="line">____________________________________________</div></pre></td></tr></table></figure></p>
<p>说明：</p>
<ul>
<li>排序规则：先金牌、再银牌、最后铜牌。</li>
<li>相同奖牌情况排序相同，比如并列第一的情况。</li>
</ul>
<a id="more"></a>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctype.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> false 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> true  1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> bool  int</span></div><div class="line"></div><div class="line"><span class="comment">/* prototype for medal */</span></div><div class="line"><span class="keyword">enum</span> Medal &#123;</div><div class="line">	MEDAL_BEGIN,</div><div class="line">	GOLD,</div><div class="line">	SILVER,</div><div class="line">	BRONZE,</div><div class="line">	MEDAL_END</div><div class="line">&#125;;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="number">_</span>medal_str &#123;</div><div class="line">	<span class="keyword">int</span> medal;</div><div class="line">	<span class="keyword">char</span> str[<span class="number">256</span>];</div><div class="line">&#125; medal_str;</div><div class="line">medal_str m_s[] = &#123;</div><div class="line">	&#123;MEDAL_BEGIN,<span class="string">"INVALID"</span>&#125;,</div><div class="line">	&#123;GOLD,<span class="string">"GOLD"</span>&#125;,</div><div class="line">	&#123;SILVER,<span class="string">"SILVER"</span>&#125;,</div><div class="line">	&#123;BRONZE,<span class="string">"BRONZE"</span>&#125;</div><div class="line">&#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> medal2str(medal) m_s[medal].str</span></div><div class="line"></div><div class="line"><span class="comment">/* prototype for country */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> COUNTRY_COUNT 6</span></div><div class="line"><span class="keyword">enum</span> Country &#123;</div><div class="line">	CHINA,</div><div class="line">	AMERICA,</div><div class="line">	JAPAN,</div><div class="line">	KOREA,</div><div class="line">	RUSSUA,</div><div class="line">	ENGLAND,</div><div class="line">	COUNTRY_END</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="number">_</span>country_str &#123;</div><div class="line">	<span class="keyword">int</span> country;</div><div class="line">	<span class="keyword">char</span> str[<span class="number">256</span>];</div><div class="line">&#125; country_str;</div><div class="line"></div><div class="line">country_str c_s[] = &#123;</div><div class="line">	&#123;CHINA, <span class="string">"CHINA"</span>&#125;,</div><div class="line">	&#123;AMERICA, <span class="string">"AMERICA"</span>&#125;,</div><div class="line">	&#123;JAPAN,<span class="string">"JAPAN"</span>&#125;,</div><div class="line">	&#123;KOREA,<span class="string">"KOREA"</span>&#125;,</div><div class="line">	&#123;RUSSUA,<span class="string">"RUSSUA"</span>&#125;,</div><div class="line">	&#123;ENGLAND,<span class="string">"ENGLAND"</span>&#125;</div><div class="line">&#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> country2str(country) c_s[country].str</span></div><div class="line"></div><div class="line"><span class="comment">/* prototype for sport */</span></div><div class="line"><span class="keyword">enum</span> Sport &#123;</div><div class="line">	SPORT_BEGIN,</div><div class="line">	S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,</div><div class="line">	SPORT_END</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* prototype for game record */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME_LEN 10</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="number">_</span>Record &#123;</div><div class="line">	<span class="keyword">int</span> time;</div><div class="line">	<span class="keyword">int</span> country;</div><div class="line">	<span class="keyword">char</span> name[NAME_LEN+<span class="number">1</span>];</div><div class="line">	<span class="keyword">int</span> sport;</div><div class="line">	<span class="keyword">int</span> medal;</div><div class="line">	<span class="keyword">bool</span> valid;	</div><div class="line">&#125; Record;</div><div class="line"></div><div class="line"><span class="comment">/* prototype for medal list */</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="number">_</span>medal_list &#123;</div><div class="line">	<span class="keyword">int</span> country;</div><div class="line">	<span class="keyword">int</span> gold;</div><div class="line">	<span class="keyword">int</span> silver;</div><div class="line">	<span class="keyword">int</span> bronze;</div><div class="line">	<span class="keyword">int</span> rank;</div><div class="line">&#125; MedalList;</div><div class="line"></div><div class="line"><span class="comment">/* Global vars */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REC_LEN 1024   <span class="comment">/* how many record can hold */</span></span></div><div class="line">Record record[REC_LEN];<span class="comment">/* where to hold all records */</span></div><div class="line"><span class="keyword">int</span>    current_record; <span class="comment">/* current count of record */</span></div><div class="line"><span class="keyword">int</span>    sys_time;       <span class="comment">/* system time */</span></div><div class="line">MedalList medal_list[COUNTRY_COUNT]; <span class="comment">/* country's medal list */</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> *  API of this program</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">enter_score</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> country, <span class="keyword">char</span> * name, <span class="keyword">int</span> sport, <span class="keyword">int</span> medal)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cancle_score</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">char</span> * name, <span class="keyword">int</span> sport)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query_score</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Internals</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_name</span><span class="params">(<span class="keyword">int</span> country, <span class="keyword">char</span> * name)</span></span>; <span class="comment">/* check if name is ok */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">err_report</span><span class="params">(<span class="keyword">char</span> * msg)</span>   <span class="comment">/* report error use for debug */</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"ERROR:%s\n"</span>,msg);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_sport_name_medal</span><span class="params">(<span class="keyword">int</span> sport,<span class="keyword">char</span>* name, <span class="keyword">int</span> medal)</span></span>;<span class="comment">/* check lots of conflicting cases */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_record</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">/* print the record arry */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen_medal_list</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">/* print the medal list */</span></div><div class="line"><span class="function"><span class="keyword">int</span>  <span class="title">comp_medal_list</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* <span class="number">_</span>a, <span class="keyword">const</span> <span class="keyword">void</span> * <span class="number">_b</span>)</span></span>; <span class="comment">/* use for sort the medal list*/</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Test cases</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test_insert</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test_cancle</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TEST(func) \</span></div><div class="line">	printf(<span class="meta-string">"===================================================\n"</span>);\</div><div class="line">	printf(<span class="meta-string">"                Test %d                            \n"</span>,all_tests);\</div><div class="line">	printf(<span class="meta-string">"===================================================\n"</span>);\</div><div class="line">	<span class="meta-keyword">if</span> (func()) \</div><div class="line">	&#123;\</div><div class="line">		passed_tests++; \</div><div class="line">	printf(<span class="meta-string">"====Test %d PASSED=================================\n\n"</span>,all_tests);\</div><div class="line">	&#125;\</div><div class="line">	<span class="meta-keyword">else</span>\</div><div class="line">	&#123;\</div><div class="line">	printf(<span class="meta-string">"====Test %d FAILED=================================\n\n"</span>,all_tests);\</div><div class="line">	&#125;\</div><div class="line">	all_tests++;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; REC_LEN; i++)</div><div class="line">	&#123;</div><div class="line">		record[i].time = <span class="number">0</span>;</div><div class="line">		record[i].country = <span class="number">0</span>;</div><div class="line">		<span class="built_in">memset</span>(record[i].name,<span class="string">'\0'</span>,<span class="keyword">sizeof</span>(record[i].name));</div><div class="line">		record[i].sport = <span class="number">0</span>;</div><div class="line">		record[i].medal = <span class="number">0</span>;</div><div class="line">		record[i].valid = <span class="literal">true</span>; <span class="comment">/* default is true ,later can be set to false*/</span></div><div class="line">	&#125;</div><div class="line">	sys_time = <span class="number">0</span>;</div><div class="line">	current_record = <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">enter_score</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">int</span> country, <span class="keyword">char</span> * name, <span class="keyword">int</span> sport, <span class="keyword">int</span> medal)</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"DEBUG: enter_score(time=%d,country=%s,name=%s,sport=%d,medal=%s)\n"</span>,</div><div class="line">						time, country2str(country), name, sport, medal2str(medal));</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	<span class="comment">/* check time within 0,30 */</span></div><div class="line">	<span class="keyword">if</span> (time &lt; <span class="number">0</span> || time &gt; <span class="number">30</span>)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"time should be within [0,30]"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check sys_time: time should &gt;= sys_time */</span></div><div class="line">	<span class="keyword">if</span> (time &lt; sys_time)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"time should &gt;= sys_time"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check if name is valied */</span></div><div class="line">	<span class="keyword">if</span> (!check_name(country, name))</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check if country valid */</span></div><div class="line">	<span class="keyword">if</span> (country &gt;= COUNTRY_END || country &lt; <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"country is not valid"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check if sport is valid */</span></div><div class="line">	<span class="keyword">if</span> (sport &gt;= SPORT_END || sport &lt;= SPORT_BEGIN)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"sport is not valid"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check if medal is valid */</span></div><div class="line">	<span class="keyword">if</span> (medal &gt;= MEDAL_END || medal &lt;= MEDAL_BEGIN)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"medal is not valid"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* in the same sport: gold first, then silver, bronze come last */</span></div><div class="line">	<span class="comment">/* check if sport medal aready have */</span></div><div class="line">	<span class="keyword">if</span> (!check_sport_name_medal(sport,name, medal))</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check if we reach REC_LEN */</span></div><div class="line">	<span class="keyword">if</span> (current_record == REC_LEN)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"no space for a new record"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* check ok, do the actual entry*/</span></div><div class="line">	record[current_record].country = country;</div><div class="line">	record[current_record].sport   = sport;</div><div class="line">	record[current_record].medal   = medal;</div><div class="line">	record[current_record].time    = time;</div><div class="line">	<span class="built_in">memcpy</span>(record[current_record].name,name,<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="built_in">strlen</span>(name));</div><div class="line">	current_record++;</div><div class="line"></div><div class="line">	<span class="comment">/* update the systime */</span></div><div class="line">	sys_time = time;</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;		</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_name</span><span class="params">(<span class="keyword">int</span> country, <span class="keyword">char</span> * name)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i, len;</div><div class="line">	<span class="comment">/* check name length */</span></div><div class="line">	<span class="keyword">if</span> (!name)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"name can not be NULL"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	len = <span class="built_in">strlen</span>(name);</div><div class="line">	<span class="keyword">if</span> (len &gt; NAME_LEN)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"name len should be 1 to 10"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/* check if name contain ony letters */</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (!<span class="built_in">isalpha</span>(name[i]))</div><div class="line">		&#123;</div><div class="line">			err_report(<span class="string">"name contains char that is not alpha"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check if already have the same name in another country*/</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; current_record; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(record[i].name,name) == <span class="number">0</span> &amp;&amp; record[i].country != country)</div><div class="line">		&#123;</div><div class="line">			err_report(<span class="string">"player cannot play in different country"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;		</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_sport_name_medal</span><span class="params">(<span class="keyword">int</span> sport, <span class="keyword">char</span> * name, <span class="keyword">int</span> medal)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">int</span> found_gold = <span class="literal">false</span>;</div><div class="line">	<span class="keyword">int</span> found_silver = <span class="literal">false</span>;</div><div class="line">	<span class="keyword">int</span> found_bronze = <span class="literal">false</span>;</div><div class="line">	<span class="comment">/* if the record is empty */</span></div><div class="line">	<span class="keyword">if</span> (current_record == <span class="number">0</span> &amp;&amp; medal != GOLD)</div><div class="line">	&#123;</div><div class="line">			err_report(<span class="string">"GOLD for this sport  must come first"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* the first record of the game must be gold */</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; current_record; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (record[i].sport == sport &amp;&amp; record[i].medal == GOLD)</div><div class="line">		&#123;</div><div class="line">			found_gold = <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (record[i].sport == sport &amp;&amp; record[i].medal == SILVER)</div><div class="line">		&#123;</div><div class="line">			found_silver = <span class="literal">true</span>;	</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (record[i].sport == sport &amp;&amp; record[i].medal == BRONZE)</div><div class="line">		&#123;</div><div class="line">			found_bronze = <span class="literal">true</span>;	</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* the record is not empty loop the record */</span>	</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; current_record; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (record[i].sport == sport &amp;&amp; </div><div class="line">			<span class="built_in">strcmp</span>(name,record[i].name) == <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			err_report(<span class="string">"sport has played by the player"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (record[i].sport == sport &amp;&amp; </div><div class="line">			record[i].medal == medal &amp;&amp;</div><div class="line">			record[i].valid)</div><div class="line">		&#123;</div><div class="line">			err_report(<span class="string">"sport has already has the medal"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (record[i].sport == sport &amp;&amp;</div><div class="line">			record[i].medal == medal &amp;&amp;</div><div class="line">			!record[i].valid         &amp;&amp;</div><div class="line">			<span class="built_in">strcmp</span>(name,record[i].name) == <span class="number">0</span>)</div><div class="line">	 	&#123;</div><div class="line">			err_report(<span class="string">"current sport and medal win by player has been cancled"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">if</span> (record[i].sport == sport &amp;&amp;</div><div class="line">			record[i].medal != MEDAL_BEGIN &amp;&amp;</div><div class="line">			record[i].valid    	     &amp;&amp;</div><div class="line">			<span class="built_in">strcmp</span>(name,record[i].name) == <span class="number">0</span>)</div><div class="line">	 	&#123;</div><div class="line">			err_report(<span class="string">"medal for this sport cannot be won by same player twice"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (record[i].sport == sport &amp;&amp; record[i].valid)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span> (medal == GOLD &amp;&amp; !found_gold)</div><div class="line">			&#123;</div><div class="line">				<span class="comment">/* there are already silver or bronze in this sport*/</span></div><div class="line">				<span class="keyword">if</span> (record[i].medal == SILVER ||</div><div class="line">					record[i].medal == BRONZE)</div><div class="line">				&#123;</div><div class="line">					err_report(<span class="string">"GOLD for this sport must be entered first"</span>);</div><div class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span> (medal == SILVER &amp;&amp; !found_silver &amp;&amp; found_gold)</div><div class="line">			&#123;</div><div class="line">				<span class="comment">/* there are already bronze in this sport*/</span></div><div class="line">				<span class="keyword">if</span> (record[i].medal == BRONZE)</div><div class="line">				&#123;</div><div class="line">					err_report(<span class="string">"SILVER for this sport  must be entered second"</span>);</div><div class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">	</div><div class="line">			<span class="keyword">if</span> (medal == BRONZE &amp;&amp; !found_bronze &amp;&amp; found_silver &amp;&amp; found_gold)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span>  <span class="title">cancle_score</span><span class="params">(<span class="keyword">int</span> time, <span class="keyword">char</span> * name, <span class="keyword">int</span> sport)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i , flag = <span class="literal">false</span>, found = <span class="literal">false</span>;</div><div class="line">	<span class="keyword">int</span> cancled_medal;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"DEBUG:cancle_score(time=%d,name=%s,sport=%d)\n"</span>,</div><div class="line">			time,name,sport);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	<span class="keyword">if</span> (!name)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"name cannot be null"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check time within 0,30 */</span></div><div class="line">	<span class="keyword">if</span> (time &lt; <span class="number">0</span> || time &gt; <span class="number">30</span>)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"time should be within [0,30]"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check if sport is valid */</span></div><div class="line">	<span class="keyword">if</span> (sport &gt;= SPORT_END || sport &lt;= SPORT_BEGIN)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"sport is not valid"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; current_record ; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (record[i].time == time &amp;&amp;</div><div class="line">			record[i].sport == sport &amp;&amp;</div><div class="line">			(<span class="built_in">strcmp</span>(record[i].name, name) == <span class="number">0</span>))</div><div class="line">		&#123;</div><div class="line">			found = <span class="literal">true</span>;</div><div class="line">			<span class="keyword">if</span> (record[i].valid)</div><div class="line">			&#123;</div><div class="line">				record[i].valid = <span class="literal">false</span>;</div><div class="line">				cancled_medal   = record[i].medal;</div><div class="line">				flag = <span class="literal">true</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line"></div><div class="line">				flag = <span class="literal">false</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!found)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"no matching score to be cancled"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!flag)</div><div class="line">	&#123;</div><div class="line">		err_report(<span class="string">"score already cancled"</span>);	</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* do upgrade work */</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; current_record; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (sport == record[i].sport &amp;&amp; record[i].valid)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">switch</span>(cancled_medal)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">case</span> GOLD:</div><div class="line">					<span class="keyword">if</span> (record[i].medal == SILVER ||</div><div class="line">						record[i].medal == BRONZE)</div><div class="line">					&#123;</div><div class="line">						record[i].medal --;</div><div class="line">					&#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> SILVER:</div><div class="line">					<span class="keyword">if</span> (record[i].medal == BRONZE)</div><div class="line">					&#123;</div><div class="line">						record[i].medal --;</div><div class="line">					&#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> BRONZE:</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_record</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"____________________________________________________________\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"|   TIME  |  COUNTRY  |  SPORT  |   NAME   |  MEDAL | VALID |\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"|-----------------------------------------------------------|\n"</span>);</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; current_record ; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"|%9d|%10s |%8d |%10s|%8s | %5s|\n"</span>,</div><div class="line">				record[i].time,</div><div class="line">				country2str(record[i].country),</div><div class="line">				record[i].sport,</div><div class="line">				record[i].name,</div><div class="line">				medal2str(record[i].medal),</div><div class="line">				record[i].valid == <span class="literal">true</span> ? <span class="string">"true"</span> : <span class="string">"false"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"____________________________________________________________\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">comp_medal_list</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* <span class="number">_</span>a, <span class="keyword">const</span> <span class="keyword">void</span> * <span class="number">_b</span>)</span></span></div><div class="line">&#123;</div><div class="line">	MedalList* a = (MedalList*) <span class="number">_</span>a;</div><div class="line">	MedalList* b = (MedalList*) <span class="number">_b</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (a-&gt;gold &gt; b-&gt;gold)</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	<span class="keyword">if</span> (a-&gt;gold &lt; b-&gt;gold)</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (a-&gt;silver &gt; b-&gt;silver)</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	<span class="keyword">if</span> (a-&gt;silver &lt; b-&gt;silver)</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (a-&gt;bronze &gt; b-&gt;bronze)</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	<span class="keyword">if</span> (a-&gt;bronze &lt; b-&gt;bronze)</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen_medal_list</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">int</span> rank_skip = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> curr_rank = <span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="comment">/* clear the medal list first */</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; COUNTRY_COUNT; i++)</div><div class="line">	&#123;</div><div class="line">		medal_list[i].country = i;</div><div class="line">		medal_list[i].gold    = <span class="number">0</span>;</div><div class="line">		medal_list[i].silver  = <span class="number">0</span>;</div><div class="line">		medal_list[i].bronze  = <span class="number">0</span>;</div><div class="line">		medal_list[i].rank    = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* add the record into medal list */</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; current_record ; i++)</div><div class="line">	&#123;</div><div class="line">		</div><div class="line">		<span class="comment">/* only check for valid record */</span></div><div class="line">		<span class="keyword">if</span> (!record[i].valid)</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line"></div><div class="line">		medal_list[record[i].country].gold  += record[i].medal == GOLD   ? <span class="number">1</span>:<span class="number">0</span>; </div><div class="line">		medal_list[record[i].country].silver+= record[i].medal == SILVER ? <span class="number">1</span>:<span class="number">0</span>; </div><div class="line">		medal_list[record[i].country].bronze+= record[i].medal == BRONZE ? <span class="number">1</span>:<span class="number">0</span>; </div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/* sort the medal list, ignore the first one */</span></div><div class="line">	qsort(medal_list, COUNTRY_COUNT, <span class="keyword">sizeof</span>(MedalList), comp_medal_list);</div><div class="line">	</div><div class="line">	medal_list[<span class="number">0</span>].rank = curr_rank;	</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; COUNTRY_COUNT; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">/* if rank is the same */</span></div><div class="line">		<span class="keyword">if</span> (medal_list[i].gold == medal_list[i<span class="number">-1</span>].gold &amp;&amp;</div><div class="line">			medal_list[i].silver == medal_list[i<span class="number">-1</span>].silver &amp;&amp;	</div><div class="line">			medal_list[i].bronze == medal_list[i<span class="number">-1</span>].bronze )	</div><div class="line">		&#123;</div><div class="line">			medal_list[i].rank = curr_rank;</div><div class="line">			rank_skip++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			curr_rank++;</div><div class="line">			medal_list[i].rank = curr_rank + rank_skip;</div><div class="line">			curr_rank += rank_skip;			</div><div class="line">			rank_skip = <span class="number">0</span>;</div><div class="line">	</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query_score</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	</div><div class="line">	<span class="comment">/* do the hard work */</span></div><div class="line">	gen_medal_list();</div><div class="line"></div><div class="line">	<span class="comment">/* ok, output the table */</span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"____________________________________________\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"|  COUNTRY  | GOLD | SILVER | BRONZE | RANK |\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"|-------------------------------------------|\n"</span>);</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; COUNTRY_COUNT; i++)	</div><div class="line">	&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"|%11s|%6d|%8d|%8d|%6d|\n"</span>,</div><div class="line">			country2str(medal_list[i].country),</div><div class="line">			medal_list[i].gold,</div><div class="line">			medal_list[i].silver,</div><div class="line">			medal_list[i].bronze,</div><div class="line">			medal_list[i].rank</div><div class="line">			);</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"____________________________________________\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/* below are all test cases */</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test_insert</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	init();</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"yshen"</span>,S1,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">1</span>,CHINA,<span class="string">"lmwang"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">1</span>,AMERICA,<span class="string">"xiaohua"</span>,S3,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">2</span>,AMERICA,<span class="string">"xiaoming"</span>,S4,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">2</span>,KOREA,<span class="string">"ddf"</span>,S5,SILVER))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">2</span>,KOREA,<span class="string">"xiaox"</span>,S6,SILVER))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">3</span>,RUSSUA,<span class="string">"xtyu"</span>,S7,BRONZE))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">3</span>,RUSSUA,<span class="string">"xtyu"</span>,S8,BRONZE))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">3</span>,RUSSUA,<span class="string">"xtyu"</span>,S9,BRONZE))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	print_record();</div><div class="line">	query_score();</div><div class="line">	<span class="comment">/* should fail: invalid name */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">3</span>,CHINA,<span class="string">"1234"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* should fail: invalid time */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">0</span>,CHINA,<span class="string">"yshen"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* should fail: medal already won by others */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">6</span>,CHINA,<span class="string">"player"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* should fail: yshen cannot win twice one game */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">6</span>,CHINA,<span class="string">"yshen"</span>,S1,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* fail: yshen cannot play in two different country */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">6</span>,AMERICA,<span class="string">"yshen"</span>,S8,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* fail: sport is not valid */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">6</span>,AMERICA,<span class="string">"llt"</span>,<span class="number">100</span>,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* fail: name len=11 is not valid*/</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">6</span>,AMERICA,<span class="string">"abcdefghijk"</span>,S10,SILVER))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* fail: name len=11 is not valid*/</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">6</span>,AMERICA,<span class="literal">NULL</span>,S10,SILVER))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	print_record();</div><div class="line">	query_score();</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test_cancle</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	init();</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S1,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* only can be entered once */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S1,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">1</span>,CHINA,<span class="string">"lmwang"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="keyword">if</span> (!cancle_score(<span class="number">1</span>,<span class="string">"lmwang"</span>,S2))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* cancel again should fail */</span></div><div class="line">	<span class="keyword">if</span> (cancle_score(<span class="number">1</span>,<span class="string">"lmwang"</span>,S2))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* cancled score cannot be entered again */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">1</span>,CHINA,<span class="string">"lmwang"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* S2 can be win by others */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">1</span>,CHINA,<span class="string">"shenyu"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	print_record();</div><div class="line">	<span class="comment">/* player can win other game  */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">1</span>,CHINA,<span class="string">"lmwang"</span>,S3,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	print_record();</div><div class="line">	<span class="comment">/* cancled score should not be inside */</span></div><div class="line">	query_score();</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test_gold_order</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	init();</div><div class="line"></div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S1,SILVER))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* ok, first rec */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S1,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* player cannot win silver and gold of same game */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S1,SILVER))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* ok, second rec */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S2,BRONZE))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* gold cannot come after bronze */</span>	</div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">0</span>,CHINA,<span class="string">"wlm"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	print_record();</div><div class="line">	query_score();</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test_upgrade</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	init();</div><div class="line">	</div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S1,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S2,GOLD))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"wanglim"</span>,S1,SILVER))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (!cancle_score(<span class="number">0</span>,<span class="string">"shenyu"</span>,S1))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (enter_score(<span class="number">0</span>,CHINA,<span class="string">"shenyu"</span>,S1,SILVER))</div><div class="line">	&#123;</div><div class="line">		print_record();</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"xiaoqia"</span>,S1,SILVER))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (!enter_score(<span class="number">0</span>,CHINA,<span class="string">"xiaohua"</span>,S1,BRONZE))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	<span class="comment">/* check gold must be first */</span></div><div class="line">	<span class="keyword">if</span> (!cancle_score(<span class="number">0</span>,<span class="string">"wanglim"</span>,S1))</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;	</div><div class="line">	print_record();</div><div class="line">	query_score();</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* TESTS */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> all_tests = <span class="number">0</span>, passed_tests = <span class="number">0</span>;</div><div class="line">	TEST(test_insert);</div><div class="line">	TEST(test_cancle);</div><div class="line">	TEST(test_gold_order);</div><div class="line">	TEST(test_upgrade);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"====Test Results===================================\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"all    tests: %d\n"</span>, all_tests);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"passed tests: %d\n"</span>, passed_tests);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"===================================================\n"</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div></pre></td><td class="code"><pre><div class="line">===================================================</div><div class="line">                Test 0                            </div><div class="line">===================================================</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=yshen,sport=1,medal=GOLD)</div><div class="line">DEBUG: enter_score(time=1,country=CHINA,name=lmwang,sport=2,medal=GOLD)</div><div class="line">DEBUG: enter_score(time=1,country=AMERICA,name=xiaohua,sport=3,medal=GOLD)</div><div class="line">DEBUG: enter_score(time=2,country=AMERICA,name=xiaoming,sport=4,medal=GOLD)</div><div class="line">DEBUG: enter_score(time=2,country=KOREA,name=ddf,sport=5,medal=SILVER)</div><div class="line">DEBUG: enter_score(time=2,country=KOREA,name=xiaox,sport=6,medal=SILVER)</div><div class="line">DEBUG: enter_score(time=3,country=RUSSUA,name=xtyu,sport=7,medal=BRONZE)</div><div class="line">DEBUG: enter_score(time=3,country=RUSSUA,name=xtyu,sport=8,medal=BRONZE)</div><div class="line">DEBUG: enter_score(time=3,country=RUSSUA,name=xtyu,sport=9,medal=BRONZE)</div><div class="line">____________________________________________________________</div><div class="line">|   TIME  |  COUNTRY  |  SPORT  |   NAME   |  MEDAL | VALID |</div><div class="line">|-----------------------------------------------------------|</div><div class="line">|        0|     CHINA |       1 |     yshen|    GOLD |  true|</div><div class="line">|        1|     CHINA |       2 |    lmwang|    GOLD |  true|</div><div class="line">|        1|   AMERICA |       3 |   xiaohua|    GOLD |  true|</div><div class="line">|        2|   AMERICA |       4 |  xiaoming|    GOLD |  true|</div><div class="line">|        2|     KOREA |       5 |       ddf|  SILVER |  true|</div><div class="line">|        2|     KOREA |       6 |     xiaox|  SILVER |  true|</div><div class="line">|        3|    RUSSUA |       7 |      xtyu|  BRONZE |  true|</div><div class="line">|        3|    RUSSUA |       8 |      xtyu|  BRONZE |  true|</div><div class="line">|        3|    RUSSUA |       9 |      xtyu|  BRONZE |  true|</div><div class="line">____________________________________________________________</div><div class="line">____________________________________________</div><div class="line">|  COUNTRY  | GOLD | SILVER | BRONZE | RANK |</div><div class="line">|-------------------------------------------|</div><div class="line">|      CHINA|     2|       0|       0|     1|</div><div class="line">|    AMERICA|     2|       0|       0|     1|</div><div class="line">|      KOREA|     0|       2|       0|     3|</div><div class="line">|     RUSSUA|     0|       0|       3|     4|</div><div class="line">|      JAPAN|     0|       0|       0|     5|</div><div class="line">|    ENGLAND|     0|       0|       0|     5|</div><div class="line">____________________________________________</div><div class="line">DEBUG: enter_score(time=3,country=CHINA,name=1234,sport=2,medal=GOLD)</div><div class="line">ERROR:name contains char that is not alpha</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=yshen,sport=2,medal=GOLD)</div><div class="line">ERROR:time should &gt;= sys_time</div><div class="line">DEBUG: enter_score(time=6,country=CHINA,name=player,sport=2,medal=GOLD)</div><div class="line">ERROR:sport has already has the medal</div><div class="line">DEBUG: enter_score(time=6,country=CHINA,name=yshen,sport=1,medal=GOLD)</div><div class="line">ERROR:sport has played by the player</div><div class="line">DEBUG: enter_score(time=6,country=AMERICA,name=yshen,sport=8,medal=GOLD)</div><div class="line">ERROR:player cannot play in different country</div><div class="line">DEBUG: enter_score(time=6,country=AMERICA,name=llt,sport=100,medal=GOLD)</div><div class="line">ERROR:sport is not valid</div><div class="line">DEBUG: enter_score(time=6,country=AMERICA,name=abcdefghijk,sport=10,medal=SILVER)</div><div class="line">ERROR:name len should be 1 to 10</div><div class="line">DEBUG: enter_score(time=6,country=AMERICA,name=(null),sport=10,medal=SILVER)</div><div class="line">ERROR:name can not be NULL</div><div class="line">____________________________________________________________</div><div class="line">|   TIME  |  COUNTRY  |  SPORT  |   NAME   |  MEDAL | VALID |</div><div class="line">|-----------------------------------------------------------|</div><div class="line">|        0|     CHINA |       1 |     yshen|    GOLD |  true|</div><div class="line">|        1|     CHINA |       2 |    lmwang|    GOLD |  true|</div><div class="line">|        1|   AMERICA |       3 |   xiaohua|    GOLD |  true|</div><div class="line">|        2|   AMERICA |       4 |  xiaoming|    GOLD |  true|</div><div class="line">|        2|     KOREA |       5 |       ddf|  SILVER |  true|</div><div class="line">|        2|     KOREA |       6 |     xiaox|  SILVER |  true|</div><div class="line">|        3|    RUSSUA |       7 |      xtyu|  BRONZE |  true|</div><div class="line">|        3|    RUSSUA |       8 |      xtyu|  BRONZE |  true|</div><div class="line">|        3|    RUSSUA |       9 |      xtyu|  BRONZE |  true|</div><div class="line">____________________________________________________________</div><div class="line">____________________________________________</div><div class="line">|  COUNTRY  | GOLD | SILVER | BRONZE | RANK |</div><div class="line">|-------------------------------------------|</div><div class="line">|      CHINA|     2|       0|       0|     1|</div><div class="line">|    AMERICA|     2|       0|       0|     1|</div><div class="line">|      KOREA|     0|       2|       0|     3|</div><div class="line">|     RUSSUA|     0|       0|       3|     4|</div><div class="line">|      JAPAN|     0|       0|       0|     5|</div><div class="line">|    ENGLAND|     0|       0|       0|     5|</div><div class="line">____________________________________________</div><div class="line">====Test 0 PASSED=================================</div><div class="line"></div><div class="line">===================================================</div><div class="line">                Test 1                            </div><div class="line">===================================================</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=1,medal=GOLD)</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=1,medal=GOLD)</div><div class="line">ERROR:sport has played by the player</div><div class="line">DEBUG: enter_score(time=1,country=CHINA,name=lmwang,sport=2,medal=GOLD)</div><div class="line">DEBUG:cancle_score(time=1,name=lmwang,sport=2)</div><div class="line">DEBUG:cancle_score(time=1,name=lmwang,sport=2)</div><div class="line">ERROR:score already cancled</div><div class="line">DEBUG: enter_score(time=1,country=CHINA,name=lmwang,sport=2,medal=GOLD)</div><div class="line">ERROR:sport has played by the player</div><div class="line">DEBUG: enter_score(time=1,country=CHINA,name=shenyu,sport=2,medal=GOLD)</div><div class="line">____________________________________________________________</div><div class="line">|   TIME  |  COUNTRY  |  SPORT  |   NAME   |  MEDAL | VALID |</div><div class="line">|-----------------------------------------------------------|</div><div class="line">|        0|     CHINA |       1 |    shenyu|    GOLD |  true|</div><div class="line">|        1|     CHINA |       2 |    lmwang|    GOLD | false|</div><div class="line">|        1|     CHINA |       2 |    shenyu|    GOLD |  true|</div><div class="line">____________________________________________________________</div><div class="line">DEBUG: enter_score(time=1,country=CHINA,name=lmwang,sport=3,medal=GOLD)</div><div class="line">____________________________________________________________</div><div class="line">|   TIME  |  COUNTRY  |  SPORT  |   NAME   |  MEDAL | VALID |</div><div class="line">|-----------------------------------------------------------|</div><div class="line">|        0|     CHINA |       1 |    shenyu|    GOLD |  true|</div><div class="line">|        1|     CHINA |       2 |    lmwang|    GOLD | false|</div><div class="line">|        1|     CHINA |       2 |    shenyu|    GOLD |  true|</div><div class="line">|        1|     CHINA |       3 |    lmwang|    GOLD |  true|</div><div class="line">____________________________________________________________</div><div class="line">____________________________________________</div><div class="line">|  COUNTRY  | GOLD | SILVER | BRONZE | RANK |</div><div class="line">|-------------------------------------------|</div><div class="line">|      CHINA|     3|       0|       0|     1|</div><div class="line">|    AMERICA|     0|       0|       0|     2|</div><div class="line">|      JAPAN|     0|       0|       0|     2|</div><div class="line">|      KOREA|     0|       0|       0|     2|</div><div class="line">|     RUSSUA|     0|       0|       0|     2|</div><div class="line">|    ENGLAND|     0|       0|       0|     2|</div><div class="line">____________________________________________</div><div class="line">====Test 1 PASSED=================================</div><div class="line"></div><div class="line">===================================================</div><div class="line">                Test 2                            </div><div class="line">===================================================</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=1,medal=SILVER)</div><div class="line">ERROR:GOLD for this sport  must come first</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=1,medal=GOLD)</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=1,medal=SILVER)</div><div class="line">ERROR:sport has played by the player</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=2,medal=BRONZE)</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=wlm,sport=2,medal=GOLD)</div><div class="line">ERROR:GOLD for this sport must be entered first</div><div class="line">____________________________________________________________</div><div class="line">|   TIME  |  COUNTRY  |  SPORT  |   NAME   |  MEDAL | VALID |</div><div class="line">|-----------------------------------------------------------|</div><div class="line">|        0|     CHINA |       1 |    shenyu|    GOLD |  true|</div><div class="line">|        0|     CHINA |       2 |    shenyu|  BRONZE |  true|</div><div class="line">____________________________________________________________</div><div class="line">____________________________________________</div><div class="line">|  COUNTRY  | GOLD | SILVER | BRONZE | RANK |</div><div class="line">|-------------------------------------------|</div><div class="line">|      CHINA|     1|       0|       1|     1|</div><div class="line">|    AMERICA|     0|       0|       0|     2|</div><div class="line">|      JAPAN|     0|       0|       0|     2|</div><div class="line">|      KOREA|     0|       0|       0|     2|</div><div class="line">|     RUSSUA|     0|       0|       0|     2|</div><div class="line">|    ENGLAND|     0|       0|       0|     2|</div><div class="line">____________________________________________</div><div class="line">====Test 2 PASSED=================================</div><div class="line"></div><div class="line">===================================================</div><div class="line">                Test 3                            </div><div class="line">===================================================</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=1,medal=GOLD)</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=2,medal=GOLD)</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=wanglim,sport=1,medal=SILVER)</div><div class="line">DEBUG:cancle_score(time=0,name=shenyu,sport=1)</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=shenyu,sport=1,medal=SILVER)</div><div class="line">ERROR:sport has played by the player</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=xiaoqia,sport=1,medal=SILVER)</div><div class="line">DEBUG: enter_score(time=0,country=CHINA,name=xiaohua,sport=1,medal=BRONZE)</div><div class="line">DEBUG:cancle_score(time=0,name=wanglim,sport=1)</div><div class="line">____________________________________________________________</div><div class="line">|   TIME  |  COUNTRY  |  SPORT  |   NAME   |  MEDAL | VALID |</div><div class="line">|-----------------------------------------------------------|</div><div class="line">|        0|     CHINA |       1 |    shenyu|    GOLD | false|</div><div class="line">|        0|     CHINA |       2 |    shenyu|    GOLD |  true|</div><div class="line">|        0|     CHINA |       1 |   wanglim|    GOLD | false|</div><div class="line">|        0|     CHINA |       1 |   xiaoqia|    GOLD |  true|</div><div class="line">|        0|     CHINA |       1 |   xiaohua|  SILVER |  true|</div><div class="line">____________________________________________________________</div><div class="line">____________________________________________</div><div class="line">|  COUNTRY  | GOLD | SILVER | BRONZE | RANK |</div><div class="line">|-------------------------------------------|</div><div class="line">|      CHINA|     2|       1|       0|     1|</div><div class="line">|    AMERICA|     0|       0|       0|     2|</div><div class="line">|      JAPAN|     0|       0|       0|     2|</div><div class="line">|      KOREA|     0|       0|       0|     2|</div><div class="line">|     RUSSUA|     0|       0|       0|     2|</div><div class="line">|    ENGLAND|     0|       0|       0|     2|</div><div class="line">____________________________________________</div><div class="line">====Test 3 PASSED=================================</div><div class="line"></div><div class="line">====Test Results===================================</div><div class="line">all    tests: 4</div><div class="line">passed tests: 4</div><div class="line">===================================================</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mathjax公式]]></title>
      <url>http://shenyu.wiki/2016/09/17/Mathjax%E5%85%AC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>利用mathjax可以方便的输入latex格式的公式，例如输入如下文本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$E=mc^2$$</div></pre></td></tr></table></figure></p>
<p>就会自动生成如下格式化的公式<br>$$E=mc^2$$</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[长城 Great Wall]]></title>
      <url>http://shenyu.wiki/2016/09/15/%E9%95%BF%E5%9F%8E/</url>
      <content type="html"><![CDATA[<blockquote>
<p>长城（Great Wall）又称万里长城，是中国古代的军事防御工程。长城修筑的历史可上溯到西周时期，发生在首都镐京（今陕西西安）的著名的典故“烽火戏诸侯”就源于此。春秋战国时期列国争霸，互相防守，长城修筑进入第一个高潮，但此时修筑的长度都比较短。秦灭六国统一天下后，秦始皇连接和修缮战国长城，始有万里长城之称。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/gzsbxd49ixdcm1yjk6p4kbma/2016-10-04%2013-05-31%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$八达岭长城$$</p>
<p>八达岭长城，位于北京市延庆区军都山关沟古道北口。是中国古代伟大的防御工程万里长城的重要组成部分，是明长城的一个隘口。八达岭长城为居庸关的重要前哨，古称“居庸之险不在关而在八达岭”。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/cu9g6kwjxit08k639it2btj4/2016-10-04%2012-58-54%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$烽火台$$<br>烽火台高均五丈，周围建小城，高一丈五尺，上设悬楼垒木，下设壕堑吊桥，外设塌窖陷阱；门道上置水柜，冬日盛冰、夏日盛水；不修台阶，以绳梯上下；每台有火铳、火炮2门，有守卒10人。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/hgfm3n6odz2f1k2ilmz42gyu/2016-10-04%2012-54-09%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$城墙$$</p>
<p>八达岭长城城墙高6～9米，平面呈梯形，底宽6.5～7.5米、顶宽4.5～5.8米。大部墙顶宽阔平坦，可以“五马并骑、十人并行”；城墙中线偏于外侧，外侧墙高，内侧墙低。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[北京奥林匹克公园 Beijing Olympic Park]]></title>
      <url>http://shenyu.wiki/2016/06/09/%E5%8C%97%E4%BA%AC%E5%A5%A5%E6%9E%97%E5%8C%B9%E5%85%8B%E5%85%AC%E5%9B%AD/</url>
      <content type="html"><![CDATA[<blockquote>
<p>北京奥林匹克公园位于北京市朝阳区，地处北京城中轴线北端。2008年奥运会比赛期间，有鸟巢、水立方、国家体育馆、等10个奥运会竞赛场馆。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/usu0xch6mcnp42rby3u62p8p/2016-10-04%2013-45-00%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$ 鸟巢　水立方$$<br>国家游泳中心又称水立方,长宽高分别为177m ×177m×30m。其与国家体育场(俗称鸟巢)分列于北京城市中轴线北端的两侧。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/k0ej1vatj5ffs5vkn9uwpa4j/2016-10-04%2013-44-17%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$ 鸟巢$$<br>国家体育场（鸟巢）位于北京奥林匹克公园中心区南部，为2008年北京奥运会的主体育场。工程总占地面积21公顷。奥运会后成为北京市民参与体育活动及享受体育娱乐的大型专业场所，并成为地标性的体育建筑和奥运遗产。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/hpflyee8d2bh61j7gr7yzwx9/2016-10-04%2013-46-17%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$湖$$<br>森林公园的湖泊作为“龙头”，引起整个奥林匹克公园之中的龙形水系，把自然引入城市。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[天安门 Tiananmen]]></title>
      <url>http://shenyu.wiki/2016/05/01/%E5%A4%A9%E5%AE%89%E9%97%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>天安门，坐落在中华人民共和国首都北京市的中心、故宫的南端，与天安门广场以及人民英雄纪念碑、毛主席纪念堂、人民大会堂、中国国家博物馆隔长安街相望，占地面积4800平方米，以杰出的建筑艺术和特殊的政治地位为世人所瞩目。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/bnyu3xl0wxhl05pnn8y5p207/CghzfFW655SATWClAA_8fZQFgUE656.jpg" alt=""><br>$$天安门广场$$<br>天安门广场位于北京市中心，南北长880米，东西宽500米，面积达44万平方米，可容纳100万人举行盛大集会。是当今世界上最大的城中广场。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/fjim634uhf8dcj13zwk7ocqv/2016-10-04%2013-17-24%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$天安门$$<br>天安门是明清两代北京皇城的正门，始建于明朝永乐十五年（1417年）。天安门城楼长66米、宽37米。正中门洞上方悬挂着毛泽东画像，两边分别是“中华人民共和国万岁”和“世界人民大团结万岁”的大幅标语。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/9jz54rnyvcztch5gfgjvxv09/2016-10-04%2013-19-51%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$天安门城楼$$<br>天安门城楼为中国传统的重檐歇山顶建筑。城楼为木结构建筑，大殿飞檐下是排列有序的斗拱和梁枋。斗拱为中国传统木构架体系中独有，是斗形木弓形横木组成的具有翘、昂、拱特点的木制构件。梁枋又分额枋、檐枋，斗拱下面是额枋，上面彩画和金龙图案，柱子之间的构件叫檐枋，会有金龙和玺图案。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[兰州 Lanzhou]]></title>
      <url>http://shenyu.wiki/2016/03/08/%E5%85%B0%E5%B7%9E/</url>
      <content type="html"><![CDATA[<blockquote>
<p>兰州，甘肃省省会，中国西北地区重要的工业基地和综合交通枢纽，西部地区重要的中心城市之一，丝绸之路经济带的重要节点城市，也是西部战区陆军机关驻地。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/m48as8mnj56ad9tb9wj3q0jq/2016-10-04%2015-41-17%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$兰州拉面$$</p>
<p>兰州拉面，又称兰州清汤牛肉面，是“中国十大面条”之一，是甘肃省兰州地区的风味小吃。它以“汤镜者清，肉烂者香，面细者精”的独特风味和“一清二白三红四绿五黄”，一清（汤清）、二白（萝卜白）、三红（辣椒油红）、四绿（香菜、蒜苗绿）、五黄（面条黄亮），赢得了国内乃至全世界顾客的好评。并被中国烹饪协会评为三大中式快餐之一，得到美誉“中华第一面”。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/qa18kqba37amdo3wcbdbcuke/2016-10-04%2015-38-26%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$兰州大学$$<br>兰州大学（Lanzhou University），创建于1909年,由中华人民共和国教育部直属，中央直管副部级建制，位列“211工程”、“985工程”大学行列，设有研究生院，是一所综合性全国重点大学。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/4uruja4fkccttw39t7h6nu9p/2016-10-04%2015-38-57%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$黄河兰州段$$</p>
<p>黄河，中国北部大河，全长约5464公里，流域面积约752443平方公里。世界第六大长河，中国第二长河。黄河兰州段全长45.2公里，由于尚未流经黄土高原，水质清澈。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql大数据处理]]></title>
      <url>http://shenyu.wiki/2015/02/17/mysql%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><blockquote>
<p>将近10天的温度数据，9个温度测点，采样间隔为1分钟，共计12万行数据，需要导出每小时的温度数据。</p>
</blockquote>
<p>ps: 现在有很多工具，比如mysql workbench可以很方便完成数据导入的工作。这里用ｃ语言把数据转为insert语句，是为了更好的解释其中的工作原理。</p>
<h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><p>数据格式如下：有3列，分别是日期，时间，温度。文件名是测点编号。</p>
<p><img src="http://img.blog.csdn.net/20141125135942138?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2hlbnl1Zmx5aW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="ddd"></p>
<h2 id="数据库设计为如下"><a href="#数据库设计为如下" class="headerlink" title="数据库设计为如下"></a>数据库设计为如下</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> sensorDB;  </div><div class="line"><span class="keyword">use</span> sensorDB;  </div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> sensor  </div><div class="line">(  </div><div class="line">    <span class="keyword">ID</span> <span class="built_in">smallint</span> ,  </div><div class="line">    dt <span class="built_in">Date</span>,  </div><div class="line">    tm <span class="keyword">Time</span>,  </div><div class="line">    temp <span class="built_in">float</span>,  </div><div class="line">    primary <span class="keyword">key</span> (<span class="keyword">ID</span>,dt,tm)  </div><div class="line">);</div></pre></td></tr></table></figure>
<p>建立一个视图把dt和tm两个字段合并<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">view</span> temperature  </div><div class="line"><span class="keyword">as</span>  </div><div class="line"><span class="keyword">select</span> <span class="keyword">ID</span>, <span class="keyword">cast</span>(<span class="keyword">CONCAT</span>(dt,<span class="string">' '</span>,tm) <span class="keyword">as</span> datetime) <span class="string">'时间'</span> , temp <span class="keyword">from</span> sensor   ;</div></pre></td></tr></table></figure></p>
<h2 id="txt格式文件导入数据库"><a href="#txt格式文件导入数据库" class="headerlink" title="txt格式文件导入数据库"></a>txt格式文件导入数据库</h2><p>用C语言写了一个小工具，可以把txt转成sql语句【见后面的源代码】        运行后，输入txt的文件名，要插入的表名，和传感器的编号即可。   程序运行完毕之后，自动生成sql语句如下：<br><img src="http://img.blog.csdn.net/20141125140008127?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2hlbnl1Zmx5aW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="d"><br>然后直接运行sql语句，数据就导入到数据库中了。</p>
<h2 id="按指定间隔查询数据"><a href="#按指定间隔查询数据" class="headerlink" title="按指定间隔查询数据"></a>按指定间隔查询数据</h2><p>利用了timestampdiff（）来计算时间间隔 ，并利用%来逐个判断</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> temperature <span class="keyword">where</span> <span class="keyword">ID</span> = <span class="number">9</span> <span class="keyword">and</span>  <span class="keyword">timestampdiff</span>(<span class="keyword">MINUTE</span>,时间,<span class="string">'2014-04-19 15:00:00'</span>)%<span class="number">60</span> =<span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>如下便是间隔1小时的温度数据</p>
<p><img src="http://img.blog.csdn.net/20141125140019422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2hlbnl1Zmx5aW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="dd"></p>
<h2 id="附件：txt转sql源代码-C"><a href="#附件：txt转sql源代码-C" class="headerlink" title="附件：txt转sql源代码 C"></a>附件：txt转sql源代码 C</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span>  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_LEN 2048  </span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> sp[] = &#123; <span class="string">' '</span>, <span class="string">'\t'</span>, <span class="string">';'</span>,<span class="string">'\r'</span>,<span class="string">'\n'</span> &#125;;  </div><div class="line">  </div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">error</span><span class="params">(<span class="keyword">char</span> *msg)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"ERROR:%s"</span>,msg);  </div><div class="line">    fflush(<span class="built_in">stdin</span>);  </div><div class="line">    getchar();  </div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isSeperator</span><span class="params">(<span class="keyword">char</span>  ch)</span>  </span></div><div class="line">&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(sp) / <span class="keyword">sizeof</span>(<span class="keyword">char</span>); i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span> ( ch == sp[i])  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"=============================\n"</span>);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"          txt2sql\n"</span>);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"=============================\n"</span>);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"data fielname: "</span>);  </div><div class="line">    fflush(<span class="built_in">stdin</span>);  </div><div class="line">    <span class="keyword">char</span> filename_in[<span class="number">256</span>], filename_out[<span class="number">256</span>];  </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,filename_in);  </div><div class="line">    <span class="built_in">strcpy</span>(filename_out, filename_in);  </div><div class="line">    <span class="built_in">strcat</span>(filename_out, <span class="string">"_sql.txt"</span>);  </div><div class="line">    <span class="built_in">strcat</span>(filename_in, <span class="string">".txt"</span>);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"table name: "</span>);  </div><div class="line">    fflush(<span class="built_in">stdin</span>);  </div><div class="line">    <span class="keyword">char</span> table_name[<span class="number">256</span>];  </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, table_name);  </div><div class="line">  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sensor ID: "</span>);  </div><div class="line">    fflush(<span class="built_in">stdin</span>);  </div><div class="line">    <span class="keyword">char</span> sensor_ID[<span class="number">256</span>];  </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, sensor_ID);  </div><div class="line">  </div><div class="line">  </div><div class="line">    FILE *fin = fopen(filename_in, <span class="string">"r"</span>);  </div><div class="line">    FILE *fout = fopen(filename_out, <span class="string">"w"</span>);  </div><div class="line">    <span class="keyword">if</span> (fin == <span class="literal">NULL</span> || fout == <span class="literal">NULL</span>)  </div><div class="line">    &#123;  </div><div class="line">        error(<span class="string">"cannot open file"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">char</span> buffer[BUFFER_LEN];  </div><div class="line">    <span class="keyword">while</span> (fgets(buffer, BUFFER_LEN, fin) != <span class="number">0</span>)  </div><div class="line">    &#123;  </div><div class="line">        <span class="comment">//除去多余的分隔符  </span></div><div class="line">        <span class="keyword">char</span> elem[BUFFER_LEN];  </div><div class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;  </div><div class="line">        <span class="built_in">memset</span>(elem, <span class="number">0</span>, <span class="keyword">sizeof</span>(elem));  </div><div class="line">  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(buffer); i++)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span> (buffer[i] == <span class="string">'\n'</span> || buffer[i] == <span class="string">'\r'</span> || buffer[i]==<span class="string">'\0'</span>) buffer[i] = <span class="string">' '</span>;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(buffer); i++)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span> (!isSeperator(buffer[i]))  </div><div class="line">            &#123;  </div><div class="line">                elem[k++] = buffer[i];  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span>  </div><div class="line">            &#123;  </div><div class="line">                <span class="comment">//如果最后一个是分隔符则跳过  </span></div><div class="line">                <span class="keyword">if</span> (i == <span class="built_in">strlen</span>(buffer) &amp;&amp; isSeperator(buffer[i]))  </div><div class="line">                    <span class="keyword">continue</span>;  </div><div class="line">                <span class="comment">//如果下一个还是分隔符，则跳过。  </span></div><div class="line">                <span class="keyword">if</span> (i != <span class="built_in">strlen</span>(buffer) - <span class="number">1</span> &amp;&amp; isSeperator(buffer[i + <span class="number">1</span>]))  </div><div class="line">                    <span class="keyword">continue</span>;  </div><div class="line">                <span class="keyword">if</span> (i != <span class="built_in">strlen</span>(buffer) - <span class="number">1</span> &amp;&amp; !isSeperator(buffer[i + <span class="number">1</span>]))  </div><div class="line">                                elem[k++] = buffer[i];  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="comment">/*printf("\"%s\"",elem);*/</span>  </div><div class="line">        <span class="comment">//经过处理的elem只有包含一个分隔符在一起的情况，最后没有空元素  </span></div><div class="line">  </div><div class="line">        <span class="built_in">fprintf</span>(fout, <span class="string">"INSERT INTO %s VALUES ('%s',"</span>, table_name,sensor_ID);  </div><div class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(elem); i++)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span> (isSeperator(elem[i]))  </div><div class="line">            &#123;  </div><div class="line">                  </div><div class="line">                <span class="built_in">fprintf</span>(fout, <span class="string">"\'"</span>);  </div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = left; j &lt; i; j++)  </div><div class="line">                &#123;  </div><div class="line">                    <span class="built_in">fprintf</span>(fout, <span class="string">"%c"</span>, elem[j]);  </div><div class="line">                &#125;  </div><div class="line">                <span class="built_in">fprintf</span>(fout, <span class="string">"\',"</span>);  </div><div class="line">                left = i + <span class="number">1</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="comment">//the last one  </span></div><div class="line">        <span class="built_in">fprintf</span>(fout, <span class="string">"\'"</span>);  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = left; j &lt; <span class="built_in">strlen</span>(elem); j++)  </div><div class="line">        &#123;  </div><div class="line">            <span class="built_in">fprintf</span>(fout, <span class="string">"%c"</span>, elem[j]);  </div><div class="line">        &#125;  </div><div class="line">        <span class="built_in">fprintf</span>(fout, <span class="string">"\');\n"</span>);  </div><div class="line">           </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">  </div><div class="line">  </div><div class="line">    fclose(fin);   </div><div class="line">    fclose(fout);  </div><div class="line">  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Done!"</span>);  </div><div class="line">    fflush(<span class="built_in">stdin</span>);  </div><div class="line">    getchar();  </div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[动态增长的栈]]></title>
      <url>http://shenyu.wiki/2015/01/31/%E5%8A%A8%E6%80%81%E5%A2%9E%E9%95%BF%E7%9A%84%E6%A0%88/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>C语言实现stack数据结构<br>能够</p>
<ol>
<li>push的时候动态增长。每次扩大一倍：2,4,8,16,32…</li>
<li>pop的时候还能自动释放地址。</li>
</ol>
<a id="more"></a> 
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span>  </span></div><div class="line">   </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"linked_list_stack/my_linked_list_stack.h"</span>  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    MY_STACK  <span class="built_in">stack</span>;  </div><div class="line">    my_stack_init(&amp;<span class="built_in">stack</span>);  </div><div class="line">    my_stack_push(&amp;<span class="built_in">stack</span>,<span class="number">1</span>);  </div><div class="line">    my_stack_push(&amp;<span class="built_in">stack</span>,<span class="number">2</span>);  </div><div class="line">    my_stack_push(&amp;<span class="built_in">stack</span>,<span class="number">3</span>);  </div><div class="line">    my_stack_push(&amp;<span class="built_in">stack</span>,<span class="number">4</span>);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,my_stack_pop(&amp;<span class="built_in">stack</span>));  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,my_stack_pop(&amp;<span class="built_in">stack</span>));  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,my_stack_pop(&amp;<span class="built_in">stack</span>));  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,my_stack_pop(&amp;<span class="built_in">stack</span>));  </div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MY_STACK_H_  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _MY_STACK_H_  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span> <span class="comment">/*memset(void *s, int c, size_t n)*/</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _DEBUG_  </span></div><div class="line"><span class="comment">/*type for the stack T ,you can typedef your own*/</span>  </div><div class="line">  </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> T;  </div><div class="line"><span class="keyword">struct</span> my_block_st  </div><div class="line">&#123;  </div><div class="line">    T * ptr;<span class="comment">/*point to the allocate memory*/</span>  </div><div class="line">    <span class="keyword">struct</span> my_block_st * pre;  </div><div class="line">    <span class="keyword">int</span>  index;  </div><div class="line">    <span class="keyword">size_t</span> block_size;<span class="comment">/*size of the current block ...*/</span>  </div><div class="line">&#125;;  </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> my_block_st MY_BLOCK;  </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> my_block_st *  MY_STACK; <span class="comment">/*point to the last block*/</span>  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_stack_init_block</span><span class="params">(MY_BLOCK **block_ptr)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="comment">/*initially the size=1, and twice the size each time*/</span>  </div><div class="line">     (*block_ptr)-&gt;block_size = (*block_ptr)-&gt;block_size*<span class="number">2</span>;  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"my_stack_init_block() size=%ld\n"</span>,((*block_ptr)-&gt;block_size));  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">    (*block_ptr)-&gt;ptr =(T *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(T)* ((*block_ptr)-&gt;block_size));</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"new block add=%p\n"</span>,(*block_ptr)-&gt;ptr);  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">    <span class="keyword">if</span>((*block_ptr)-&gt;ptr==<span class="literal">NULL</span>)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"malloc err\n"</span>);  </div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </div><div class="line">    &#125;  </div><div class="line">    (*block_ptr)-&gt;index=<span class="number">-1</span>;  </div><div class="line">    <span class="built_in">memset</span>((*block_ptr)-&gt;ptr,<span class="number">0</span>,<span class="keyword">sizeof</span>((*block_ptr)-&gt;ptr));  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_stack_init</span><span class="params">(MY_STACK * s)</span>  </span></div><div class="line">&#123;  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"my_stack_init()\n"</span>);  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">    *s=(MY_STACK)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MY_BLOCK ));  </div><div class="line">    (*s)-&gt;block_size=<span class="number">1</span>;  </div><div class="line">    my_stack_init_block(&amp;(*s));  </div><div class="line">    (*s)-&gt;pre=<span class="literal">NULL</span>;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_stack_add_block</span><span class="params">(MY_STACK *s)</span>  </span></div><div class="line">&#123;  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"my_stack_add_block()\n"</span>);  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">    MY_BLOCK   * ptr_block=(MY_BLOCK*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MY_BLOCK));  </div><div class="line">    ptr_block-&gt;block_size = (*s)-&gt;block_size;<span class="comment">/*pass the current size o new block*/</span>  </div><div class="line">    my_stack_init_block(&amp;ptr_block);  </div><div class="line">    MY_BLOCK *tmp_ptr= (*s);  </div><div class="line">    *s=ptr_block;  </div><div class="line">    (*s)-&gt;pre=tmp_ptr;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_block_is_full</span><span class="params">(MY_BLOCK **s)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">if</span>(((*s)-&gt;index)==((*s)-&gt;block_size<span class="number">-1</span>))  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_block_is_empty</span><span class="params">(MY_STACK *s)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">if</span>( (*s)-&gt;index==<span class="number">-1</span>)  </div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_stack_is_empty</span><span class="params">(MY_STACK *s)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">if</span>( (*s)-&gt;pre==<span class="literal">NULL</span> &amp;&amp; (*s)-&gt; index==<span class="number">-1</span>)  </div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_stack_push</span><span class="params">(MY_STACK *s, T elem)</span>  </span></div><div class="line">&#123;  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"my_stack_push(%ld)\n"</span>,elem);  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">    <span class="keyword">if</span>(my_block_is_full(&amp;(*s)))  </div><div class="line">    &#123;  </div><div class="line">        my_stack_add_block(&amp;(*s));  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    ( *s)-&gt;index++;  </div><div class="line">    *(( *s)-&gt;ptr+(*s)-&gt;index)=elem;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function">T <span class="title">my_stack_pop</span><span class="params">(MY_STACK *s)</span>  </span></div><div class="line">&#123;  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"my_stack_pop()\n"</span>);  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">    <span class="keyword">if</span>(my_stack_is_empty(&amp;(*s)))  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"err: empty stack cannot pop!\n"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">if</span>(my_block_is_empty(&amp;(*s)))  </div><div class="line">    &#123;  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"free %p\n "</span>,( *s)-&gt;ptr);  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">        <span class="built_in">free</span>((*s)-&gt; ptr);  </div><div class="line">        *s=(*s)-&gt;pre;  </div><div class="line">    &#125;  </div><div class="line">    T tmp;  </div><div class="line">    tmp = *(( *s)-&gt;ptr+( *s)-&gt;index);  </div><div class="line">     --(( *s)-&gt;index);  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_  </span></div><div class="line">              <span class="built_in">printf</span>(<span class="string">"return %ld\n"</span>,tmp);  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> tmp;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*_MY_STACK_H_*/</span></span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[清华北大 Tsinghua and Peking University]]></title>
      <url>http://shenyu.wiki/2014/10/02/%E6%B8%85%E5%8D%8E%E5%8C%97%E5%A4%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>清华大学、北京大学是中国乃至亚洲最著名的高等学府之一。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/sgb8x1x819sneyf4hi8ao1kd/2016-10-04%2016-52-22%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$清华大学$$</p>
<p><img src="http://static.zybuluo.com/shenyuflying/v6m1ki0ntl2s1k0hfmtfm8bi/2016-10-04%2016-38-49%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$北京大学$$</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[西安 Xi'an]]></title>
      <url>http://shenyu.wiki/2014/10/01/%E8%A5%BF%E5%AE%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>西安，古称“长安”、“镐京”，是陕西省省会，地处关中平原中部，北濒渭河，南依秦岭，八水润长安。长安自古帝王都，其先后有西周、秦、西汉、新莽、西晋、前赵、前秦、后秦、西魏、北周、隋、唐13个王朝在西安地区建都（积年为1077年）。是中华文明和中华民族重要发祥地之一，丝绸之路的起点。丰镐都城、秦咸阳宫、兵马俑，汉未央宫、长乐宫，隋大兴城，唐大明宫、兴庆宫等勾勒出“长安情结”。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/jt4bnct6ra6e1gprd91pcadu/2016-10-04%2016-36-36%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p>
<p>$$长安夜景$$</p>
<p><img src="http://static.zybuluo.com/shenyuflying/3o4u8r5dmaza9i5ygvnos37j/2016-10-04%2016-34-23%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$西安电子科技大学$$<br>西安电子科技大学（Xidian University）简称“西电”或“西军电”，国家首批“211工程”、“985工程优势学科创新平台”、“2011计划”（牵头建设信息感知技术协同创新中心）。我国最早的2所国防工业重点军校之一（哈军工、西军电并称），中国电子信息领域科学研究和人才培养的核心基地，中国雷达、信息论、密码学、电子对抗、微波天线等学科的发源地。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/sxa81se0j9uwh5aae85s9t3t/2016-10-04%2016-35-07%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$西北大学$$<br>西北大学（NorthwestUniversity），简称“西大”，始建于1902年，由清末光绪皇帝御笔朱批设立，坐落于古都西安，是国家教育部与陕西省人民政府共建的综合性全国重点大学，“211工程”、“中西部高校基础能力建设工程大学，是中国西北地区历史最为悠久的高等学府。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/gct910y0hvzghqcx544a95nw/2016-10-04%2016-35-40%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$古城墙$$</p>
<p>西安明城墙位于陕西省西安市中心区，是中国现存规模最大、保存最完整的古代城垣。墙高18米，顶宽12—14米，底宽15—18米，轮廓呈封闭的长方形，周长13.74公里。城墙内人们习惯称为古城区，面积11.32平方公里，著名的西安钟鼓楼就位于古城区中心。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/dypgy8xjth7olt40z9k73hj7/2016-10-04%2016-37-15%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$回民街$$<br>西安回民街是西安著名的美食文化街区，是西安特色小吃最集中的街区，也是来西安必去的地方。其历史悠久，距今已有上千年历史。其深厚的文化底蕴，街道两旁大量的美食店铺，近300种特色风味小吃，让人流连忘返，欲罢不能的魅力所在！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[岳麓书院]]></title>
      <url>http://shenyu.wiki/2014/02/04/%E5%B2%B3%E9%BA%93%E4%B9%A6%E9%99%A2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>岳麓书院是古代汉族书院建筑，属于中国历史上著名的四大书院之一。位于湖南省长沙市湘江西岸的岳麓山风景区岳麓山东面山下。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/4f2hd5u2hssbwjt1ahumriu2/2016-10-04%2016-24-46%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$岳麓书院正门$$</p>
<p>北宋开宝九年（976年），潭州太守朱洞在僧人办学的基础上，由官府捐资兴建，正式创立岳麓书院。嗣后，历经宋、元、明、清各代，至清末光绪二十九年（1903年）改为湖南高等学堂。祥符八年（公元1015年），宋真宗召见山长周式，并赐书“岳麓书院”四字门额。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/2ywjg4gtgiatat48s0hvsa55/2016-10-04%2016-05-20%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$文物保护单位$$</p>
<p>1988年，岳麓书院建筑群被国务院批准为第三批全国重点文物保护单位。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[凤凰古城 Phoenix Town]]></title>
      <url>http://shenyu.wiki/2014/02/04/%E5%87%A4%E5%87%B0%E5%8F%A4%E5%9F%8E/</url>
      <content type="html"><![CDATA[<blockquote>
<p>凤凰古城，位于湖南省湘西土家族苗族自治州的西南部，土地总面积约10平方千米, 建于清康熙四十三年〔1704年〕。2001年被授予国家历史文化名城称号，湖南十大文化遗产之一。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/shenyuflying/bo7tstohjhne8ixrbirr4chc/2016-10-04%2016-13-46%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$凤凰夜景$$</p>
<p><img src="http://static.zybuluo.com/shenyuflying/kzge3c4f2hk51njclauyc0h2/2016-10-04%2016-04-51%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$凤凰夜景$$<br>左上角那个是一座宝塔，在夜晚仿佛是悬在半空中。</p>
<p><img src="http://static.zybuluo.com/shenyuflying/t5f3ik73nhlhh8awf4jl4yah/2016-10-04%2016-04-21%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>$$凤凰城$$<br>2001年4月8日下午,国家总理朱镕基亲临此楼,激动之情露于言表,并在此欣然挥毫,留下“朱镕基 辛巳春 凤凰城”珍贵墨宝。</p>
]]></content>
    </entry>
    
  
  
</search>
